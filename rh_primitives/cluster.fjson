{"parents": [{"link": "../../main/", "title": "Python API"}], "prev": {"link": "../function/", "title": "Function"}, "next": {"link": "../package/", "title": "Package"}, "title": "Cluster", "meta": {}, "body": "<section id=\"cluster\">\n<h1>Cluster<a class=\"headerlink\" href=\"#cluster\" title=\"Permalink to this heading\">\u00b6</a></h1>\n<p>A Cluster is a Runhouse primitive used for abstracting a particular hardware configuration.\nThis can be either an <span class=\"xref std std-ref\">on-demand cluster</span> (requires valid cloud credentials) or a BYO\n(bring-your-own) cluster (requires IP address and ssh creds).</p>\n<p>A cluster is assigned a name, through which it can be accessed and reused later on.</p>\n<section id=\"cluster-factory-method\">\n<h2>Cluster Factory Method<a class=\"headerlink\" href=\"#cluster-factory-method\" title=\"Permalink to this heading\">\u00b6</a></h2>\n</section>\n<section id=\"cluster-class\">\n<h2>Cluster Class<a class=\"headerlink\" href=\"#cluster-class\" title=\"Permalink to this heading\">\u00b6</a></h2>\n</section>\n<section id=\"ondemandcluster-class\">\n<h2>OnDemandCluster Class<a class=\"headerlink\" href=\"#ondemandcluster-class\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>A OnDemandCluster is a cluster that uses SkyPilot functionality underneath to handle\nvarious cluster properties.</p>\n</section>\n<section id=\"hardware-setup\">\n<h2>Hardware Setup<a class=\"headerlink\" href=\"#hardware-setup\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>For BYO Clusters, no additional setup is required. You will just need to have the IP address for the cluster\nand the path to SSH credentials ready to be used for the cluster initialization.</p>\n<p>For On-Demand Clusters, which use SkyPilot to automatically spin up and down clusters on the cloud, you will\nneed to first set up cloud access on your local machine:</p>\n<p>Run <code class=\"docutils literal notranslate\"><span class=\"pre\">sky</span> <span class=\"pre\">check</span></code> to see which cloud providers are enabled, and how to set up cloud credentials for each of the\nproviders.</p>\n<div class=\"highlight-cli notranslate\"><div class=\"highlight\"><pre><span></span>sky check\n</pre></div>\n</div>\n<p>For a more in depth tutorial on setting up individual cloud credentials, you can refer to\n<a class=\"reference external\" href=\"https://skypilot.readthedocs.io/en/latest/getting-started/installation.html#cloud-account-setup\">SkyPilot setup docs</a>.</p>\n</section>\n<section id=\"basic-api-usage\">\n<h2>Basic API Usage<a class=\"headerlink\" href=\"#basic-api-usage\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>For On-Demand Clusters, use the <code class=\"docutils literal notranslate\"><span class=\"pre\">rh.cluster</span></code> factory method as follows.</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">my_cluster</span> <span class=\"o\">=</span> <span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">cluster</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;rh-4-a100s&#39;</span><span class=\"p\">,</span>\n                        <span class=\"n\">instance_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;A100:4&#39;</span><span class=\"p\">,</span>    <span class=\"c1\"># or &#39;CPU:8&#39;, &#39;g5.2xlarge&#39;, etc</span>\n                        <span class=\"n\">provider</span><span class=\"o\">=</span><span class=\"s1\">&#39;gcp&#39;</span><span class=\"p\">,</span>            <span class=\"c1\"># Defaults to `cheapest` if empty</span>\n                        <span class=\"n\">autostop_mins</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">,</span>          <span class=\"c1\"># Defaults to default_autostop_mins, -1 suspends autostop</span>\n                        <span class=\"n\">use_spot</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>             <span class=\"c1\"># You must have spot quota approved to use this</span>\n                        <span class=\"n\">image_id</span><span class=\"o\">=</span><span class=\"s1\">&#39;my_ami_string&#39;</span><span class=\"p\">,</span>  <span class=\"c1\"># Generally defaults to basic deep-learning AMIs</span>\n                        <span class=\"n\">region</span><span class=\"o\">=</span><span class=\"s1\">&#39;us-east-1&#39;</span>         <span class=\"c1\"># Looks for cheapest on your continent if empty</span>\n                        <span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>For BYO Clusters, which are specified by IP addresses and SSH credentials, use the <code class=\"docutils literal notranslate\"><span class=\"pre\">rh.cluster</span></code> factory\nmethod as follows:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">my_cluster</span> <span class=\"o\">=</span> <span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">cluster</span><span class=\"p\">(</span><span class=\"n\">ips</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;&lt;ip of the cluster&gt;&#39;</span><span class=\"p\">],</span>\n                        <span class=\"n\">ssh_creds</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;ssh_user&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;...&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ssh_private_key&#39;</span><span class=\"p\">:</span><span class=\"s1\">&#39;&lt;path_to_key&gt;&#39;</span><span class=\"p\">},</span>\n                        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;rh-a10x&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>For existing clusters, which can mean either a saved OnDemandCluster config (which will be brought back\nup if needed), or a BYO or OnDemandCluster that is already up, you can simply pass in the name to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">rh.cluster</span></code> as follows:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">my_cluster</span> <span class=\"o\">=</span> <span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">cluster</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;~/my-local-a100&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">my_cluster</span> <span class=\"o\">=</span> <span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">cluster</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;@/my-a100-in-rh-rns&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># or, if you just want to load the Cluster object without refreshing its status</span>\n<span class=\"n\">my_cluster</span> <span class=\"o\">=</span> <span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">cluster</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;^rh-v100&#39;</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</section>\n<section id=\"advanced-api-usage\">\n<h2>Advanced API Usage<a class=\"headerlink\" href=\"#advanced-api-usage\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>Additional utilites for on-demand Clusters include\n<a class=\"reference internal\" href=\"../../overview/accessibility/#setting-config-options\"><span class=\"std std-ref\">setting custom default configs</span></a> and\n<a class=\"reference internal\" href=\"../../overview/compute/#on-demand-clusters\"><span class=\"std std-ref\">SkyPilot CLI commands for instance management</span></a>.</p>\n<p>To start an ssh session into the cluster so you can poke around or debug:</p>\n<div class=\"highlight-cli notranslate\"><div class=\"highlight\"><pre><span></span>$ # In CLI\n$ ssh my_cluster_name\n</pre></div>\n</div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># In Python</span>\n<span class=\"n\">my_cluster</span><span class=\"o\">.</span><span class=\"n\">ssh</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>Function logs are output onto the cluster, which can be viewed at <code class=\"code docutils literal notranslate\"><span class=\"pre\">~/.rh/&lt;cluster_name&gt;_grpc_server.log</span></code>.</p>\n<p>You can restart the RPC server, in the case that it crashes or you want to update a package that the\nserver has already imported. This runs much more quickly than shutting down and restarting a cluster.</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">my_cluster</span><span class=\"o\">.</span><span class=\"n\">restart_grpc_server</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>For notebook users, to tunnel a JupyterLab server into your local browser:</p>\n<div class=\"highlight-cli notranslate\"><div class=\"highlight\"><pre><span></span>$ # In CLI\n$ runhouse notebook my_cluster\n</pre></div>\n</div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># In Python</span>\n<span class=\"n\">my_cluster</span><span class=\"o\">.</span><span class=\"n\">notebook</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>To run a Shell command on the cluster:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">my_cluster</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">([</span><span class=\"s1\">&#39;git clone ...&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pip install ...&#39;</span><span class=\"p\">])</span>\n</pre></div>\n</div>\n<p>To run a Python on the cluster:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">my_cluster</span><span class=\"o\">.</span><span class=\"n\">run_python</span><span class=\"p\">([</span><span class=\"s1\">&#39;import torch&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;print(torch.__version__)&#39;</span><span class=\"p\">])</span>\n</pre></div>\n</div>\n<p>To open a port, if you want to run an application on the cluster that requires a port to be open,\ne.g. <a class=\"reference external\" href=\"https://www.tensorflow.org/tensorboard/\">Tensorboard</a>, <a class=\"reference external\" href=\"https://gradio.app/\">Gradio</a>:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">my_cluster</span><span class=\"o\">.</span><span class=\"n\">ssh_tunnel</span><span class=\"p\">(</span><span class=\"n\">local_port</span><span class=\"o\">=</span><span class=\"mi\">7860</span><span class=\"p\">,</span> <span class=\"n\">remote_port</span><span class=\"o\">=</span><span class=\"mi\">7860</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</section>\n</section>\n\n    <script type=\"text/x-thebe-config\">\n    {\n        requestKernel: true,\n        binderOptions: {\n            repo: \"binder-examples/jupyter-stacks-datascience\",\n            ref: \"master\",\n        },\n        codeMirrorConfig: {\n            theme: \"abcdef\",\n            mode: \"python\"\n        },\n        kernelOptions: {\n            kernelName: \"python3\",\n            path: \"./rh_primitives\"\n        },\n        predefinedOutput: true\n    }\n    </script>\n    <script>kernelName = 'python3'</script>", "metatags": "<meta name=\"generator\" content=\"Docutils 0.18.1: http://docutils.sourceforge.net/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["rh_primitives/package", "Package", "N", "next"], ["rh_primitives/function", "Function", "P", "previous"]], "sourcename": "rh_primitives/cluster.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Cluster</a><ul>\n<li><a class=\"reference internal\" href=\"#cluster-factory-method\">Cluster Factory Method</a></li>\n<li><a class=\"reference internal\" href=\"#cluster-class\">Cluster Class</a></li>\n<li><a class=\"reference internal\" href=\"#ondemandcluster-class\">OnDemandCluster Class</a></li>\n<li><a class=\"reference internal\" href=\"#hardware-setup\">Hardware Setup</a></li>\n<li><a class=\"reference internal\" href=\"#basic-api-usage\">Basic API Usage</a></li>\n<li><a class=\"reference internal\" href=\"#advanced-api-usage\">Advanced API Usage</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "rh_primitives/cluster", "sidebars": ["sidebar-logo.html", "search-field.html", "sbt-sidebar-nav.html", "sbt-sidebar-footer.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "pagetitle": "Cluster", "page_description": "Cluster  A Cluster is a Runhouse primitive used for abstracting a particular hardware configuration. This can be either an on-demand cluster (requires valid clo", "author": "the Runhouse team \ud83c\udfc3\u200d\u2640\ufe0f\ud83c\udfe0", "github_user": "run-house", "github_repo": "runhouse", "github_version": "stable", "doc_path": "docs/", "theme_search_bar_text": "Search the docs ...", "theme_show_toc_level": 1}