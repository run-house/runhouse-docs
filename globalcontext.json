{"embedded": false, "project": "Runhouse", "release": "0.0.20", "version": "", "last_updated": null, "copyright": "2023, Runhouse Inc", "master_doc": "index", "root_doc": "index", "use_opensearch": "", "docstitle": "Runhouse", "shorttitle": "Runhouse", "show_copyright": true, "show_search_summary": true, "show_sphinx": true, "has_source": true, "show_source": false, "sourcelink_suffix": ".txt", "file_suffix": ".fjson", "link_suffix": ".html", "script_files": ["_static/documentation_options.js", "_static/doctools.js", "_static/sphinx_highlight.js", "_static/clipboard.min.js", "_static/copybutton.js", "None", "_static/sphinx-thebe.js"], "language": "en", "css_files": ["_static/pygments.css", "_static/alabaster.css", "_static/sphinx-thebe.css", "_static/copybutton.css"], "sphinx_version": "6.2.1", "sphinx_version_tuple": [6, 2, 1, "final", 0], "docutils_version_info": [0, 19, 0, "final", 0], "styles": ["alabaster.css"], "style": "alabaster.css", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"]], "builder": "json", "parents": [], "logo_url": "rh_1.png", "favicon_url": "favicon.ico", "html5_doctype": true, "theme_nosidebar": "false", "theme_sidebarwidth": "230", "theme_body_min_width": "inherit", "theme_body_max_width": "800", "theme_navigation_with_keys": "False", "theme_enable_search_shortcuts": "True", "theme_globaltoc_collapse": "true", "theme_globaltoc_includehidden": "false", "theme_globaltoc_maxdepth": "", "theme_analytics_id": "", "theme_badge_branch": "master", "theme_canonical_url": "", "theme_codecov_button": "false", "theme_description": "", "theme_description_font_style": "normal", "theme_donate_url": "", "theme_extra_nav_links": "", "theme_fixed_sidebar": "false", "theme_github_banner": "false", "theme_github_button": "true", "theme_github_count": "true", "theme_github_repo": "", "theme_github_type": "watch", "theme_github_user": "", "theme_gittip_user": "", "theme_gratipay_user": "", "theme_logo": "", "theme_logo_name": "false", "theme_logo_text_align": "left", "theme_opencollective": "", "theme_opencollective_button_color": "white", "theme_page_width": "940px", "theme_relbar_border": "", "theme_show_powered_by": "true", "theme_show_related": "false", "theme_show_relbar_bottom": "", "theme_show_relbar_top": "", "theme_show_relbars": "false", "theme_sidebar_collapse": "true", "theme_sidebar_includehidden": "true", "theme_sidebar_width": "220px", "theme_tidelift_url": "", "theme_touch_icon": "", "theme_travis_button": "false", "theme_gray_1": "#444", "theme_gray_2": "#EEE", "theme_gray_3": "#AAA", "theme_pink_1": "#FCC", "theme_pink_2": "#FAA", "theme_pink_3": "#D52C2C", "theme_base_bg": "#fff", "theme_base_text": "#000", "theme_hr_border": "#B1B4B6", "theme_body_bg": "", "theme_body_text": "#3E4349", "theme_body_text_align": "left", "theme_footer_text": "#888", "theme_link": "#004B6B", "theme_link_hover": "#6D4100", "theme_sidebar_header": "", "theme_sidebar_text": "#555", "theme_sidebar_link": "", "theme_sidebar_link_underscore": "#999", "theme_sidebar_search_button": "#CCC", "theme_sidebar_list": "#000", "theme_sidebar_hr": "", "theme_anchor": "#DDD", "theme_anchor_hover_fg": "", "theme_anchor_hover_bg": "#EAEAEA", "theme_table_border": "#888", "theme_shadow": "", "theme_admonition_bg": "", "theme_admonition_border": "#CCC", "theme_note_bg": "", "theme_note_border": "#CCC", "theme_seealso_bg": "", "theme_seealso_border": "#CCC", "theme_danger_bg": "", "theme_danger_border": "", "theme_danger_shadow": "", "theme_error_bg": "", "theme_error_border": "", "theme_error_shadow": "", "theme_tip_bg": "", "theme_tip_border": "#CCC", "theme_hint_bg": "", "theme_hint_border": "#CCC", "theme_important_bg": "", "theme_important_border": "#CCC", "theme_caution_bg": "", "theme_caution_border": "", "theme_attention_bg": "", "theme_attention_border": "", "theme_warn_bg": "", "theme_warn_border": "", "theme_topic_bg": "", "theme_code_highlight_bg": "", "theme_highlight_bg": "#FAF3E8", "theme_xref_border": "#fff", "theme_xref_bg": "#FBFBFB", "theme_admonition_xref_border": "#fafafa", "theme_admonition_xref_bg": "", "theme_footnote_bg": "#FDFDFD", "theme_footnote_border": "", "theme_pre_bg": "", "theme_narrow_sidebar_bg": "#333", "theme_narrow_sidebar_fg": "#FFF", "theme_narrow_sidebar_link": "", "theme_font_size": "17px", "theme_caption_font_size": "inherit", "theme_viewcode_target_bg": "#ffd", "theme_code_bg": "#ecf0f3", "theme_code_text": "#222", "theme_code_hover": "#EEE", "theme_code_font_size": "0.9em", "theme_code_font_family": "'Consolas', 'Menlo', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', monospace", "theme_font_family": "Georgia, serif", "theme_head_font_family": "", "theme_caption_font_family": "inherit", "theme_code_highlight": "#FFC", "copybutton_prompt_text": "", "copybutton_prompt_is_regexp": false, "copybutton_only_copy_prompt_lines": true, "copybutton_remove_prompts": true, "copybutton_copy_empty_lines": true, "copybutton_line_continuation_character": "", "copybutton_here_doc_delimiter": "", "copybutton_image_svg": "", "copybutton_selector": "div.highlight pre", "copybutton_format_func": "function escapeRegExp(string) {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n\n/**\n * Removes excluded text from a Node.\n *\n * @param {Node} target Node to filter.\n * @param {string} exclude CSS selector of nodes to exclude.\n * @returns {DOMString} Text from `target` with text removed.\n */\nfunction filterText(target, exclude) {\n    const clone = target.cloneNode(true);  // clone as to not modify the live DOM\n    if (exclude) {\n        // remove excluded nodes\n        clone.querySelectorAll(exclude).forEach(node => node.remove());\n    }\n    return clone.innerText;\n}\n\n// Callback when a copy button is clicked. Will be passed the node that was clicked\n// should then grab the text and replace pieces of text that shouldn't be used in output\nfunction formatCopyText(textContent, copybuttonPromptText, isRegexp = false, onlyCopyPromptLines = true, removePrompts = true, copyEmptyLines = true, lineContinuationChar = \"\", hereDocDelim = \"\") {\n    var regexp;\n    var match;\n\n    // Do we check for line continuation characters and \"HERE-documents\"?\n    var useLineCont = !!lineContinuationChar\n    var useHereDoc = !!hereDocDelim\n\n    // create regexp to capture prompt and remaining line\n    if (isRegexp) {\n        regexp = new RegExp('^(' + copybuttonPromptText + ')(.*)')\n    } else {\n        regexp = new RegExp('^(' + escapeRegExp(copybuttonPromptText) + ')(.*)')\n    }\n\n    const outputLines = [];\n    var promptFound = false;\n    var gotLineCont = false;\n    var gotHereDoc = false;\n    const lineGotPrompt = [];\n    for (const line of textContent.split('\\n')) {\n        match = line.match(regexp)\n        if (match || gotLineCont || gotHereDoc) {\n            promptFound = regexp.test(line)\n            lineGotPrompt.push(promptFound)\n            if (removePrompts && promptFound) {\n                outputLines.push(match[2])\n            } else {\n                outputLines.push(line)\n            }\n            gotLineCont = line.endsWith(lineContinuationChar) & useLineCont\n            if (line.includes(hereDocDelim) & useHereDoc)\n                gotHereDoc = !gotHereDoc\n        } else if (!onlyCopyPromptLines) {\n            outputLines.push(line)\n        } else if (copyEmptyLines && line.trim() === '') {\n            outputLines.push(line)\n        }\n    }\n\n    // If no lines with the prompt were found then just use original lines\n    if (lineGotPrompt.some(v => v === true)) {\n        textContent = outputLines.join('\\n');\n    }\n\n    // Remove a trailing newline to avoid auto-running when pasting\n    if (textContent.endsWith(\"\\n\")) {\n        textContent = textContent.slice(0, -1)\n    }\n    return textContent\n}\n", "copybutton_exclude": ".linenos, .gp"}