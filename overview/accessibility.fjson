{"parents": [], "prev": {"link": "../data/", "title": "Data"}, "next": {"link": "../management/", "title": "Management"}, "title": "Accessibility", "meta": {}, "body": "<section id=\"accessibility\">\n<h1>Accessibility<a class=\"headerlink\" href=\"#accessibility\" title=\"Permalink to this heading\">\u00b6</a></h1>\n<section id=\"resource-name-system-rns\">\n<h2>Resource Name System (RNS)<a class=\"headerlink\" href=\"#resource-name-system-rns\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>Cloud resources are already inherently portable, so making them accessible across environments and users in\nGoogle-Docs-like manner only requires a bit of metadata and snappy resource APIs. For example, if you wanted all of\nyour collaborators to share a \u201cdata space\u201d where you could reference files in blob storage by name\n(instead of passing around lots of urls), you could stand up a key-value store mapping name to URL and an API\nto resolve the names.</p>\n<p>Now imagine you wanted to do this for tabular data, folders, and code packages, compute\ninstances, and services too, so you came up with a way of putting them into the KV store too. And now for each of\nthe above, you and your collaborators might have a number of providers underneath the resource (e.g. Parquet in S3,\nDataBricks, Snowflake, etc.), and perhaps a number of variants (e.g. Pandas, Hugging Face, Dask, RAPIDS, etc.),\nso you create a unified front-end into like resources and a dispatch system to make sure resources load properly based\non the various metadata morphologies.</p>\n<p>Finally, you have lots of collaborators and resources and don\u2019t just want a\nsingle massive global list of name strings, so you allow folder hierarchies.</p>\n<p>There you go, you\u2019ve built the Runhouse RNS. \ud83d\udd25</p>\n<p>We support saving resource metadata to the <code class=\"code docutils literal notranslate\"><span class=\"pre\">/rh</span></code> directory of the working git package or a remote metadata\nservice we call the Runhouse RNS API. Both have their advantages:</p>\n<ol class=\"arabic simple\">\n<li><p><strong>Local RNS</strong> - The git-based approach allows you to publish the exact resource metadata in the same version tree as your code, so you can be sure that the code and resources are always 1-for-1 compatible. It also is a highly visible way to distribute the resources to OSS users, who can see it right in the repo, rather than having to be aware that it exists behind an API. Imagine you publish some research, and the exact cloud configurations and data artifacts you used were published with it so consumers of the work don\u2019t need to reverse engineer your compute and data rig.</p></li>\n<li><p><strong>Runhouse RNS</strong> - The RNS API allows your resources to be accessible anywhere with an internet connection and Python interpreter, so it\u2019s way more portable. It also allows you to quickly share resources with collaborators without needing to check them into git and ask them to fetch and change their branch. The web-based approach also allows for a global source of truth for a resource (e.g. a single BERT preprocessing service shared by a team, or a most up-to-date model checkpoint), which will be updated with zero downtime by all consumers when you push a new version. Lastly, the RNS API is backed by a management API to view and manage all resources.</p></li>\n</ol>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Not every resource in Runhouse is named. You can use the Runhouse APIs if you like the ergonomics without ever\nnaming anything. Anonymous resources are simply never written to a metadata store.</p>\n</div>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>By default, the only top-level folders in the Runhouse RNS you have permission to write to are your\nusername and any organizations you are in.</p>\n</div>\n<p>We\u2019re still early in uncovering the patterns and antipatterns for a global shared environment for compute and data resources (shocker),\nbut for now we generally encourage OSS projects to publish resources in the local RNS of their package, and individuals and teams to largely rely on Runhouse RNS.</p>\n</section>\n<section id=\"secrets-and-login-logout\">\n<h2>Secrets and Login / Logout<a class=\"headerlink\" href=\"#secrets-and-login-logout\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>Using Runhouse across environments, such as reusing a service from inside a Colab or loading secrets or configs\ninto a remote environment, is much easier if you create a Runhouse account. You don\u2019t need to do this if you only plan\nto use Runhouse\u2019s APIs in a single environment, and don\u2019t plan to share resources with others.</p>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Logging in simply saves your token to <code class=\"code docutils literal notranslate\"><span class=\"pre\">~/.rh/config.yaml</span></code>, and offers to download or upload your secrets or\ndefaults (e.g. <code class=\"code docutils literal notranslate\"><span class=\"pre\">default_provider</span></code>, <code class=\"code docutils literal notranslate\"><span class=\"pre\">autostop</span></code>, etc.).</p>\n</div>\n<p><strong>Logging In:</strong></p>\n<p>Run this wherever your cloud credentials are already saved, such as your laptop.\nFollow the prompts to log in. If this is your first time logging in, you should probably upload\nyour secrets, and none of the other prompts will have any real effect (you probably haven\u2019t set any defaults yet):</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>runhouse<span class=\"w\"> </span>login\n</pre></div>\n</div>\n<p>or in Python (e.g. in a notebook)</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">login</span><span class=\"p\">(</span><span class=\"n\">interactive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p><strong>Logging Out:</strong></p>\n<p>Run this wherever your cloud credentials are already saved.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>runhouse<span class=\"w\"> </span><span class=\"nb\">logout</span>\n</pre></div>\n</div>\n<p>or in Python</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">logout</span><span class=\"p\">(</span><span class=\"n\">interactive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"admonition tip\">\n<p class=\"admonition-title\">Tip</p>\n<p>See our <a class=\"reference internal\" href=\"../../secrets/secrets/#secrets-management\"><span class=\"std std-ref\">Secrets API</span></a> and <a class=\"reference internal\" href=\"../../secrets/vault_secrets/#secrets-in-vault\"><span class=\"std std-ref\">usage examples</span></a> to see how Runhouse\nallows you to make your secrets available across different environments.</p>\n</div>\n</section>\n<section id=\"setting-config-options\">\n<h2>Setting Config Options<a class=\"headerlink\" href=\"#setting-config-options\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>Runhouse stores user configs both locally in <code class=\"code docutils literal notranslate\"><span class=\"pre\">~/.rh/config.yaml</span></code> and remotely in the Runhouse database.\nThis allows you to preserve your same config across environments. Some important configs to consider setting:</p>\n<p>Whether to use spot instances, which are cheaper but can be reclaimed at any time.\nThis is <code class=\"code docutils literal notranslate\"><span class=\"pre\">False</span></code> by default because you\u2019ll need to request spot quota from the cloud providers to use spot\ninstances.</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">configs</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s1\">&#39;use_spot&#39;</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Default autostop time for the Cluster, to dynamically stop the cluster after inactivity to save money.\nThe cluster will stay up for the specified amount of time (in minutes) after inactivity,\nor indefinitely if <cite>-1</cite> is provided. Calling a Function on the cluster after the cluster terminates will\nautomatically restart the cluster. You can also call <code class=\"code docutils literal notranslate\"><span class=\"pre\">cluster.keep_warm(autostop=-1)</span></code> to control\nthis for an existing cluster:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">configs</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s1\">&#39;default_autostop&#39;</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Default Cloud provider, if you have multiple Cloud accounts set up locally.\nSetting it to <code class=\"code docutils literal notranslate\"><span class=\"pre\">cheapest</span></code> will use the cheapest provider (through SkyPilot) for your desired hardware,\n(including spot pricing, if enabled). Other options are <code class=\"code docutils literal notranslate\"><span class=\"pre\">aws</span></code>, <code class=\"code docutils literal notranslate\"><span class=\"pre\">gcp</span></code>, <code class=\"code docutils literal notranslate\"><span class=\"pre\">azure</span></code>, or <code class=\"code docutils literal notranslate\"><span class=\"pre\">lambda</span></code></p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">configs</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s1\">&#39;default_provider&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;cheapest&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>To save updated configs to Runhouse to access them elsewhere:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">configs</span><span class=\"o\">.</span><span class=\"n\">upload_defaults</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</section>\n<section id=\"viewing-rpc-logs\">\n<h2>Viewing RPC Logs<a class=\"headerlink\" href=\"#viewing-rpc-logs\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>Function logs can be streamed back by passing <code class=\"code docutils literal notranslate\"><span class=\"pre\">stream_logs=True</span></code> to the function run. The logs are\nalso output onto the cluster on <cite>~/.rh/&lt;cluster_name&gt;_grpc_server.log</cite>, which you can view after ssh-ing in\nwith <code class=\"code docutils literal notranslate\"><span class=\"pre\">ssh</span> <span class=\"pre\">&lt;cluster</span> <span class=\"pre\">name&gt;</span></code></p>\n</section>\n<section id=\"restarting-the-rpc-server\">\n<h2>Restarting the RPC Server<a class=\"headerlink\" href=\"#restarting-the-rpc-server\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>Sometimes the RPC server will crash, or you\u2019ll update a package that the server has already imported.\nIn those cases, you can try to restart just the server (~20 seconds) to save yourself the trouble of nuking and\nreallocating the hardware itself (minutes). You can do this by running:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">my_cluster</span><span class=\"o\">.</span><span class=\"n\">restart_grpc_server</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</section>\n<section id=\"notebooks\">\n<h2>Notebooks<a class=\"headerlink\" href=\"#notebooks\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>If you prefer to work or debug in notebooks, you can call the following to tunnel a JupyterLab server into your local\nbrowser from your Runhouse cluster or function:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>runhouse<span class=\"w\"> </span>notebook<span class=\"w\"> </span>my_cluster\n</pre></div>\n</div>\n<p>or in Python:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">my_cluster</span><span class=\"o\">.</span><span class=\"n\">notebook</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>If you\u2019d like to use a hosted notebook service like Colab, you\u2019ll benefit a lot from creating a\nRunhouse account to store your secrets and loading them into Colab with <code class=\"code docutils literal notranslate\"><span class=\"pre\">rh.login()</span></code>.\nThis is not required, and you can still drop them into the Colab VM manually.</p>\n<section id=\"notes-on-notebooks\">\n<h3>Notes on Notebooks<a class=\"headerlink\" href=\"#notes-on-notebooks\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<p>Notebooks are funny beasts. The code and variable inside them are not designed to be reused to shuttled around. As such:</p>\n<ol class=\"arabic simple\">\n<li><p>If you want to <code class=\"code docutils literal notranslate\"><span class=\"pre\">rh.function</span></code> a function defined inside the notebook, it cannot contain variables or imports from outside the function, and you should assign a <code class=\"code docutils literal notranslate\"><span class=\"pre\">name</span></code> to the function. We will write the function out to a separate <code class=\"code docutils literal notranslate\"><span class=\"pre\">.py</span></code> file and import it from there, and the filename will be set to the <code class=\"code docutils literal notranslate\"><span class=\"pre\">function.name</span></code>.</p></li>\n<li><p>If you really want to use local variables or avoid writing out the function, you can set <code class=\"code docutils literal notranslate\"><span class=\"pre\">serialize_notebook_fn=True</span></code> in <code class=\"code docutils literal notranslate\"><span class=\"pre\">rh.function()</span></code>. This will cloudpickle the function before sending it, but we do not support saving and reloading these kinds of functions (cloudpickle does not support this kind of reuse and it will create issues).</p></li>\n<li><p>It is nearly always better to try to write your code in a <code class=\"code docutils literal notranslate\"><span class=\"pre\">.py</span></code> file somewhere and import it into the notebook, rather than define important functions in the notebook itself. You can also use the <code class=\"code docutils literal notranslate\"><span class=\"pre\">%%writefile</span></code> magic to write your code into a file, and then import it back into the notebook.</p></li>\n</ol>\n<p>If you want to sync down your code or data to local from the cluster afterwards:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">folder</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">&#39;remote_directory&#39;</span><span class=\"p\">,</span> <span class=\"n\">system</span><span class=\"o\">=</span><span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">cluster</span><span class=\"p\">(</span><span class=\"s1\">&#39;my_cluster&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"s1\">&#39;here&#39;</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">&#39;local_directory&#39;</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n</section>\n</section>\n</section>\n\n    <script type=\"text/x-thebe-config\">\n    {\n        requestKernel: true,\n        binderOptions: {\n            repo: \"binder-examples/jupyter-stacks-datascience\",\n            ref: \"master\",\n        },\n        codeMirrorConfig: {\n            theme: \"abcdef\",\n            mode: \"python\"\n        },\n        kernelOptions: {\n            kernelName: \"python3\",\n            path: \"./overview\"\n        },\n        predefinedOutput: true\n    }\n    </script>\n    <script>kernelName = 'python3'</script>", "metatags": "<meta name=\"generator\" content=\"Docutils 0.18.1: http://docutils.sourceforge.net/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["overview/management", "Management", "N", "next"], ["overview/data", "Data", "P", "previous"]], "sourcename": "overview/accessibility.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Accessibility</a><ul>\n<li><a class=\"reference internal\" href=\"#resource-name-system-rns\">Resource Name System (RNS)</a></li>\n<li><a class=\"reference internal\" href=\"#secrets-and-login-logout\">Secrets and Login / Logout</a></li>\n<li><a class=\"reference internal\" href=\"#setting-config-options\">Setting Config Options</a></li>\n<li><a class=\"reference internal\" href=\"#viewing-rpc-logs\">Viewing RPC Logs</a></li>\n<li><a class=\"reference internal\" href=\"#restarting-the-rpc-server\">Restarting the RPC Server</a></li>\n<li><a class=\"reference internal\" href=\"#notebooks\">Notebooks</a><ul>\n<li><a class=\"reference internal\" href=\"#notes-on-notebooks\">Notes on Notebooks</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "overview/accessibility", "sidebars": ["sidebar-logo.html", "search-field.html", "sbt-sidebar-nav.html", "sbt-sidebar-footer.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "pagetitle": "Accessibility", "page_description": "Accessibility  Resource Name System (RNS)  Cloud resources are already inherently portable, so making them accessible across environments and users in Google-Do", "author": "the Runhouse team \ud83c\udfc3\u200d\u2640\ufe0f\ud83c\udfe0", "github_user": "run-house", "github_repo": "runhouse", "github_version": "stable", "doc_path": "docs/", "theme_search_bar_text": "Search the docs ...", "theme_show_toc_level": 1}