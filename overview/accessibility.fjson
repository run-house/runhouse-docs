{"parents": [], "prev": {"link": "../notebooks/", "title": "Notebooks"}, "next": {"link": "../secrets/", "title": "Vault Secrets"}, "title": "Accessibility, Portability, and Sharing", "meta": {}, "body": "<section id=\"accessibility-portability-and-sharing\">\n<h1>Accessibility, Portability, and Sharing<a class=\"headerlink\" href=\"#accessibility-portability-and-sharing\" title=\"Permalink to this heading\">\u00b6</a></h1>\n<section id=\"resource-name-system-rns\">\n<h2>Resource Name System (RNS)<a class=\"headerlink\" href=\"#resource-name-system-rns\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>Cloud resources are already inherently portable, so making them accessible across environments and users in\nGoogle-Docs-like manner only requires a bit of metadata and snappy resource APIs. For example, if you wanted all of\nyour collaborators to share a \u201cdata space\u201d where you could reference files in blob storage by name\n(instead of passing around lots of urls), you could stand up a key-value store mapping name to URL and an API\nto resolve the names.</p>\n<p>Now imagine you wanted to do this for tabular data, folders, and code packages, compute\ninstances, and services too, so you came up with a way of putting them into the KV store too. And now for each of\nthe above, you and your collaborators might have a number of providers underneath the resource (e.g. Parquet in S3,\nDataBricks, Snowflake, etc.), and perhaps a number of variants (e.g. Pandas, Hugging Face, Dask, RAPIDS, etc.),\nso you create a unified front-end into like resources and a dispatch system to make sure resources load properly based\non the various metadata morphologies.</p>\n<p>Finally, you have lots of collaborators and resources and don\u2019t just want a\nsingle massive global list of name strings, so you allow folder hierarchies.</p>\n<p>There you go, you\u2019ve built the Runhouse RNS. \ud83d\udd25</p>\n<p>We support saving resource metadata to the <code class=\"code docutils literal notranslate\"><span class=\"pre\">/rh</span></code> directory of the working git package or a remote metadata\nservice we call the Runhouse RNS API. Both have their advantages:</p>\n<ol class=\"arabic simple\">\n<li><p><strong>Local RNS</strong> - The git-based approach allows you to publish the exact resource metadata in the same version tree as your code, so you can be sure that the code and resources are always 1-for-1 compatible. It also is a highly visible way to distribute the resources to interested OSS users, who can see it right in the repo, rather than having to be aware that it exists behind an API. Imagine you publish some research, and the exact cloud configurations and data artifacts you used were published with it so consumers of the work don\u2019t need to reverse engineer your compute and data rig.</p></li>\n<li><p><strong>Runhouse RNS</strong> - The RNS API allows your resources to be accessible anywhere with an internet connection and Python interpreter, so it\u2019s obviously way more portable. It also allows you to quickly share resources with collaborators without needing to check them into git and ask them to fetch and change their branch. The web-based approach also allows you to keep a global source of truth for a resource (e.g. a single BERT preprocessing service shared by a team, or a most up-to-date model checkpoint), which will be updated with zero downtime by all consumers when you push a new version. Lastly, the RNS API is backed by a management API to view and manage all resources.</p></li>\n</ol>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Not every resource in Runhouse is named. You can use the Runhouse APIs if you like the ergonomics without ever\nnaming anything. Anonymous resources are simply never written to a metadata store.</p>\n</div>\n<p>Every named resource has a name and \u201cfull name\u201d at <code class=\"code docutils literal notranslate\"><span class=\"pre\">resource.rns_address</span></code>, which is organized into\nhierarchical folders. When you create a resource, you can name= it with just a name (we will resolve it as being in\nthe <code class=\"code docutils literal notranslate\"><span class=\"pre\">rh.current_folder()</span></code>) or the full address. Resources in the local RNS begin with the ~ folder.\nResources built-into the Runhouse Python package begin with ^ (like a house). All other addresses are in the\nRunhouse RNS. By default, the only top-level folders in the Runhouse RNS you have permission to write to are your\nusername and any organizations you are in. The &#64; alises to your username - for example:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">my_resource</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;@/myresource&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>To persist a resource, call:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n<span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;new_name&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># Saves to rh.current_folder()</span>\n<span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;@/my_full/new_name&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># Saves to Runhouse RNS</span>\n<span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;~/my_full/new_name&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># Saves to Local RNS</span>\n</pre></div>\n</div>\n<p>To load a resource, call <code class=\"code docutils literal notranslate\"><span class=\"pre\">rh.load('my_name')</span></code>, or just call the resource factory constructor with\nonly the name, e.g.</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">function</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;my_function&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">cluster</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;~/my_name&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;@/my_datasets/my_table&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>You may need to pass the full rns_address if the resource is not in rh.current_folder(). To check if a resource exists, you can call:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;my_function&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;~/local_resource&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;@/my/rns_path/to/my_table&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>We\u2019re still early in uncovering the patterns and antipatterns for a global shared environment for compute and data resources (shocker), but for now we generally encourage OSS projects to publish resources in the local RNS of their package, and individuals and teams to largely rely on Runhouse RNS.</p>\n</section>\n<section id=\"secrets-and-logging-in-out\">\n<h2>Secrets and Logging In &amp; Out<a class=\"headerlink\" href=\"#secrets-and-logging-in-out\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>Using Runhouse across environments, such as reusing a service from inside a Colab or loading secrets or configs\ninto a remote environment, is much easier if you create a Runhouse account. You don\u2019t need to do this if you only plan\nto use Runhouse\u2019s APIs in a single environment, and don\u2019t plan to share resources with others.</p>\n<div class=\"admonition tip\">\n<p class=\"admonition-title\">Tip</p>\n<p>Logging in simply saves your token to <code class=\"code docutils literal notranslate\"><span class=\"pre\">~/.rh/config.yaml</span></code>, and offers to download or upload your secrets or\ndefaults (e.g. default provider, autostop, etc.).</p>\n</div>\n<p><strong>Logging In:</strong></p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>runhouse<span class=\"w\"> </span>login\n</pre></div>\n</div>\n<p>Run this wherever your cloud credentials are already saved, such as your laptop.\nFollow the prompts to log in. If this is your first time logging in, you should probably upload\nyour secrets, and none of the other prompts will have any real effect (you probably haven\u2019t set any defaults yet):</p>\n<p>or in Python (e.g. in a notebook)</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">login</span><span class=\"p\">(</span><span class=\"n\">interactive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p><strong>Logging Out:</strong></p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>runhouse<span class=\"w\"> </span><span class=\"nb\">logout</span>\n</pre></div>\n</div>\n<p>Run this wherever your cloud credentials are already saved.</p>\n<p>or in Python (e.g. in a notebook)</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">logout</span><span class=\"p\">(</span><span class=\"n\">interactive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</section>\n<section id=\"setting-config-options\">\n<h2>Setting Config Options<a class=\"headerlink\" href=\"#setting-config-options\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>Runhouse stores user configs both locally in <code class=\"code docutils literal notranslate\"><span class=\"pre\">~/.rh/config.yaml</span></code> and remotely in the Runhouse database.\nThis allows you to preserve your same config across environments. Some important configs to consider setting:</p>\n<p>Whether to use spot instances (cheaper but can be reclaimed at any time) by default.\nNote that this is <code class=\"code docutils literal notranslate\"><span class=\"pre\">False</span></code> by default because you\u2019ll need to request spot quota from the cloud providers to use spot\ninstances. You can override this setting in the cluster factory constructor:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">configs</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s1\">&#39;use_spot&#39;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Clusters can start and stop dynamically to save money. If you set <code class=\"code docutils literal notranslate\"><span class=\"pre\">autostop</span> <span class=\"pre\">=</span> <span class=\"pre\">10</span></code>, the cluster will terminate after\n10 minutes of inactivity. If you set <code class=\"code docutils literal notranslate\"><span class=\"pre\">autostop</span> <span class=\"pre\">=</span> <span class=\"pre\">-1</span></code>, the cluster will stay up indefinitely.\nAfter the cluster terminates, if you call a Function which is on that cluster, the Function will automatically start the\ncluster again. You can also call <code class=\"code docutils literal notranslate\"><span class=\"pre\">cluster.keep_warm(autostop=-1)</span></code> to control this for an existing cluster:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">configs</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s1\">&#39;default_autostop&#39;</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>You can set your default Cloud provider if you have multiple Cloud accounts set up locally.\nIf you set it to <code class=\"code docutils literal notranslate\"><span class=\"pre\">cheapest</span></code>, SkyPilot will select the cheapest provider for your desired hardware\n(including spot pricing, if enabled). You can set this to <code class=\"code docutils literal notranslate\"><span class=\"pre\">aws</span></code>, <code class=\"code docutils literal notranslate\"><span class=\"pre\">gcp</span></code>, or <code class=\"code docutils literal notranslate\"><span class=\"pre\">azure</span></code> too:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">configs</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s1\">&#39;default_provider&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;cheapest&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Now that you\u2019ve changed some configs, you probably want to save them to Runhouse to access them elsewhere:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">configs</span><span class=\"o\">.</span><span class=\"n\">upload_defaults</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</section>\n<section id=\"viewing-rpc-logs\">\n<h2>Viewing RPC Logs<a class=\"headerlink\" href=\"#viewing-rpc-logs\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>If you didn\u2019t run your function with <code class=\"code docutils literal notranslate\"><span class=\"pre\">stream_logs=True</span></code> and otherwise need to see the logs for Runhouse\non a particular cluster, you can ssh into the cluster with <code class=\"code docutils literal notranslate\"><span class=\"pre\">ssh</span> <span class=\"pre\">&lt;cluster</span> <span class=\"pre\">name&gt;</span></code> and <code class=\"code docutils literal notranslate\"><span class=\"pre\">screen</span> <span class=\"pre\">-r</span></code> (and use control A+D to exit.\nIf you control-C you will stop the server). The server runs inside that screen instance, so logs are written to there.</p>\n</section>\n<section id=\"restarting-the-rpc-server\">\n<h2>Restarting the RPC Server<a class=\"headerlink\" href=\"#restarting-the-rpc-server\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>Sometimes the RPC server will crash, or you\u2019ll update a package that the server has already imported.\nIn those cases, you can try to restart just the server (~20 seconds) to save yourself the trouble of nuking and\nreallocating the hardware itself (minutes). You can do this by running:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">my_cluster</span><span class=\"o\">.</span><span class=\"n\">restart_grpc_server</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</section>\n</section>\n\n    <script type=\"text/x-thebe-config\">\n    {\n        requestKernel: true,\n        binderOptions: {\n            repo: \"binder-examples/jupyter-stacks-datascience\",\n            ref: \"master\",\n        },\n        codeMirrorConfig: {\n            theme: \"abcdef\",\n            mode: \"python\"\n        },\n        kernelOptions: {\n            kernelName: \"python3\",\n            path: \"./overview\"\n        },\n        predefinedOutput: true\n    }\n    </script>\n    <script>kernelName = 'python3'</script>", "metatags": "<meta name=\"generator\" content=\"Docutils 0.18.1: http://docutils.sourceforge.net/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["overview/secrets", "Vault Secrets", "N", "next"], ["overview/notebooks", "Notebooks", "P", "previous"]], "sourcename": "overview/accessibility.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Accessibility, Portability, and Sharing</a><ul>\n<li><a class=\"reference internal\" href=\"#resource-name-system-rns\">Resource Name System (RNS)</a></li>\n<li><a class=\"reference internal\" href=\"#secrets-and-logging-in-out\">Secrets and Logging In &amp; Out</a></li>\n<li><a class=\"reference internal\" href=\"#setting-config-options\">Setting Config Options</a></li>\n<li><a class=\"reference internal\" href=\"#viewing-rpc-logs\">Viewing RPC Logs</a></li>\n<li><a class=\"reference internal\" href=\"#restarting-the-rpc-server\">Restarting the RPC Server</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "overview/accessibility", "sidebars": ["sidebar-logo.html", "search-field.html", "sbt-sidebar-nav.html", "sbt-sidebar-footer.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "pagetitle": "Accessibility, Portability, and Sharing", "page_description": "Accessibility, Portability, and Sharing  Resource Name System (RNS)  Cloud resources are already inherently portable, so making them accessible across environme", "author": "the Runhouse team \ud83c\udfc3\u200d\u2640\ufe0f\ud83c\udfe0", "github_user": "run-house", "github_repo": "runhouse", "github_version": "main", "doc_path": "docs/", "theme_search_bar_text": "Search the docs ...", "theme_show_toc_level": 1}