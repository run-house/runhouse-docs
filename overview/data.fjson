{"parents": [], "prev": {"link": "../compute/", "title": "Compute"}, "next": {"link": "../accessibility/", "title": "Accessibility"}, "title": "Data", "meta": {}, "body": "<div class=\"section\" id=\"data\">\n<h1>Data<a class=\"headerlink\" href=\"#data\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>The <a class=\"reference internal\" href=\"../../rh_primitives/folder/#folder\"><span class=\"std std-ref\">Folder</span></a>, <a class=\"reference internal\" href=\"../../rh_primitives/table/#table\"><span class=\"std std-ref\">Table</span></a>, and <a class=\"reference internal\" href=\"../../rh_primitives/blob/#blob\"><span class=\"std std-ref\">Blob</span></a> APIs provide a simple interface for storing, recalling, and\nmoving data between the user\u2019s laptop, remote compute, cloud storage, and specialized storage (e.g. data warehouses).\nThey provide least-common-denominator APIs across providers, allowing users to easily specify the actions they want\nto take on the data without needed to dig into provider-specific APIs.</p>\n<p>For each of these data primitives, Runhouse provides APIs which make the data highly accessible regardless of\nwhere it lives. While the data itself is saved to a particular system (ex: local, cluster, s3, gs),\nyou can still access the data from any other system.</p>\n<p>Some common use cases include streaming data from your cluster to your laptop, mindlessly copying your model\ncheckpoints generated on that cluster directly to s3 without having to bounce that data back to your laptop, or copying\nan existing folder from your laptop to a cluster or s3 bucket.</p>\n<p>We\u2019d like to extend this to other data concepts in the future, like kv-stores, time-series, vector and graph databases, etc.</p>\n<div class=\"section\" id=\"folders\">\n<h2>Folders<a class=\"headerlink\" href=\"#folders\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>A <a class=\"reference internal\" href=\"../../rh_primitives/folder/#folder\"><span class=\"std std-ref\">Folder</span></a> is useful for managing the various Runhouse resources created within organizations and teams.\nIt provides a reasonable option for teams to have shared resources without having to do any explicit coordination\nthrough a separate source of truth. A Folder\u2019s contents are both what it physically contains and what it\nsymbolically contains in the object.</p>\n<p>For example, let\u2019s say you generated a <a class=\"reference internal\" href=\"../../rh_primitives/table/#table\"><span class=\"std std-ref\">Table</span></a> containing a tokenized dataset and saved it to your team\u2019s\nfolder of shared resources (in path: <code class=\"code docutils literal notranslate\"><span class=\"pre\">/ds/bert_preproc</span></code>.):</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">my_table</span> <span class=\"o\">=</span> <span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">(</span>\n    <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">tokenized_dataset</span><span class=\"p\">,</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;@/bert_tokenized&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s2\">&quot;/ds/bert_preproc&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">system</span><span class=\"o\">=</span><span class=\"s2\">&quot;s3&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">mkdir</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>Runhouse will then save the underlying dataset to that particular bucket in your specified system (ex: s3)\nwithin the <code class=\"code docutils literal notranslate\"><span class=\"pre\">bert_preproc</span></code> directory, which can be then be accessed by the rest of your team.</p>\n<p>We currently support a variety of systems where a folder can live:</p>\n<ul class=\"simple\">\n<li><p><code class=\"code docutils literal notranslate\"><span class=\"pre\">file</span></code>: In a Local file system.</p></li>\n<li><p><code class=\"code docutils literal notranslate\"><span class=\"pre\">github</span></code>: On GitHub (based on provided URL).</p></li>\n<li><p><code class=\"code docutils literal notranslate\"><span class=\"pre\">sftp</span></code> / <code class=\"code docutils literal notranslate\"><span class=\"pre\">ssh</span></code>: On a <a class=\"reference internal\" href=\"../../rh_primitives/cluster/#cluster\"><span class=\"std std-ref\">Cluster</span></a>.</p></li>\n<li><p><code class=\"code docutils literal notranslate\"><span class=\"pre\">s3</span></code>: Bucket in AWS.</p></li>\n<li><p><code class=\"code docutils literal notranslate\"><span class=\"pre\">gs</span></code>: Bucket in GCS.</p></li>\n<li><p><code class=\"code docutils literal notranslate\"><span class=\"pre\">azure</span></code>: Bucket in Azure.</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"tables\">\n<h2>Tables<a class=\"headerlink\" href=\"#tables\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Runhouse supports a variety of different <a class=\"reference internal\" href=\"../../rh_primitives/table/#table\"><span class=\"std std-ref\">Table</span></a> types based on the table\u2019s underlying data type.\nBy default we store tables as parquet, but Runhouse provides a number of Table subclass implementations with\nconvenient APIs for writing, partitioning, fetching and streaming the data:</p>\n<ul class=\"simple\">\n<li><p><code class=\"code docutils literal notranslate\"><span class=\"pre\">Table</span></code>: Base table implementation. Supports any data type that can be written to parquet (ex: <a class=\"reference external\" href=\"https://arrow.apache.org/docs/python/generated/pyarrow.Table.html\">pyArrow</a>).</p></li>\n<li><p><code class=\"code docutils literal notranslate\"><span class=\"pre\">RayTable</span></code>: <a class=\"reference external\" href=\"https://docs.ray.io/en/latest/data/api/dataset.html#ray.data.Dataset\">Ray Datasets</a></p></li>\n<li><p><code class=\"code docutils literal notranslate\"><span class=\"pre\">HuggingFaceTable</span></code>: <a class=\"reference external\" href=\"https://huggingface.co/docs/datasets/index\">HuggingFace Datasets</a></p></li>\n<li><p><code class=\"code docutils literal notranslate\"><span class=\"pre\">PandasTable</span></code>: <a class=\"reference external\" href=\"https://pandas.pydata.org/docs/reference/frame.html\">Pandas DataFrames</a></p></li>\n<li><p><code class=\"code docutils literal notranslate\"><span class=\"pre\">DaskTable</span></code>: <a class=\"reference external\" href=\"https://docs.dask.org/en/stable/dataframe.html\">Dask DataFrames</a></p></li>\n</ul>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>In the near term, we plan on supporting Spark, Rapids, and BigQuery. Please let us know if there is a\nparticular Table abstraction that would be useful to you.</p>\n</div>\n</div>\n<div class=\"section\" id=\"blobs\">\n<h2>Blobs<a class=\"headerlink\" href=\"#blobs\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>A <a class=\"reference internal\" href=\"../../rh_primitives/blob/#blob\"><span class=\"std std-ref\">Blob</span></a> represents a single serialized file stored in a particular system.\nBlobs are useful for dropping data into storage without worrying about exactly where it sits, with Runhouse\nhandling saving down and retrieving the Blob for you.</p>\n<p>For example, if you want to save a model checkpoint for future reuse, use the Blob interface\nto easily save it in your desired cloud storage system.</p>\n<p>Please note Runhouse does not make any assumptions about deserializing the underlying blob data.\nIn this example we load an existing blob and deserialize ourselves with <code class=\"code docutils literal notranslate\"><span class=\"pre\">pickle</span></code>:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">my_blob</span> <span class=\"o\">=</span> <span class=\"n\">Blob</span><span class=\"o\">.</span><span class=\"n\">from_name</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_blob&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">raw_data</span> <span class=\"o\">=</span> <span class=\"n\">my_blob</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">()</span>\n<span class=\"c1\"># need to do the deserialization ourselves</span>\n<span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">pickle</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">raw_data</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n</div>\n\n    <script type=\"text/x-thebe-config\">\n    {\n        requestKernel: true,\n        binderOptions: {\n            repo: \"binder-examples/jupyter-stacks-datascience\",\n            ref: \"master\",\n        },\n        codeMirrorConfig: {\n            theme: \"abcdef\",\n            mode: \"python\"\n        },\n        kernelOptions: {\n            kernelName: \"python3\",\n            path: \"./overview\"\n        },\n        predefinedOutput: true\n    }\n    </script>\n    <script>kernelName = 'python3'</script>", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["overview/accessibility", "Accessibility", "N", "next"], ["overview/compute", "Compute", "P", "previous"]], "sourcename": "overview/data.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Data</a><ul>\n<li><a class=\"reference internal\" href=\"#folders\">Folders</a></li>\n<li><a class=\"reference internal\" href=\"#tables\">Tables</a></li>\n<li><a class=\"reference internal\" href=\"#blobs\">Blobs</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "overview/data", "sidebars": ["sidebar-logo.html", "search-field.html", "sbt-sidebar-nav.html", "sbt-sidebar-footer.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "pagetitle": "Data", "page_description": "Data  The Folder, Table, and Blob APIs provide a simple interface for storing, recalling, and moving data between the user\u2019s laptop, remote compute, cloud stora", "author": "the Runhouse team \ud83c\udfc3\u200d\u2640\ufe0f\ud83c\udfe0", "github_user": "run-house", "github_repo": "runhouse", "github_version": "stable", "doc_path": "docs/", "theme_search_bar_text": "Search the docs ...", "theme_show_toc_level": 1}