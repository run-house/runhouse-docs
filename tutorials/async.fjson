{"parents": [], "prev": {"link": "../../api/cli/", "title": "Command Line Interface"}, "next": {"link": "../../installation/", "title": "Installation and Setup"}, "title": "Asynchronous Programming", "meta": {}, "body": "<section id=\"asynchronous-programming\">\n<h1>Asynchronous Programming<a class=\"headerlink\" href=\"#asynchronous-programming\" title=\"Permalink to this heading\">\u00b6</a></h1>\n<p><a href=\"https://colab.research.google.com/github/run-house/notebooks/blob/stable/docs/async.ipynb\">\n<img height=\"20px\" width=\"117px\" src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a></p><section id=\"background\">\n<h2>Background<a class=\"headerlink\" href=\"#background\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p><em>Note that this tutorial assumes basic understanding of Runhouse\nFunctions &amp; Modules; it is recommended that you check out</em> <a class=\"reference external\" href=\"https://www.run.house/docs/tutorials/api-modules\">our\nfunctions and modules\ntutorial</a> <em>before\ndiving into this one.</em></p>\n<p>As we\u2019ve discussed before, once you take a Python function or module and\nsend it to a Runhouse cluster, the cluster holds your resource in\nmemory, and each time that function or module is called by a client, it\nsimply accesses it in memory and calls it. Under the hood, we have a\nfully asynchronous server running (FastAPI), and a separate process for\neach environment where your Runhouse resources live. These processes all\nhave their own async event loops, and if you run synchronous functions\non Runhouse, they are ran in a separate thread to allow for many\nconcurrent calls to the cluster. <strong>Note that if you are unfamiliar with\nasynchronous programming in Python, you should just continue using\nstandard, Python sync functions and leave the performance to us</strong>.</p>\n</section>\n<section id=\"native-async-functions\">\n<h2>Native Async Functions<a class=\"headerlink\" href=\"#native-async-functions\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>But, what if you\u2019re writing code that leverages Python\u2019s powerful\nasynchronous functionality? Luckily, we provide rich async support in a\nvariety of ways. First off, any function that is labeled with Python\u2019s\nasync keyword, when sent to a Runhouse cluster, will be <em>executed within\nthe environment processes\u2019s async event loop</em>, and not in a separate\nthread. <strong>This means that you should be very careful that you are not\nrunning any costly, synchronous code within an async function, to avoid\nblocking up your the event loop within your environment on the server.\nPoorly written async functions will not block the entire Runhouse\ndaemon, but will block other functions within the same environment as\nthe user code.</strong></p>\n<p>Client side, you also need to <code class=\"docutils literal notranslate\"><span class=\"pre\">await</span></code> a call to this function the same\nway you would if the function was running locally. Let\u2019s check out an\nexample. First, we\u2019ll start a local Runhouse daemon to mess with:</p>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span>! runhouse server restart\n</pre></div>\n</div>\n<p>Then, we\u2019ll define a simple <code class=\"docutils literal notranslate\"><span class=\"pre\">async</span></code> function to send to Runhouse:</p>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span>async def async_test(time_to_sleep: int):\n    import asyncio\n\n    await asyncio.sleep(time_to_sleep)\n    return time_to_sleep\n</pre></div>\n</div>\n<p>We can send this to Runhouse the same way we would any other Runhouse\nfunction:</p>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span>import runhouse as rh\n\nasync_test_fn_remote = rh.function(async_test).to(rh.here)\n</pre></div>\n</div>\n<div class=\"code-output highlight-default notranslate\"><div class=\"highlight\"><pre><span></span>INFO | 2024-04-30 18:50:35.023995 | Because this function is defined in a notebook, writing it out to a file to make it importable. Please make sure the function does not rely on any local variables, including imports (which should be moved inside the function body). Functions defined in Python files can be used normally.\nINFO | 2024-04-30 18:50:35.060478 | Sending module async_test of type &lt;class &#39;runhouse.resources.functions.function.Function&#39;&gt; to local Runhouse daemon\n</pre></div>\n</div>\n<p>Then, we can call this function as we would if it were a local async\nfunction. The network call to the remote cluster will execute\nasynchronously within our local event loop (our code backed by\n<code class=\"docutils literal notranslate\"><span class=\"pre\">httpx.AsyncClient</span></code>) and the async function itself will execute within\nthe async event loop on the remote server.</p>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span>await async_test_fn_remote(2)\n</pre></div>\n</div>\n<div class=\"code-output highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"mi\">2</span>\n</pre></div>\n</div>\n<p>Voila! Async functions are supported the way you\u2019d expect them to be.\nThere are a few other advanced cases, too:</p>\n</section>\n<section id=\"advanced-running-sync-functions-as-async-locally\">\n<h2>Advanced: Running Sync Functions as Async Locally<a class=\"headerlink\" href=\"#advanced-running-sync-functions-as-async-locally\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>There\u2019s another important case that we support. Let\u2019s say that your\nstandard, synchronous functions are running on a remote Runhouse\nmachine. When you call them from your local machine, there is inevitably\nnetwork I/O involved in communicating with the cluster. You may want to\nnot have your code block on this network call (for example if the\nfunction takes a long time to execute), so that you can avoid blocking\nyour local Python code. You can choose to run this function\nasynchronously, locally, and this allows you to get back a coroutine\nfrom Runhouse, that you can then use to check if Note that this means\nyour local code will have to use async primitives, even though it is\ncalling what you defined as a sync function. Let\u2019s check out an example\nof this:</p>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span>def synchronous_sleep(time_to_sleep: int):\n    import time\n\n    time.sleep(time_to_sleep)\n    return time_to_sleep\n\nsync_sleep_fn_remote = rh.function(synchronous_sleep).to(rh.here)\n</pre></div>\n</div>\n<div class=\"code-output highlight-default notranslate\"><div class=\"highlight\"><pre><span></span>INFO | 2024-04-30 18:57:00.533012 | Because this function is defined in a notebook, writing it out to a file to make it importable. Please make sure the function does not rely on any local variables, including imports (which should be moved inside the function body). Functions defined in Python files can be used normally.\nINFO | 2024-04-30 18:57:00.577673 | Sending module synchronous_sleep of type &lt;class &#39;runhouse.resources.functions.function.Function&#39;&gt; to local Runhouse daemon\n</pre></div>\n</div>\n<p>We can now call this function with the <code class=\"docutils literal notranslate\"><span class=\"pre\">run_async</span></code> argument set to to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>. This makes it not actually run locally immediately, and\ninstead returns a coroutine that you\u2019d await, as if this function were\nasynchronous. Note that, in your environment on your Runhouse cluster,\nthe functions runs in a thread, but the call to it locally is\nasynchronous, and uses <code class=\"docutils literal notranslate\"><span class=\"pre\">httpx.AsyncClient</span></code>.</p>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span>await sync_sleep_fn_remote(2, run_async=True)\n</pre></div>\n</div>\n<div class=\"code-output highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"mi\">2</span>\n</pre></div>\n</div>\n<p>You could also use <code class=\"docutils literal notranslate\"><span class=\"pre\">asyncio.create_task()</span></code> to not block your code on\nthe execution and then <code class=\"docutils literal notranslate\"><span class=\"pre\">await</span></code> it when you want the result. When using\na function defined as async or a sync function with <code class=\"docutils literal notranslate\"><span class=\"pre\">run_async=True</span></code>,\nyou always get back a coroutine, which you can do with what you please.</p>\n<p>If I wanted, I could still call this function as a fully synchronous\nfunction:</p>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span>sync_sleep_fn_remote(2)\n</pre></div>\n</div>\n<div class=\"code-output highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"mi\">2</span>\n</pre></div>\n</div>\n</section>\n<section id=\"advanced-running-async-functions-as-sync-locally\">\n<h2>Advanced: Running Async Functions as Sync Locally<a class=\"headerlink\" href=\"#advanced-running-async-functions-as-sync-locally\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>The third critical case that we support is mostly applicable when you\u2019re\nwriting async code for the purpose of running it on the Runhouse\ncluster, but want to make synchronous calls to the server. The reason\nfor you writing async code to run on the server is because our Runhouse\nserver uses ASGI and runs everything asynchronously, so you can take\nadvantage of the performance gains that come along with async code, but\ncall it locally as you would a normal client calling a normal server,\nunaware of the backend implementation of the server. We can take the\nsame async function I defined earlier and call it synchronously:</p>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span>async_test_fn_remote(2, run_async=False)\n</pre></div>\n</div>\n<div class=\"code-output highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"mi\">2</span>\n</pre></div>\n</div>\n<p>That\u2019s all there is to it! We\u2019ve tried our hardest to make working with\nasync code seamless from a user\u2019s perspective. There are other edge\ncases we\u2019ve put time into supporting and we\u2019re happy to discuss\narchitecture anytime \u2013 feel free to <a class=\"reference external\" href=\"https://github.com/run-house/runhouse/issues\">file an issue on\nGithub</a> or <a class=\"reference external\" href=\"https://discord.com/invite/RnhB6589Hs\">join us on\nDiscord</a> to discuss more!</p>\n</section>\n</section>\n\n    <script type=\"text/x-thebe-config\">\n    {\n        requestKernel: true,\n        binderOptions: {\n            repo: \"binder-examples/jupyter-stacks-datascience\",\n            ref: \"master\",\n        },\n        codeMirrorConfig: {\n            theme: \"abcdef\",\n            mode: \"python\"\n        },\n        kernelOptions: {\n            name: \"python3\",\n            path: \"./tutorials\"\n        },\n        predefinedOutput: true\n    }\n    </script>\n    <script>kernelName = 'python3'</script>", "metatags": "<meta name=\"generator\" content=\"Docutils 0.19: https://docutils.sourceforge.io/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["installation", "Installation and Setup", "N", "next"], ["api/cli", "Command Line Interface", "P", "previous"]], "sourcename": "tutorials/async.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Asynchronous Programming</a><ul>\n<li><a class=\"reference internal\" href=\"#background\">Background</a></li>\n<li><a class=\"reference internal\" href=\"#native-async-functions\">Native Async Functions</a></li>\n<li><a class=\"reference internal\" href=\"#advanced-running-sync-functions-as-async-locally\">Advanced: Running Sync Functions as Async Locally</a></li>\n<li><a class=\"reference internal\" href=\"#advanced-running-async-functions-as-sync-locally\">Advanced: Running Async Functions as Sync Locally</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "globaltoc": "<p class=\"caption\" role=\"heading\"><span class=\"caption-text\">Runhouse Overview</span></p>\n<ul>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"overview/\">\ud83c\udfc3\u200d\u2640\ufe0f Runhouse Overview \ud83c\udfe0</a></li>\n</ul>\n<p class=\"caption\" role=\"heading\"><span class=\"caption-text\">Getting Started</span></p>\n<ul>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"tutorials/quick-start-den/\">Installation and Compute Setup</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"tutorials/quick-start-cloud/\">Minimal Example</a></li>\n</ul>\n<p class=\"caption\" role=\"heading\"><span class=\"caption-text\">API Basics</span></p>\n<ul>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"tutorials/api-clusters/\">Clusters</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"tutorials/api-modules/\">Functions and Modules</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"tutorials/api-process/\">Processes</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"tutorials/api-images/\">Images</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"tutorials/api-folders/\">Folders</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"tutorials/api-secrets/\">Secrets</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"tutorials/api-resources/\">Resource Management</a></li>\n</ul>\n<p class=\"caption\" role=\"heading\"><span class=\"caption-text\">API Reference</span></p>\n<ul>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"api/python/\">Python API</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/python/resource/\">Resource</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/python/function/\">Function</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/python/cluster/\">Cluster</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/python/image/\">Image</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/python/package/\">Package</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/python/module/\">Module</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/python/folder/\">Folder</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/python/secrets/\">Secrets</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/python/login/\">Login/Logout</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"api/cli/\">Command Line Interface</a></li>\n</ul>\n<p class=\"caption\" role=\"heading\"><span class=\"caption-text\">Other Topics</span></p>\n<ul>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"tutorials/async/\">Asynchronous Programming</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"installation/\">Installation and Setup</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"debugging-logging/\">Debugging and Logging</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"docker-setup/\">Docker: Cluster Setup</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"docker-workflows/\">Docker: Dev and Prod Workflows with Runhouse</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"security-and-authentication/\">Security and Authentication</a></li>\n</ul>\n", "current_page_name": "tutorials/async", "sidebars": ["about.html", "navigation.html", "relations.html", "searchbox.html", "donate.html"], "customsidebar": null, "alabaster_version": "0.7.16", "alabaster_version_info": [0, 7, 16]}