{"parents": [], "prev": {"link": "../api-modules/", "title": "Functions and Modules"}, "next": {"link": "../api-images/", "title": "Images"}, "title": "Processes", "meta": {}, "body": "<section id=\"processes\">\n<h1>Processes<a class=\"headerlink\" href=\"#processes\" title=\"Permalink to this heading\">\u00b6</a></h1>\n<p><a href=\"https://colab.research.google.com/github/run-house/notebooks/blob/stable/docs/api-process.ipynb\">\n<img height=\"20px\" width=\"117px\" src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a></p><p>On your Runhouse cluster, whether you have one node or multiple nodes,\nyou may want to run things in different processes on the cluster.</p>\n<p>There are a few key use cases for separating your logic into different\nprocesses:</p>\n<ol class=\"arabic simple\">\n<li><p>Creating processes that require certain amounts of resources.</p></li>\n<li><p>Creating processes on specific nodes.</p></li>\n<li><p>Creating processes with specific environment variables.</p></li>\n<li><p>General OS process isolation \u2013 allowing you to kill things on the\ncluster without touching other running logic.</p></li>\n</ol>\n<p>You can put your Runhouse Functions/Modules into specific processes, or\neven run bash commands in specific processes.</p>\n<p>Let\u2019s set up a basic cluster and some easy logic to send to it.</p>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span>def see_process_attributes():\n    import os\n    import time\n    import socket\n\n    log_level = os.environ.get(&quot;LOG_LEVEL&quot;)\n\n    if log_level == &quot;DEBUG&quot;:\n        print(&quot;Debugging...&quot;)\n    else:\n        print(&quot;No log level set.&quot;)\n\n    # Return the IP that this is scheduled on\n    return socket.gethostbyname(socket.gethostname())\n</pre></div>\n</div>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span>import runhouse as rh\n\ncluster = rh.cluster(name=&quot;multi-gpu-cluster&quot;, accelerators=&quot;A10G:1&quot;, num_nodes=2, provider=&quot;aws&quot;).up_if_not()\n</pre></div>\n</div>\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008000; text-decoration-color: #008000\">\u2839</span> <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">Preparing SkyPilot runtime (3/3 - runtime)</span>\n</pre><pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre><div class=\"code-output highlight-default notranslate\"><div class=\"highlight\"><pre><span></span>I 12-17 13:12:17 provisioner.py:560] \u001b[32mSuccessfully provisioned cluster: multi-gpu-cluster\u001b[0m\nI 12-17 13:12:18 cloud_vm_ray_backend.py:3402] Run commands not specified or empty.\nClusters\n\u001b[2mAWS: Fetching availability zones mapping...\u001b[0mNAME               LAUNCHED        RESOURCES                                                                  STATUS  AUTOSTOP  COMMAND\nmulti-gpu-cluster  a few secs ago  2x AWS(g5.xlarge, {&#39;A10G&#39;: 1})                                             UP      (down)    /Users/rohinbhasin/minico...\nml_ready_cluster   1 hr ago        1x AWS(m6i.large, image_id={&#39;us-east-1&#39;: &#39;docker:python:3.12.8-bookwor...  UP      (down)    /Users/rohinbhasin/minico...\n\n\u001b[?25h\n</pre></div>\n</div>\n<div class=\"code-output highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Output</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre><pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n</pre><p>We can now create processes based on whatever requirements we want.\nCovering all the examples above:</p>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span># Create some processes with GPU requirements. These will be on different nodes since each node only has one GPU, and we&#39;ll check that\np1 = cluster.ensure_process_created(&quot;p1&quot;, compute={&quot;GPU&quot;: 1})\n# This second process will also have an env var set.\np2 = cluster.ensure_process_created(&quot;p2&quot;, compute={&quot;GPU&quot;: 1}, env_vars={&quot;LOG_LEVEL&quot;: &quot;DEBUG&quot;})\n\n# We can also send processes to specific nodes if we want\np3 = cluster.ensure_process_created(&quot;p3&quot;, compute={&quot;node_idx&quot;: 1})\n\ncluster.list_processes()\n</pre></div>\n</div>\n<div class=\"code-output highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">{</span><span class=\"s1\">&#39;default_process&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;default_process&#39;</span><span class=\"p\">,</span>\n  <span class=\"s1\">&#39;compute&#39;</span><span class=\"p\">:</span> <span class=\"p\">{},</span>\n  <span class=\"s1\">&#39;runtime_env&#39;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n  <span class=\"s1\">&#39;env_vars&#39;</span><span class=\"p\">:</span> <span class=\"p\">{}},</span>\n <span class=\"s1\">&#39;p1&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;p1&#39;</span><span class=\"p\">,</span>\n  <span class=\"s1\">&#39;compute&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;GPU&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span>\n  <span class=\"s1\">&#39;runtime_env&#39;</span><span class=\"p\">:</span> <span class=\"p\">{},</span>\n  <span class=\"s1\">&#39;env_vars&#39;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">},</span>\n <span class=\"s1\">&#39;p2&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;p2&#39;</span><span class=\"p\">,</span>\n  <span class=\"s1\">&#39;compute&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;GPU&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span>\n  <span class=\"s1\">&#39;runtime_env&#39;</span><span class=\"p\">:</span> <span class=\"p\">{},</span>\n  <span class=\"s1\">&#39;env_vars&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;LOG_LEVEL&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;DEBUG&#39;</span><span class=\"p\">}},</span>\n <span class=\"s1\">&#39;p3&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;p3&#39;</span><span class=\"p\">,</span>\n  <span class=\"s1\">&#39;compute&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;node_idx&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span>\n  <span class=\"s1\">&#39;runtime_env&#39;</span><span class=\"p\">:</span> <span class=\"p\">{},</span>\n  <span class=\"s1\">&#39;env_vars&#39;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">}}</span>\n</pre></div>\n</div>\n<p>Note that we always create a <code class=\"docutils literal notranslate\"><span class=\"pre\">default_process</span></code>, which is where all\nRunhouse Functions/Modules end up if you don\u2019t specify processes when\nsending them to the cluster. This <code class=\"docutils literal notranslate\"><span class=\"pre\">default_process</span></code> always lives on\nthe head node of your cluster.</p>\n<p>Now, let\u2019s see where these processes ended up using our utility method\nset up above.</p>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span>remote_f1 = rh.function(see_process_attributes).to(cluster, process=p1)\nprint(remote_f1())\n</pre></div>\n</div>\n<div class=\"code-output highlight-default notranslate\"><div class=\"highlight\"><pre><span></span>INFO | 2024-12-17 13:23:01 | runhouse.resources.functions.function:236 | Because this function is defined in a notebook, writing it out to /Users/rohinbhasin/work/notebooks/see_process_attributes_fn.py to make it importable. Please make sure the function does not rely on any local variables, including imports (which should be moved inside the function body). This restriction does not apply to functions defined in normal Python files.\nINFO | 2024-12-17 13:23:04 | runhouse.resources.module:507 | Sending module see_process_attributes of type &lt;class &#39;runhouse.resources.functions.function.Function&#39;&gt; to multi-gpu-cluster\nINFO | 2024-12-17 13:23:04 | runhouse.servers.http.http_client:439 | Calling see_process_attributes.call\n\u001b[36mNo log level set.\n\u001b[0mINFO | 2024-12-17 13:23:04 | runhouse.servers.http.http_client:504 | Time to call see_process_attributes.call: 0.71 seconds\n172.31.89.87\n</pre></div>\n</div>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span>remote_f2 = rh.function(see_process_attributes).to(cluster, process=p2)\nprint(remote_f2())\n</pre></div>\n</div>\n<div class=\"code-output highlight-default notranslate\"><div class=\"highlight\"><pre><span></span>INFO | 2024-12-17 13:23:32 | runhouse.resources.functions.function:236 | Because this function is defined in a notebook, writing it out to /Users/rohinbhasin/work/notebooks/see_process_attributes_fn.py to make it importable. Please make sure the function does not rely on any local variables, including imports (which should be moved inside the function body). This restriction does not apply to functions defined in normal Python files.\nINFO | 2024-12-17 13:23:34 | runhouse.resources.module:507 | Sending module see_process_attributes of type &lt;class &#39;runhouse.resources.functions.function.Function&#39;&gt; to multi-gpu-cluster\nINFO | 2024-12-17 13:23:34 | runhouse.servers.http.http_client:439 | Calling see_process_attributes.call\n\u001b[36mDebugging...\n\u001b[0mINFO | 2024-12-17 13:23:35 | runhouse.servers.http.http_client:504 | Time to call see_process_attributes.call: 0.53 seconds\n172.31.94.40\n</pre></div>\n</div>\n<p>We can see that, since each process required one GPU, they were\nscheduled on different machines. You can also see that the environment\nvariable we set in the second process was propagated, as our logging\noutput is different. Let\u2019s check now that the 3rd process we explicitly\nsent to the second node is on the second node.\u201d</p>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span>remote_f3 = rh.function(see_process_attributes).to(cluster, process=p3)\nprint(remote_f3())\n</pre></div>\n</div>\n<div class=\"code-output highlight-default notranslate\"><div class=\"highlight\"><pre><span></span>INFO | 2024-12-17 13:27:05 | runhouse.resources.functions.function:236 | Because this function is defined in a notebook, writing it out to /Users/rohinbhasin/work/notebooks/see_process_attributes_fn.py to make it importable. Please make sure the function does not rely on any local variables, including imports (which should be moved inside the function body). This restriction does not apply to functions defined in normal Python files.\nINFO | 2024-12-17 13:27:08 | runhouse.resources.module:507 | Sending module see_process_attributes of type &lt;class &#39;runhouse.resources.functions.function.Function&#39;&gt; to multi-gpu-cluster\nINFO | 2024-12-17 13:27:08 | runhouse.servers.http.http_client:439 | Calling see_process_attributes.call\n\u001b[36mNo log level set.\n\u001b[0mINFO | 2024-12-17 13:27:08 | runhouse.servers.http.http_client:504 | Time to call see_process_attributes.call: 0.54 seconds\n172.31.94.40\n</pre></div>\n</div>\n<p>Success! We can also <code class=\"docutils literal notranslate\"><span class=\"pre\">run_bash</span></code> within a specific process, if we want\nto make sure our bash command runs on the same node as a function we\u2019re\nrunning.</p>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span>cluster.run_bash(&quot;ip addr&quot;, process=p2)\n</pre></div>\n</div>\n<pre class=\"code-output literal-block\">[[0,\n  '1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00n    inet 127.0.0.1/8 scope host lon       valid_lft forever preferred_lft forevern    inet6 ::1/128 scope host n       valid_lft forever preferred_lft forevern2: ens5: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 9001 qdisc mq state UP group default qlen 1000n    link/ether 12:4c:76:66:e8:bb brd ff:ff:ff:ff:ff:ffn    altname enp0s5n    inet 172.31.94.40/20 brd 172.31.95.255 scope global dynamic ens5n       valid_lft 3500sec preferred_lft 3500secn    inet6 fe80::104c:76ff:fe66:e8bb/64 scope link n       valid_lft forever preferred_lft forevern3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default n    link/ether 02:42:ac:9e:2b:8f brd ff:ff:ff:ff:ff:ffn    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0n       valid_lft forever preferred_lft forevern',\n  ''],\n [...]]</pre>\n<p>You can see that this ran on the second node. Finally, you can also kill\nprocesses, which you may want to do if you use asyncio to run long\nrunning functions in a process.</p>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span>cluster.kill_process(p3)\ncluster.list_processes()\n</pre></div>\n</div>\n<div class=\"code-output highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">{</span><span class=\"s1\">&#39;default_process&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;default_process&#39;</span><span class=\"p\">,</span>\n  <span class=\"s1\">&#39;compute&#39;</span><span class=\"p\">:</span> <span class=\"p\">{},</span>\n  <span class=\"s1\">&#39;runtime_env&#39;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n  <span class=\"s1\">&#39;env_vars&#39;</span><span class=\"p\">:</span> <span class=\"p\">{}},</span>\n <span class=\"s1\">&#39;p1&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;p1&#39;</span><span class=\"p\">,</span>\n  <span class=\"s1\">&#39;compute&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;GPU&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span>\n  <span class=\"s1\">&#39;runtime_env&#39;</span><span class=\"p\">:</span> <span class=\"p\">{},</span>\n  <span class=\"s1\">&#39;env_vars&#39;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">},</span>\n <span class=\"s1\">&#39;p2&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;p2&#39;</span><span class=\"p\">,</span>\n  <span class=\"s1\">&#39;compute&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;GPU&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span>\n  <span class=\"s1\">&#39;runtime_env&#39;</span><span class=\"p\">:</span> <span class=\"p\">{},</span>\n  <span class=\"s1\">&#39;env_vars&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;LOG_LEVEL&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;DEBUG&#39;</span><span class=\"p\">}}}</span>\n</pre></div>\n</div>\n</section>\n\n    <script type=\"text/x-thebe-config\">\n    {\n        requestKernel: true,\n        binderOptions: {\n            repo: \"binder-examples/jupyter-stacks-datascience\",\n            ref: \"master\",\n        },\n        codeMirrorConfig: {\n            theme: \"abcdef\",\n            mode: \"python\"\n        },\n        kernelOptions: {\n            name: \"python3\",\n            path: \"./tutorials\"\n        },\n        predefinedOutput: true\n    }\n    </script>\n    <script>kernelName = 'python3'</script>", "metatags": "<meta name=\"generator\" content=\"Docutils 0.19: https://docutils.sourceforge.io/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["tutorials/api-images", "Images", "N", "next"], ["tutorials/api-modules", "Functions and Modules", "P", "previous"]], "sourcename": "tutorials/api-process.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Processes</a></li>\n</ul>\n", "display_toc": false, "page_source_suffix": ".rst", "globaltoc": "<p class=\"caption\" role=\"heading\"><span class=\"caption-text\">Getting Started</span></p>\n<ul>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"tutorials/quick-start-cloud/\">Quick Start</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"tutorials/quick-start-den/\">Den Quick Start</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"how-to-use-runhouse/\">How to Use Runhouse</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"runhouse-in-your-stack/\">Working with Common Libraries and Tools</a></li>\n</ul>\n<p class=\"caption\" role=\"heading\"><span class=\"caption-text\">API Basics</span></p>\n<ul>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"tutorials/api-clusters/\">Clusters</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"tutorials/api-modules/\">Functions and Modules</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"tutorials/api-process/\">Processes</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"tutorials/api-images/\">Images</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"tutorials/api-folders/\">Folders</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"tutorials/api-secrets/\">Secrets</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"tutorials/api-resources/\">Resource Management</a></li>\n</ul>\n<p class=\"caption\" role=\"heading\"><span class=\"caption-text\">API Reference</span></p>\n<ul>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"api/python/\">Python API</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/python/resource/\">Resource</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/python/function/\">Function</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/python/cluster/\">Cluster</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/python/image/\">Image</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/python/package/\">Package</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/python/module/\">Module</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/python/folder/\">Folder</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/python/secrets/\">Secrets</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/python/login/\">Login/Logout</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"api/cli/\">Command Line Interface</a></li>\n</ul>\n<p class=\"caption\" role=\"heading\"><span class=\"caption-text\">Other Topics</span></p>\n<ul>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"tutorials/async/\">Asynchronous Programming</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"installation/\">Installation and Setup</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"debugging-logging/\">Debugging and Logging</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"docker-setup/\">Docker: Cluster Setup</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"docker-workflows/\">Docker: Dev and Prod Workflows</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"troubleshooting/\">Manual Setup and Troubleshooting</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"security-and-authentication/\">Security and Authentication</a></li>\n</ul>\n", "current_page_name": "tutorials/api-process", "sidebars": ["about.html", "navigation.html", "relations.html", "searchbox.html", "donate.html"], "customsidebar": null, "alabaster_version": "0.7.16", "alabaster_version_info": [0, 7, 16]}