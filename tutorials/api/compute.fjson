{"parents": [{"link": "../../../api_tutorials/", "title": "API Tutorials"}], "prev": {"link": "../../../api_tutorials/", "title": "API Tutorials"}, "next": {"link": "../data/", "title": "Data: Folders, Tables, &amp; Blobs"}, "title": "Compute: Clusters, Functions &amp; Modules, Packages &amp; Envs", "meta": {}, "body": "<section id=\"compute-clusters-functions-modules-packages-envs\">\n<h1>Compute: Clusters, Functions &amp; Modules, Packages &amp; Envs<a class=\"headerlink\" href=\"#compute-clusters-functions-modules-packages-envs\" title=\"Permalink to this heading\">\u00b6</a></h1>\n<p><a href=\"https://colab.research.google.com/github/run-house/runhouse/blob/stable/docs/notebooks/api/compute.ipynb\">\n<img height=\"20px\" width=\"117px\" src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a></p><p>Runhouse has several abstractions to provide a seamless flow of code and\nexecution across local and remote compute. The abstractions are cloud\nprovider-agnostic, and provide living, reusable services.</p>\n<p>The Cluster, Function, and Module APIs blur the line between program\nexecution and deployment.</p>\n<p>The Env and Package APIs help to provide convenient dependency isolation\nand management.</p>\n<section id=\"install-runhouse\">\n<h2>Install Runhouse<a class=\"headerlink\" href=\"#install-runhouse\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"o\">!</span>pip<span class=\"w\"> </span>install<span class=\"w\"> </span>runhouse\n</pre></div>\n</div>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">runhouse</span> <span class=\"k\">as</span> <span class=\"nn\">rh</span>\n</pre></div>\n</div>\n<p>Optionally, to login to Runhouse to sync any secrets.</p>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"o\">!</span>runhouse<span class=\"w\"> </span>login\n</pre></div>\n</div>\n</section>\n<section id=\"cluster\">\n<h2>Cluster<a class=\"headerlink\" href=\"#cluster\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>A cluster is the most basic form of compute in Runhouse, largely\nrepresenting a group of instances or VMs connected with Ray. They\nlargely fall in two categories: 1. Static clusters, which are accessed\nvia IP addresses and SSH credentials. 2. On-Demand clusters, which are\nautomatically spun up and down for you with your local cloud account.</p>\n<p>Runhouse provides various APIs for interacting with remote clusters,\nsuch as terminating an on-demand cloud cluster or running remote CLI or\nPython commands from your local dev environment.</p>\n<section id=\"initialize-your-cluster\">\n<h3>Initialize your Cluster<a class=\"headerlink\" href=\"#initialize-your-cluster\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<p>Each cluster must be provided with a unique <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code> identifier during\nconstruction. This <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code> parameter is used for saving down or loading\nprevious saved clusters, and also used for various CLI commands for the\ncluster.</p>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Static cluster</span>\n<span class=\"n\">cluster</span> <span class=\"o\">=</span> <span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">cluster</span><span class=\"p\">(</span>  <span class=\"c1\"># using private key</span>\n              <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;cpu-cluster&quot;</span><span class=\"p\">,</span>\n              <span class=\"n\">ips</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;&lt;ip of the cluster&gt;&#39;</span><span class=\"p\">],</span>\n              <span class=\"n\">ssh_creds</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;ssh_user&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;&lt;user&gt;&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ssh_private_key&#39;</span><span class=\"p\">:</span><span class=\"s1\">&#39;&lt;path_to_key&gt;&#39;</span><span class=\"p\">},</span>\n          <span class=\"p\">)</span>\n\n<span class=\"c1\"># On-demand cluster</span>\n<span class=\"n\">cluster</span> <span class=\"o\">=</span> <span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">ondemand_cluster</span><span class=\"p\">(</span>\n              <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;cpu-cluster&quot;</span><span class=\"p\">,</span>\n              <span class=\"n\">instance_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;CPU:8&quot;</span><span class=\"p\">,</span>\n              <span class=\"n\">provider</span><span class=\"o\">=</span><span class=\"s2\">&quot;cheapest&quot;</span><span class=\"p\">,</span>       <span class=\"c1\"># &quot;AWS&quot;, &quot;GCP&quot;, &quot;Azure&quot;, &quot;Lambda&quot;, or &quot;cheapest&quot; (default)</span>\n              <span class=\"n\">autostop_mins</span><span class=\"o\">=</span><span class=\"mi\">60</span><span class=\"p\">,</span>          <span class=\"c1\"># Optional, defaults to default_autostop_mins; -1 suspends autostop</span>\n          <span class=\"p\">)</span>\n<span class=\"c1\"># Launch the cluster, only supported for on-demand clusters</span>\n<span class=\"n\">cluster</span><span class=\"o\">.</span><span class=\"n\">up_if_not</span><span class=\"p\">()</span>\n<span class=\"n\">cluster</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">([</span><span class=\"s2\">&quot;echo started!&quot;</span><span class=\"p\">])</span>\n</pre></div>\n</div>\n</section>\n<section id=\"useful-cluster-apis\">\n<h3>Useful Cluster APIs<a class=\"headerlink\" href=\"#useful-cluster-apis\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<p>To run CLI or Python commands on the cluster:</p>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">cluster</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">([</span><span class=\"s1\">&#39;pip install numpy &amp;&amp; pip freeze | grep numpy&#39;</span><span class=\"p\">])</span>\n</pre></div>\n</div>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Requirement</span> <span class=\"n\">already</span> <span class=\"n\">satisfied</span><span class=\"p\">:</span> <span class=\"n\">numpy</span> <span class=\"ow\">in</span> <span class=\"o\">/</span><span class=\"n\">opt</span><span class=\"o\">/</span><span class=\"n\">conda</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">python3</span><span class=\"mf\">.10</span><span class=\"o\">/</span><span class=\"n\">site</span><span class=\"o\">-</span><span class=\"n\">packages</span> <span class=\"p\">(</span><span class=\"mf\">1.26.3</span><span class=\"p\">)</span>\n<span class=\"n\">numpy</span><span class=\"o\">==</span><span class=\"mf\">1.26.3</span>\n</pre></div>\n</div>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">cluster</span><span class=\"o\">.</span><span class=\"n\">run_python</span><span class=\"p\">([</span><span class=\"s1\">&#39;import numpy&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;print(numpy.__version__)&#39;</span><span class=\"p\">])</span>\n</pre></div>\n</div>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"mf\">1.26.3</span>\n</pre></div>\n</div>\n<p>To ssh into the cluster (which you probably want to do in an interactive\nshell rather than a notebook):</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span># Python\n&gt;&gt;&gt; cluster.ssh()\n\n# CLI\n$ ssh cpu-cluster\n</pre></div>\n</div>\n<p>To open a port, if you want to run an application on the cluster that\nrequires a port to be open, e.g.\u00a0Tensorboard, Gradio:</p>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">cluster</span><span class=\"o\">.</span><span class=\"n\">ssh_tunnel</span><span class=\"p\">(</span><span class=\"n\">local_port</span><span class=\"o\">=</span><span class=\"mi\">7860</span><span class=\"p\">,</span> <span class=\"n\">remote_port</span><span class=\"o\">=</span><span class=\"mi\">7860</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</section>\n</section>\n<section id=\"function\">\n<h2>Function<a class=\"headerlink\" href=\"#function\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>Runhouse\u2019s Function API lets you define functions to be run on remote\nhardware (your cluster above!). Simply pass in a local (or a GitHub)\nfunction, the intended remote hardware, and any dependencies; Runhouse\nwill handle the rest for you.</p>\n<section id=\"basic-functions\">\n<h3>Basic Functions<a class=\"headerlink\" href=\"#basic-functions\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<p>Let\u2019s start with a simple local function <code class=\"docutils literal notranslate\"><span class=\"pre\">getpid</span></code>, which takes in an\noptional parameter <code class=\"docutils literal notranslate\"><span class=\"pre\">a</span></code> and returns the process ID plus <code class=\"docutils literal notranslate\"><span class=\"pre\">a</span></code>.</p>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Local Function</span>\n<span class=\"k\">def</span> <span class=\"nf\">getpid</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">os</span>\n    <span class=\"k\">return</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getpid</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n</pre></div>\n</div>\n<p>To construct a function that runs <code class=\"docutils literal notranslate\"><span class=\"pre\">getpid</span></code> on a remote cluster, we\nwrap it using <code class=\"docutils literal notranslate\"><span class=\"pre\">rh.function</span></code>, and send it to a cluster.</p>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Remote Function</span>\n<span class=\"n\">getpid_remote</span> <span class=\"o\">=</span> <span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">function</span><span class=\"p\">(</span><span class=\"n\">fn</span><span class=\"o\">=</span><span class=\"n\">getpid</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"o\">=</span><span class=\"n\">cluster</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>To run the function, simply call it just as you would a local function,\nand the function automatically runs on your specified hardware!</p>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;local function result: </span><span class=\"si\">{</span><span class=\"n\">getpid</span><span class=\"p\">()</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;remote function result: </span><span class=\"si\">{</span><span class=\"n\">getpid_remote</span><span class=\"p\">()</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">INFO</span> <span class=\"o\">|</span> <span class=\"mi\">2024</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">12</span> <span class=\"mi\">16</span><span class=\"p\">:</span><span class=\"mi\">33</span><span class=\"p\">:</span><span class=\"mf\">21.308681</span> <span class=\"o\">|</span> <span class=\"n\">Calling</span> <span class=\"n\">getpid</span><span class=\"o\">.</span><span class=\"n\">call</span>\n</pre></div>\n</div>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">local</span> <span class=\"n\">function</span> <span class=\"n\">result</span><span class=\"p\">:</span> <span class=\"mi\">68830</span>\n<span class=\"n\">base_env</span> <span class=\"n\">servlet</span><span class=\"p\">:</span> <span class=\"n\">Calling</span> <span class=\"n\">method</span> <span class=\"n\">call</span> <span class=\"n\">on</span> <span class=\"n\">module</span> <span class=\"n\">getpid</span>\n</pre></div>\n</div>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">INFO</span> <span class=\"o\">|</span> <span class=\"mi\">2024</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">12</span> <span class=\"mi\">16</span><span class=\"p\">:</span><span class=\"mi\">33</span><span class=\"p\">:</span><span class=\"mf\">21.668737</span> <span class=\"o\">|</span> <span class=\"n\">Time</span> <span class=\"n\">to</span> <span class=\"n\">call</span> <span class=\"n\">getpid</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">:</span> <span class=\"mf\">0.36</span> <span class=\"n\">seconds</span>\n</pre></div>\n</div>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">remote</span> <span class=\"n\">function</span> <span class=\"n\">result</span><span class=\"p\">:</span> <span class=\"mi\">31069</span>\n</pre></div>\n</div>\n<section id=\"stream-logs\">\n<h4><code class=\"docutils literal notranslate\"><span class=\"pre\">stream_logs</span></code><a class=\"headerlink\" href=\"#stream-logs\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>By default, logs and stdout will stream back to you as the function\nruns. If you\u2019re quite latency sensitive, you may see a slight\nperformance gain if you disable it by passing <code class=\"docutils literal notranslate\"><span class=\"pre\">stream_logs=False</span></code> to\nthe function call:</p>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">getpid_remote</span><span class=\"p\">(</span><span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"mi\">31069</span>\n</pre></div>\n</div>\n<p>Function logs are also automatically output onto a log file on cluster\nit is run on. You can refer to <a class=\"reference external\" href=\"https://www.run.house/docs/debugging_logging\">Runhouse Logging\nDocs</a> for more\ninformation on accessing these logs.</p>\n</section>\n</section>\n</section>\n<section id=\"modules\">\n<h2>Modules<a class=\"headerlink\" href=\"#modules\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>A <code class=\"docutils literal notranslate\"><span class=\"pre\">Function</span></code> is actually a subclass of a more generic Runhouse concept\ncalled a <code class=\"docutils literal notranslate\"><span class=\"pre\">Module</span></code>, which represents the class analogue to a function.\nLike <code class=\"docutils literal notranslate\"><span class=\"pre\">Function</span></code>, you can send a <code class=\"docutils literal notranslate\"><span class=\"pre\">Module</span></code> to a remote cluster and\ninteract with it natively by calling its methods, but it can also\npersist and utilize live state via instance methods. This is a\nsuperpower of Runhouse - often introducing state into a service means\nspinning up, connecting, and securing auxiliary services like Redis,\nCelery, etc. In Runhouse, state is built in, and lives natively\nin-memory in Python so it\u2019s ridiculously fast.</p>\n<section id=\"converting-existing-class-to-runhouse-module\">\n<h3>Converting existing class to Runhouse Module<a class=\"headerlink\" href=\"#converting-existing-class-to-runhouse-module\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<p>If you have an existing non-Runhouse class that you would like to run\nremotely, you can convert it into a <code class=\"docutils literal notranslate\"><span class=\"pre\">Module</span></code> via the <code class=\"docutils literal notranslate\"><span class=\"pre\">module</span></code>\nfactory (not the lowercase m in <code class=\"docutils literal notranslate\"><span class=\"pre\">rh.module</span></code>):</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">package</span> <span class=\"kn\">import</span> <span class=\"n\">Model</span>\n\n<span class=\"n\">RemoteModel</span> <span class=\"o\">=</span> <span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"o\">=</span><span class=\"n\">Model</span><span class=\"p\">,</span> <span class=\"n\">system</span><span class=\"o\">=</span><span class=\"n\">cluster</span><span class=\"p\">)</span>\n<span class=\"n\">remote_model</span> <span class=\"o\">=</span> <span class=\"n\">RemoteModel</span><span class=\"p\">(</span><span class=\"n\">model_id</span><span class=\"o\">=</span><span class=\"s2\">&quot;bert-base-uncased&quot;</span><span class=\"p\">,</span> <span class=\"n\">device</span><span class=\"o\">=</span><span class=\"s2\">&quot;cuda&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">remote_model</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"s2\">&quot;Hello world!&quot;</span><span class=\"p\">)</span>  <span class=\"c1\"># Runs on cluster</span>\n</pre></div>\n</div>\n</section>\n<section id=\"creating-your-own-runhouse-module\">\n<h3>Creating your own Runhouse Module<a class=\"headerlink\" href=\"#creating-your-own-runhouse-module\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<p>You can also construct a new <code class=\"docutils literal notranslate\"><span class=\"pre\">Module</span></code> simply by subclassing\n<code class=\"docutils literal notranslate\"><span class=\"pre\">rh.Module</span></code> (note the uppercase M). Note that because you\u2019ll construct\nthis class locally prior to sending it to a remote cluster, if there is\na computationally heavy operation such as loading a dataset or model\nthat you only want to be done remotely, you probably want to wrap that\noperation in an instance method and call it on the module after you\u2019ve\nsent it to your remote compute. One way of doing so is through lazy\ninitialization, as in the data property of the module below.</p>\n<p>When working in a notebook setting, we define the class in another file,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">pid_module.py</span></code>, because module code is synced to the cluster and\nthere isn\u2019t a robust standard for extracting code from notebooks. In\nnormal Python, you can use any Module as you would a normal Python\nclass.</p>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"o\">%%writefile</span> pid_module.py\n\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">runhouse</span> <span class=\"k\">as</span> <span class=\"nn\">rh</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">PIDModule</span><span class=\"p\">(</span><span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">Module</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">a</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s1\">&#39;_data&#39;</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span> <span class=\"o\">=</span> <span class=\"n\">load_dataset</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">getpid</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getpid</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">a</span>\n</pre></div>\n</div>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Overwriting</span> <span class=\"n\">pid_module</span><span class=\"o\">.</span><span class=\"n\">py</span>\n</pre></div>\n</div>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">pid_module</span> <span class=\"kn\">import</span> <span class=\"n\">PIDModule</span>\n\n<span class=\"n\">remote_module</span> <span class=\"o\">=</span> <span class=\"n\">PIDModule</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"n\">cluster</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">remote_module</span><span class=\"o\">.</span><span class=\"n\">getpid</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">INFO</span> <span class=\"o\">|</span> <span class=\"mi\">2024</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">12</span> <span class=\"mi\">16</span><span class=\"p\">:</span><span class=\"mi\">52</span><span class=\"p\">:</span><span class=\"mf\">41.394668</span> <span class=\"o\">|</span> <span class=\"n\">Calling</span> <span class=\"n\">PIDModule</span><span class=\"o\">.</span><span class=\"n\">getpid</span>\n</pre></div>\n</div>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">base_env</span> <span class=\"n\">servlet</span><span class=\"p\">:</span> <span class=\"n\">Calling</span> <span class=\"n\">method</span> <span class=\"n\">getpid</span> <span class=\"n\">on</span> <span class=\"n\">module</span> <span class=\"n\">PIDModule</span>\n</pre></div>\n</div>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">INFO</span> <span class=\"o\">|</span> <span class=\"mi\">2024</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">12</span> <span class=\"mi\">16</span><span class=\"p\">:</span><span class=\"mi\">52</span><span class=\"p\">:</span><span class=\"mf\">41.633281</span> <span class=\"o\">|</span> <span class=\"n\">Time</span> <span class=\"n\">to</span> <span class=\"n\">call</span> <span class=\"n\">PIDModule</span><span class=\"o\">.</span><span class=\"n\">getpid</span><span class=\"p\">:</span> <span class=\"mf\">0.24</span> <span class=\"n\">seconds</span>\n</pre></div>\n</div>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"mi\">31074</span>\n</pre></div>\n</div>\n</section>\n</section>\n<section id=\"env-packages\">\n<h2>Env + Packages<a class=\"headerlink\" href=\"#env-packages\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>Our sample <code class=\"docutils literal notranslate\"><span class=\"pre\">getpid</span></code> function used only builtin Python dependencies, so\nwe did not need to worry about the function environment.</p>\n<p>For more complex functions relying on external dependencies, Runhouse\nprovides concepts for packages (individual dependencies/installations)\nand environments (group of packages or a conda env).</p>\n<section id=\"package-types\">\n<h3>Package Types<a class=\"headerlink\" href=\"#package-types\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<p>Runhouse supports <code class=\"docutils literal notranslate\"><span class=\"pre\">pip</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">conda</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">reqs</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">git</span></code> packages,\nwhich can be constructed in the following ways.</p>\n<p>Often times, if using Packages in the context of environments (Envs),\nyou don\u2019t need to construct them yourself, but can just pass in the\ncorresponding string, and Runhouse internals will handle the conversion\nand installation for you.</p>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">pip_package</span> <span class=\"o\">=</span> <span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">Package</span><span class=\"o\">.</span><span class=\"n\">from_string</span><span class=\"p\">(</span><span class=\"s2\">&quot;pip:numpy&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">conda_package</span> <span class=\"o\">=</span> <span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">Package</span><span class=\"o\">.</span><span class=\"n\">from_string</span><span class=\"p\">(</span><span class=\"s2\">&quot;conda:torch&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">reqs_package</span> <span class=\"o\">=</span> <span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">Package</span><span class=\"o\">.</span><span class=\"n\">from_string</span><span class=\"p\">(</span><span class=\"s2\">&quot;reqs:./&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">git_package</span> <span class=\"o\">=</span> <span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">GitPackage</span><span class=\"p\">(</span><span class=\"n\">git_url</span><span class=\"o\">=</span><span class=\"s1\">&#39;https://github.com/huggingface/diffusers.git&#39;</span><span class=\"p\">,</span>\n                            <span class=\"n\">install_method</span><span class=\"o\">=</span><span class=\"s1\">&#39;pip&#39;</span><span class=\"p\">,</span>\n                            <span class=\"n\">revision</span><span class=\"o\">=</span><span class=\"s1\">&#39;v0.11.1&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>You can also send packages between local, remote, and file storage.</p>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">local_package</span> <span class=\"o\">=</span> <span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">Package</span><span class=\"o\">.</span><span class=\"n\">from_string</span><span class=\"p\">(</span><span class=\"s2\">&quot;./&quot;</span><span class=\"p\">)</span>  <span class=\"c1\"># ./ defaults to the current git root, but you can also pass an abs path</span>\n\n<span class=\"c1\"># package_on_s3 = local_package.to(system=&quot;s3&quot;, path=&quot;/s3/path/to/folder&quot;)</span>\n<span class=\"n\">package_on_cluster</span> <span class=\"o\">=</span> <span class=\"n\">local_package</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"o\">=</span><span class=\"n\">cluster</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</section>\n<section id=\"envs\">\n<h3>Envs<a class=\"headerlink\" href=\"#envs\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<p>Envs, or environments, keep track of your package installs and\ncorresponding versions. This allows for reproducible dev environments,\nand convenient dependency isolation and management.</p>\n<section id=\"base-env\">\n<h4>Base Env<a class=\"headerlink\" href=\"#base-env\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>The basic Env resource just consists of a list of Packages, or strings\nthat represent the packages. You can additionally add any environment\nvariables by providing a Dict or <code class=\"docutils literal notranslate\"><span class=\"pre\">.env</span></code> local file path, and also set\nthe working directory to be synced over (defaults to base GitHub repo).</p>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">env</span><span class=\"p\">(</span><span class=\"n\">reqs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;numpy&quot;</span><span class=\"p\">,</span> <span class=\"n\">reqs_package</span><span class=\"p\">,</span> <span class=\"n\">git_package</span><span class=\"p\">],</span> <span class=\"n\">env_vars</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;USER&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;*****&quot;</span><span class=\"p\">})</span>\n</pre></div>\n</div>\n<p>When you send an environment object to a cluster, the environment is\nautomatically set up (packages are installed) on the cluster.</p>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">env_on_cluster</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"o\">=</span><span class=\"n\">cluster</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</section>\n<section id=\"conda-env\">\n<h4>Conda Env<a class=\"headerlink\" href=\"#conda-env\" title=\"Permalink to this heading\">\u00b6</a></h4>\n<p>The CondaEnv resource represents a Conda environment that can be used to\nset up reproducible Conda envs across clusters.</p>\n<p>There are several ways to construct a Runhouse CondaEnv object using\n<code class=\"docutils literal notranslate\"><span class=\"pre\">rh.conda_env</span></code>, by passing in any of the following into the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">conda_env</span></code> parameter:</p>\n<ol class=\"arabic simple\">\n<li><p>A yaml file corresponding to a conda environment config</p></li>\n</ol>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">conda_env</span> <span class=\"o\">=</span> <span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">conda_env</span><span class=\"p\">(</span><span class=\"n\">conda_env</span><span class=\"o\">=</span><span class=\"s2\">&quot;conda_env.yml&quot;</span><span class=\"p\">,</span> <span class=\"n\">reqs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;numpy&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;diffusers&quot;</span><span class=\"p\">],</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;yaml_env&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<ol class=\"arabic simple\" start=\"2\">\n<li><p>A dict corresponding to a conda environment config</p></li>\n</ol>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">conda_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;conda_env&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;channels&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;conda-forge&quot;</span><span class=\"p\">],</span> <span class=\"s2\">&quot;dependencies&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;python=3.10.0&quot;</span><span class=\"p\">]}</span>\n<span class=\"n\">conda_env</span> <span class=\"o\">=</span> <span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">env</span><span class=\"p\">(</span><span class=\"n\">conda_env</span><span class=\"o\">=</span><span class=\"n\">conda_dict</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;dict_env&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<ol class=\"arabic simple\" start=\"3\">\n<li><p>Name of an existing conda env on your local machine</p></li>\n</ol>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">conda_env</span> <span class=\"o\">=</span> <span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">conda_env</span><span class=\"p\">(</span><span class=\"n\">conda_env</span><span class=\"o\">=</span><span class=\"s2\">&quot;local_conda_env&quot;</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;from_local_env&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<ol class=\"arabic simple\" start=\"4\">\n<li><p>Leaving the argument empty. In this case, we\u2019ll construct a new Conda\nenvironment for you, using the list you pass into <code class=\"docutils literal notranslate\"><span class=\"pre\">reqs</span></code>.</p></li>\n</ol>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">conda_env</span> <span class=\"o\">=</span> <span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">conda_env</span><span class=\"p\">(</span><span class=\"n\">reqs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;numpy&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;diffusers&quot;</span><span class=\"p\">],</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;new_env&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Beyond the conda config, you can also add any additional requirements\nyou\u2019d like to install in the environment by adding\n<code class=\"docutils literal notranslate\"><span class=\"pre\">reqs</span> <span class=\"pre\">=</span> <span class=\"pre\">List[packages]</span></code>.</p>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">conda_env</span> <span class=\"o\">=</span> <span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">conda_env</span><span class=\"p\">(</span><span class=\"n\">reqs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;numpy&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;diffusers&quot;</span><span class=\"p\">],</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;new_env&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>As with the base env, we can set up a conda env on the cluster with\n(note, this command might appear to hang, but it may be updating conda\nin the backgroud for a few minutes the first time you run it):</p>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">conda_env_on_cluster</span> <span class=\"o\">=</span> <span class=\"n\">conda_env</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"o\">=</span><span class=\"n\">cluster</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Previously in the cluster section, we mentioned several cluster APIs\nsuch as running CLI or Python commands. These all run on the base\nenvironment in the examples above, but now that we\u2019ve defined a Conda\nenv, let\u2019s demonstrate how we can accomplish this inside a Conda env on\nthe cluster:</p>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># run Python command within the conda env</span>\n<span class=\"n\">cluster</span><span class=\"o\">.</span><span class=\"n\">run_python</span><span class=\"p\">([</span><span class=\"s1\">&#39;import numpy&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;print(numpy.__version__)&#39;</span><span class=\"p\">],</span> <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"n\">conda_env</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"ne\">Warning</span><span class=\"p\">:</span> <span class=\"n\">Permanently</span> <span class=\"n\">added</span> <span class=\"s1\">&#39;3.83.88.203&#39;</span> <span class=\"p\">(</span><span class=\"n\">ED25519</span><span class=\"p\">)</span> <span class=\"n\">to</span> <span class=\"n\">the</span> <span class=\"nb\">list</span> <span class=\"n\">of</span> <span class=\"n\">known</span> <span class=\"n\">hosts</span><span class=\"o\">.</span>\n</pre></div>\n</div>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"mf\">1.26.3</span>\n</pre></div>\n</div>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># install additional package on given env</span>\n<span class=\"n\">cluster</span><span class=\"o\">.</span><span class=\"n\">install_packages</span><span class=\"p\">([</span><span class=\"s2\">&quot;pandas&quot;</span><span class=\"p\">],</span> <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"n\">conda_env</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</section>\n</section>\n</section>\n<section id=\"putting-it-all-together-cluster-function-module-env\">\n<h2>Putting it all together \u2013 Cluster, Function/Module, Env<a class=\"headerlink\" href=\"#putting-it-all-together-cluster-function-module-env\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>Now that we understand how clusters, functions, and\npackages/environments work, we can go on to implement more complex\nfunctions that require external dependencies, and seamlessly run them on\na remote cluster.</p>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">add_lists</span><span class=\"p\">(</span><span class=\"n\">list_a</span><span class=\"p\">,</span> <span class=\"n\">list_b</span><span class=\"p\">):</span>\n  <span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n  <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">list_a</span><span class=\"p\">),</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">list_b</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>Note that in the function defined, we include the import statement\n<code class=\"docutils literal notranslate\"><span class=\"pre\">import</span> <span class=\"pre\">numpy</span> <span class=\"pre\">as</span> <span class=\"pre\">np</span></code> within the function. The import needs to be\ninside the function definition in notebook or interactive environments,\nbut can be outside the function if being used in a Python script.</p>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">env</span><span class=\"p\">(</span><span class=\"n\">reqs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;numpy&quot;</span><span class=\"p\">])</span>\n<span class=\"n\">add_lists_remote</span> <span class=\"o\">=</span> <span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">function</span><span class=\"p\">(</span><span class=\"n\">fn</span><span class=\"o\">=</span><span class=\"n\">add_lists</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"o\">=</span><span class=\"n\">cluster</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"n\">env</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">list_a</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">list_b</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">add_lists_remote</span><span class=\"p\">(</span><span class=\"n\">list_a</span><span class=\"p\">,</span> <span class=\"n\">list_b</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">INFO</span> <span class=\"o\">|</span> <span class=\"mi\">2024</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">12</span> <span class=\"mi\">16</span><span class=\"p\">:</span><span class=\"mi\">52</span><span class=\"p\">:</span><span class=\"mf\">00.149572</span> <span class=\"o\">|</span> <span class=\"n\">Calling</span> <span class=\"n\">add_lists</span><span class=\"o\">.</span><span class=\"n\">call</span>\n</pre></div>\n</div>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">base_env</span> <span class=\"n\">servlet</span><span class=\"p\">:</span> <span class=\"n\">Calling</span> <span class=\"n\">method</span> <span class=\"n\">call</span> <span class=\"n\">on</span> <span class=\"n\">module</span> <span class=\"n\">add_lists</span>\n</pre></div>\n</div>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">INFO</span> <span class=\"o\">|</span> <span class=\"mi\">2024</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">12</span> <span class=\"mi\">16</span><span class=\"p\">:</span><span class=\"mi\">52</span><span class=\"p\">:</span><span class=\"mf\">00.433690</span> <span class=\"o\">|</span> <span class=\"n\">Time</span> <span class=\"n\">to</span> <span class=\"n\">call</span> <span class=\"n\">add_lists</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">:</span> <span class=\"mf\">0.28</span> <span class=\"n\">seconds</span>\n</pre></div>\n</div>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">])</span>\n</pre></div>\n</div>\n<p>Now that you understand the basics, feel free to play around with more\ncomplicated scenarios! You can also check out our additional API and\nexample usage tutorials on our <a class=\"reference external\" href=\"https://www.run.house/docs\">docs\nsite</a>.</p>\n</section>\n<section id=\"cluster-termination\">\n<h2>Cluster Termination<a class=\"headerlink\" href=\"#cluster-termination\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>To terminate the cluster, you can call <code class=\"docutils literal notranslate\"><span class=\"pre\">sky</span> <span class=\"pre\">down</span> <span class=\"pre\">cluster-name</span></code> in CLI\nor <code class=\"docutils literal notranslate\"><span class=\"pre\">cluster_obj.teardown()</span></code> in Python.</p>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"o\">!</span>sky<span class=\"w\"> </span>down<span class=\"w\"> </span>cpu-cluster\n<span class=\"c1\"># or</span>\n<span class=\"n\">cluster</span><span class=\"o\">.</span><span class=\"n\">teardown</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</section>\n</section>\n\n    <script type=\"text/x-thebe-config\">\n    {\n        requestKernel: true,\n        binderOptions: {\n            repo: \"binder-examples/jupyter-stacks-datascience\",\n            ref: \"master\",\n        },\n        codeMirrorConfig: {\n            theme: \"abcdef\",\n            mode: \"python\"\n        },\n        kernelOptions: {\n            kernelName: \"python3\",\n            path: \"./tutorials/api\"\n        },\n        predefinedOutput: true\n    }\n    </script>\n    <script>kernelName = 'python3'</script>", "metatags": "<meta name=\"generator\" content=\"Docutils 0.18.1: http://docutils.sourceforge.net/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["tutorials/api/data", "Data: Folders, Tables, &amp; Blobs", "N", "next"], ["api_tutorials", "API Tutorials", "P", "previous"]], "sourcename": "tutorials/api/compute.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Compute: Clusters, Functions &amp; Modules, Packages &amp; Envs</a><ul>\n<li><a class=\"reference internal\" href=\"#install-runhouse\">Install Runhouse</a></li>\n<li><a class=\"reference internal\" href=\"#cluster\">Cluster</a><ul>\n<li><a class=\"reference internal\" href=\"#initialize-your-cluster\">Initialize your Cluster</a></li>\n<li><a class=\"reference internal\" href=\"#useful-cluster-apis\">Useful Cluster APIs</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#function\">Function</a><ul>\n<li><a class=\"reference internal\" href=\"#basic-functions\">Basic Functions</a><ul>\n<li><a class=\"reference internal\" href=\"#stream-logs\"><code class=\"docutils literal notranslate\"><span class=\"pre\">stream_logs</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#modules\">Modules</a><ul>\n<li><a class=\"reference internal\" href=\"#converting-existing-class-to-runhouse-module\">Converting existing class to Runhouse Module</a></li>\n<li><a class=\"reference internal\" href=\"#creating-your-own-runhouse-module\">Creating your own Runhouse Module</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#env-packages\">Env + Packages</a><ul>\n<li><a class=\"reference internal\" href=\"#package-types\">Package Types</a></li>\n<li><a class=\"reference internal\" href=\"#envs\">Envs</a><ul>\n<li><a class=\"reference internal\" href=\"#base-env\">Base Env</a></li>\n<li><a class=\"reference internal\" href=\"#conda-env\">Conda Env</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#putting-it-all-together-cluster-function-module-env\">Putting it all together \u2013 Cluster, Function/Module, Env</a></li>\n<li><a class=\"reference internal\" href=\"#cluster-termination\">Cluster Termination</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "globaltoc": "<p class=\"caption\" role=\"heading\"><span class=\"caption-text\">Getting Started</span></p>\n<ul>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"tutorials/api/quick_start/\">Getting Started</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"architecture/\">Architecture Overview</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"api_tutorials/\">API Tutorials</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"tutorials/api/compute/\">Compute: Clusters, Functions &amp; Modules, Packages &amp; Envs</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"tutorials/api/data/\">Data: Folders, Tables, &amp; Blobs</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"tutorials/api/secrets/\">Secrets Management</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"tutorials/api/resources/\">Resource Management</a></li>\n</ul>\n</li>\n</ul>\n<p class=\"caption\" role=\"heading\"><span class=\"caption-text\">API Reference</span></p>\n<ul>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"api/python/\">Python API</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/python/resource/\">Resource</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/python/function/\">Function</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/python/cluster/\">Cluster</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/python/env/\">Env</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/python/package/\">Package</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/python/module/\">Module</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/python/mapper/\">Mapper</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/python/folder/\">Folder</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/python/table/\">Table</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/python/blob/\">Blob</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/python/file/\">File</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/python/secrets/\">Secrets</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/python/login/\">Login/Logout</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"api/cli/\">Command Line Interface</a></li>\n</ul>\n<p class=\"caption\" role=\"heading\"><span class=\"caption-text\">Usage Examples</span></p>\n<ul>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"tutorials/examples/inference/\">Inference: Stable Diffusion and FLAN-T5</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"tutorials/examples/training/\">Training: Transformers</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"tutorials/examples/distributed/\">Distributed: HF Accelerate</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"https://github.com/run-house/funhouse/tree/main/bert_pipeline\">Pipelining: BERT</a></li>\n</ul>\n<p class=\"caption\" role=\"heading\"><span class=\"caption-text\">Additional Resources</span></p>\n<ul>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"debugging_logging/\">Debugging and Logging</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"troubleshooting/\">Manual Setup and Troubleshooting</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"security_and_authentication/\">Security and Authentication</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"https://github.com/run-house/runhouse\">Source Code</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"https://api.run.house/docs\">REST API Guide</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"https://www.run.house/dashboard\">Runhouse Den Dashboard</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"https://github.com/run-house/funhouse\">Funhouse</a></li>\n</ul>\n", "current_page_name": "tutorials/api/compute", "sidebars": ["about.html", "navigation.html", "relations.html", "searchbox.html", "donate.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12"}