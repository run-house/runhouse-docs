{"parents": [], "prev": {"link": "../docker-setup/", "title": "Docker: Cluster Setup"}, "next": {"link": "../security-and-authentication/", "title": "Security and Authentication"}, "title": "Docker: Dev and Prod Workflows with Runhouse", "meta": {}, "body": "<section id=\"docker-dev-and-prod-workflows-with-runhouse\">\n<h1>Docker: Dev and Prod Workflows with Runhouse<a class=\"headerlink\" href=\"#docker-dev-and-prod-workflows-with-runhouse\" title=\"Permalink to this heading\">\u00b6</a></h1>\n<p><a href=\"https://colab.research.google.com/github/run-house/notebooks/blob/stable/docs/docker-workflows.ipynb\">\n<img height=\"20px\" width=\"117px\" src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a></p><p>This guide demonstrates how to use the same Docker image with your\nRunhouse cluster, for both:</p>\n<ul class=\"simple\">\n<li><p><strong>Production</strong>: running functions and code that is pre-installed on\nthe Docker image</p></li>\n<li><p><strong>Local development</strong>: making local edits to your repo, and\npropagating over those local changes to the cluster for\nexperimentation</p></li>\n</ul>\n<p>Afterwards, we provide a script that shows how to easily set up and\ntoggle between these two settings, using the same cluster setup.</p>\n<p>In this example, we are going to be using the <a class=\"reference external\" href=\"https://github.com/aws/deep-learning-containers/blob/master/available_images.md#large-model-inference-containers\">DJLServing 0.27.0 with\nDeepSpeed\n0.12.6</a>\nContainer, which includes HuggingFace Tranformers (4.39.0), Diffusers\n(0.16.0), and Accelerate (0.28.0). We will use the container version of\nthese packages to demonstrate the pre-packaged production workflow, as\nwell as local editable versions to showcase the local experimentation\nuse cases.</p>\n<section id=\"docker-cluster-setup\">\n<h2>Docker Cluster Setup<a class=\"headerlink\" href=\"#docker-cluster-setup\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>Because we are pulling the Docker image from AWS ECR, we need to provide\nthe corresponding credentials in order to properly pull and setup the\nimage on the cluster. This can be done through a Runhouse Docker secret,\nor by setting environment variables. Please refer to &lt;Guide: Docker\nCluster Setup&gt; for more details.</p>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span>import subprocess\nimport runhouse as rh\n\ndocker_ecr_creds = {\n    &quot;username&quot;: &quot;AWS&quot;,\n    &quot;password&quot;: subprocess.run(&quot;aws ecr get-login-password --region us-west-1&quot;, shell=True, capture_output=True).stdout.strip().decode(&quot;utf-8&quot;),\n    &quot;server&quot;: &quot;763104351884.dkr.ecr.us-west-1.amazonaws.com&quot;,\n}\ndocker_secret = rh.provider_secret(&quot;docker&quot;, values=docker_ecr_creds)\n</pre></div>\n</div>\n<p>Next, construct a Runhouse image, passing in the docker image ID and\nsecret. Feed this image into the OnDemand cluster factory, and up the\ncluster.</p>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span>base_image = rh.Image(&quot;docker_image&quot;).from_docker(\n    &quot;djl-inference:0.27.0-deepspeed0.12.6-cu121&quot;, docker_secret=docker_secret\n)\n\ncluster = rh.ondemand_cluster(\n    name=&quot;diffusers_docker&quot;,\n    image=base_image,\n    instance_type=&quot;g5.8xlarge&quot;,\n    provider=&quot;aws&quot;,\n)\ncluster.up_if_not()\n</pre></div>\n</div>\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #008000; text-decoration-color: #008000\">\u2834</span> <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">Preparing SkyPilot runtime (3/3 - runtime)</span>  \u001b[2mView logs at: ~/sky_logs/sky-2024-12-23-13-56-48-619803/provision.log\u001b[0m\n</pre><div class=\"code-output highlight-default notranslate\"><div class=\"highlight\"><pre><span></span>\u001b[0m\u001b[32m\u2713 Cluster launched: diffusers_docker.\u001b[0m  \u001b[2mView logs at: ~/sky_logs/sky-2024-12-23-13-56-48-619803/provision.log\u001b[0m\n</pre></div>\n</div>\n<div class=\"code-output highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">INFO</span> <span class=\"o\">|</span> <span class=\"mi\">2024</span><span class=\"o\">-</span><span class=\"mi\">12</span><span class=\"o\">-</span><span class=\"mi\">23</span> <span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">03</span><span class=\"p\">:</span><span class=\"mi\">39</span> <span class=\"o\">|</span> <span class=\"n\">runhouse</span><span class=\"o\">.</span><span class=\"n\">resources</span><span class=\"o\">.</span><span class=\"n\">hardware</span><span class=\"o\">.</span><span class=\"n\">launcher_utils</span><span class=\"p\">:</span><span class=\"mi\">391</span> <span class=\"o\">|</span> <span class=\"n\">Starting</span> <span class=\"n\">Runhouse</span> <span class=\"n\">server</span> <span class=\"n\">on</span> <span class=\"n\">cluster</span>\n<span class=\"n\">INFO</span> <span class=\"o\">|</span> <span class=\"mi\">2024</span><span class=\"o\">-</span><span class=\"mi\">12</span><span class=\"o\">-</span><span class=\"mi\">23</span> <span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">03</span><span class=\"p\">:</span><span class=\"mi\">39</span> <span class=\"o\">|</span> <span class=\"n\">runhouse</span><span class=\"o\">.</span><span class=\"n\">resources</span><span class=\"o\">.</span><span class=\"n\">hardware</span><span class=\"o\">.</span><span class=\"n\">cluster</span><span class=\"p\">:</span><span class=\"mi\">1247</span> <span class=\"o\">|</span> <span class=\"n\">Restarting</span> <span class=\"n\">Runhouse</span> <span class=\"n\">API</span> <span class=\"n\">server</span> <span class=\"n\">on</span> <span class=\"n\">diffusers_docker</span><span class=\"o\">.</span>\n\n<span class=\"n\">INFO</span><span class=\"p\">:</span>     <span class=\"n\">Started</span> <span class=\"n\">server</span> <span class=\"n\">process</span> <span class=\"p\">[</span><span class=\"mi\">2929</span><span class=\"p\">]</span>\n<span class=\"n\">INFO</span><span class=\"p\">:</span>     <span class=\"n\">Waiting</span> <span class=\"k\">for</span> <span class=\"n\">application</span> <span class=\"n\">startup</span><span class=\"o\">.</span>\n<span class=\"n\">INFO</span><span class=\"p\">:</span>     <span class=\"n\">Application</span> <span class=\"n\">startup</span> <span class=\"n\">complete</span><span class=\"o\">.</span>\n<span class=\"n\">INFO</span><span class=\"p\">:</span>     <span class=\"n\">Uvicorn</span> <span class=\"n\">running</span> <span class=\"n\">on</span> <span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"mf\">0.0.0.0</span><span class=\"p\">:</span><span class=\"mi\">32300</span> <span class=\"p\">(</span><span class=\"n\">Press</span> <span class=\"n\">CTRL</span><span class=\"o\">+</span><span class=\"n\">C</span> <span class=\"n\">to</span> <span class=\"n\">quit</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"code-output highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"o\">&lt;</span><span class=\"n\">runhouse</span><span class=\"o\">.</span><span class=\"n\">resources</span><span class=\"o\">.</span><span class=\"n\">hardware</span><span class=\"o\">.</span><span class=\"n\">on_demand_cluster</span><span class=\"o\">.</span><span class=\"n\">OnDemandCluster</span> <span class=\"n\">at</span> <span class=\"mh\">0x127ea7730</span><span class=\"o\">&gt;</span>\n</pre></div>\n</div>\n</section>\n<section id=\"sample-function\">\n<h2>Sample Function<a class=\"headerlink\" href=\"#sample-function\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>The function we\u2019ll be using in our demo is <code class=\"docutils literal notranslate\"><span class=\"pre\">is_transformers_available</span></code>\nfrom <code class=\"docutils literal notranslate\"><span class=\"pre\">diffusers.utils</span></code>. We\u2019ll first show how to use the base version\nof this function, which was installed on the box through the cluster\nsetup (e.g.\u00a0a production setting). Then, we\u2019ll show how to propogate up\nlocal changes and run them on the cluster, if your local version differs\nfrom the one in the Docker container (e.g.\u00a0different package version, or\nlocally edited).</p>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span>from diffusers.utils import is_transformers_available\n</pre></div>\n</div>\n</section>\n<section id=\"production-workflow\">\n<h2>Production Workflow<a class=\"headerlink\" href=\"#production-workflow\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>The core of the production workflow is that the Docker image already\ncontains the exact packages and versions we want, probably published\ninto the registry in CI/CD. We don\u2019t want to perform any installs or\ncode changes within the image throughout execution so we can preserve\nexact reproducibility.</p>\n<p><strong>NOTE</strong>: By default, Ray and Runhouse are installed on the ondemand\ncluster during setup time (generally attempting to match the versions\nyou have locally), unless we detect that they\u2019re already present. To\nmake sure that no installs occur in production, please make sure that\nyou have Runhouse and Ray installed in your docker image.</p>\n<section id=\"defining-the-function\">\n<h3>Defining the Function<a class=\"headerlink\" href=\"#defining-the-function\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<p>The function is the <code class=\"docutils literal notranslate\"><span class=\"pre\">is_transformers_available</span></code> function imported\nabove. When creating the function to run remotely on the production\nRunhouse env, we pass in the flag <code class=\"docutils literal notranslate\"><span class=\"pre\">sync_local=False</span></code> to indicate that\nwe want to use the function on the cluster, without re-syncing over\nanything.</p>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span>prod_fn = rh.function(is_transformers_available).to(cluster, sync_local=False)\n</pre></div>\n</div>\n<div class=\"code-output highlight-default notranslate\"><div class=\"highlight\"><pre><span></span>INFO | 2024-12-23 14:04:57 | runhouse.resources.hardware.ssh_tunnel:91 | Running forwarding command: ssh -T -L 32300:localhost:32300 -i ~/.ssh/sky-key -o Port=10022 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR -o IdentitiesOnly=yes -o ExitOnForwardFailure=yes -o ServerAliveInterval=5 -o ServerAliveCountMax=3 -o ConnectTimeout=30s -o ForwardAgent=yes -o ProxyCommand=&#39;ssh -i ~/.ssh/sky-key -o Port=22 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR -o IdentitiesOnly=yes -o ExitOnForwardFailure=yes -o ServerAliveInterval=5 -o ServerAliveCountMax=3 -o ConnectTimeout=30s -o ForwardAgent=yes -W %h:%p ubuntu@52.24.239.151&#39; root@localhost\nINFO | 2024-12-23 14:05:00 | runhouse.resources.module:511 | Sending module is_transformers_available of type &lt;class &#39;runhouse.resources.functions.function.Function&#39;&gt; to diffusers_docker\n</pre></div>\n</div>\n</section>\n<section id=\"calling-the-function\">\n<h3>Calling the Function<a class=\"headerlink\" href=\"#calling-the-function\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<p>Now, simply call the function, and it will detect the corresponding\nfunction on the cluster to run. In this case, it returns whether or not\ntransformers is available on the cluster, which it is, as it was part of\nthe Docker image.</p>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span>prod_fn()\n</pre></div>\n</div>\n<div class=\"code-output highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">INFO</span> <span class=\"o\">|</span> <span class=\"mi\">2024</span><span class=\"o\">-</span><span class=\"mi\">12</span><span class=\"o\">-</span><span class=\"mi\">23</span> <span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">05</span><span class=\"p\">:</span><span class=\"mi\">01</span> <span class=\"o\">|</span> <span class=\"n\">runhouse</span><span class=\"o\">.</span><span class=\"n\">servers</span><span class=\"o\">.</span><span class=\"n\">http</span><span class=\"o\">.</span><span class=\"n\">http_client</span><span class=\"p\">:</span><span class=\"mi\">439</span> <span class=\"o\">|</span> <span class=\"n\">Calling</span> <span class=\"n\">is_transformers_available</span><span class=\"o\">.</span><span class=\"n\">call</span>\n<span class=\"n\">INFO</span> <span class=\"o\">|</span> <span class=\"mi\">2024</span><span class=\"o\">-</span><span class=\"mi\">12</span><span class=\"o\">-</span><span class=\"mi\">23</span> <span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">05</span><span class=\"p\">:</span><span class=\"mi\">06</span> <span class=\"o\">|</span> <span class=\"n\">runhouse</span><span class=\"o\">.</span><span class=\"n\">servers</span><span class=\"o\">.</span><span class=\"n\">http</span><span class=\"o\">.</span><span class=\"n\">http_client</span><span class=\"p\">:</span><span class=\"mi\">504</span> <span class=\"o\">|</span> <span class=\"n\">Time</span> <span class=\"n\">to</span> <span class=\"n\">call</span> <span class=\"n\">is_transformers_available</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">:</span> <span class=\"mf\">4.86</span> <span class=\"n\">seconds</span>\n</pre></div>\n</div>\n<div class=\"code-output highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kc\">True</span>\n</pre></div>\n</div>\n<p>For even more specifics on any setup for running your function, you can\nalso directly use cluster functionality (e.g.\u00a0setting additional env\nvars, installing packages/running commands), or construct isolated\nprocesses (see Process API guide) with specific compute to run the\nfunction on.</p>\n</section>\n</section>\n<section id=\"local-development\">\n<h2>Local Development<a class=\"headerlink\" href=\"#local-development\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>Now for the local development and experimentation case. Let\u2019s say we\nhave the HuggingFace <code class=\"docutils literal notranslate\"><span class=\"pre\">diffusers</span></code> repository cloned and installed as a\nlocal editable package, and are making changes to it that we want\nreflected when we run it on the cluster. We also have a different\nversion of the transformers package installed.</p>\n<section id=\"local-changes\">\n<h3>Local Changes<a class=\"headerlink\" href=\"#local-changes\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<p>Let\u2019s continue using the <code class=\"docutils literal notranslate\"><span class=\"pre\">is_transformers_available</span></code> function, except\nthis time we\u2019ll change the function to return the version number of the\ntransformers package if it exists, instead of <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>. This shows that\nwe have <code class=\"docutils literal notranslate\"><span class=\"pre\">transformers==4.44.2</span></code> installed locally.</p>\n<p>In my local diffusers/src/diffusers/utils/import_utils.py file:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">is_transformers_available</span><span class=\"p\">():</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">transformers</span>\n        <span class=\"k\">return</span> <span class=\"n\">transformers</span><span class=\"o\">.</span><span class=\"n\">__version__</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ImportError</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n</pre></div>\n</div>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span>from diffusers.utils import is_transformers_available\n\nis_transformers_available()\n</pre></div>\n</div>\n<div class=\"code-output highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"s1\">&#39;4.44.2&#39;</span>\n</pre></div>\n</div>\n</section>\n<section id=\"installing-local-version\">\n<h3>Installing local version<a class=\"headerlink\" href=\"#installing-local-version\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<p>When Runhoue installs packages on the remote cluster, it will check if\nyou have a version of the package locally, as well as whether a version\nof the package already exists on this cluster. If it already exists\nremotely, by default the remote package will not be overriden, but you\ncan force the local version by passing in the paramteter\n<code class=\"docutils literal notranslate\"><span class=\"pre\">force_sync_local==True</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">cluster.install_packages</span></code>.</p>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span>cluster.install_packages([&quot;transformers&quot;, &quot;diffusers&quot;], force_sync_local=True)\n</pre></div>\n</div>\n</section>\n<section id=\"id1\">\n<h3>Defining the Function<a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<p>Now construct a Runhouse function normally and send it to the cluster.\nHere, we can leave out the <code class=\"docutils literal notranslate\"><span class=\"pre\">sync_local</span></code> flag, which defaults to True -\nthe local function will be synced onto the cluster.</p>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span>dev_fn = rh.function(is_transformers_available).to(cluster)\n</pre></div>\n</div>\n<div class=\"code-output highlight-default notranslate\"><div class=\"highlight\"><pre><span></span>INFO | 2024-12-23 14:11:05 | runhouse.resources.module:511 | Sending module is_transformers_available of type &lt;class &#39;runhouse.resources.functions.function.Function&#39;&gt; to diffusers_docker\n</pre></div>\n</div>\n</section>\n<section id=\"id2\">\n<h3>Calling the Function<a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<p>Now, when we call the function, it returns the version of the\ntransformers library installed, rather than a True/False. It also\ncorrectly returns the same version as the locally installed version,\nshowing that both local diffusers and transformers packages were\nproperly synced and installed on the cluster.</p>\n<div class=\"highlight-ipython3 notranslate\"><div class=\"highlight\"><pre><span></span>dev_fn()\n</pre></div>\n</div>\n<div class=\"code-output highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">INFO</span> <span class=\"o\">|</span> <span class=\"mi\">2024</span><span class=\"o\">-</span><span class=\"mi\">12</span><span class=\"o\">-</span><span class=\"mi\">23</span> <span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">11</span><span class=\"p\">:</span><span class=\"mi\">19</span> <span class=\"o\">|</span> <span class=\"n\">runhouse</span><span class=\"o\">.</span><span class=\"n\">servers</span><span class=\"o\">.</span><span class=\"n\">http</span><span class=\"o\">.</span><span class=\"n\">http_client</span><span class=\"p\">:</span><span class=\"mi\">439</span> <span class=\"o\">|</span> <span class=\"n\">Calling</span> <span class=\"n\">is_transformers_available</span><span class=\"o\">.</span><span class=\"n\">call</span>\n<span class=\"n\">INFO</span> <span class=\"o\">|</span> <span class=\"mi\">2024</span><span class=\"o\">-</span><span class=\"mi\">12</span><span class=\"o\">-</span><span class=\"mi\">23</span> <span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">11</span><span class=\"p\">:</span><span class=\"mi\">21</span> <span class=\"o\">|</span> <span class=\"n\">runhouse</span><span class=\"o\">.</span><span class=\"n\">servers</span><span class=\"o\">.</span><span class=\"n\">http</span><span class=\"o\">.</span><span class=\"n\">http_client</span><span class=\"p\">:</span><span class=\"mi\">504</span> <span class=\"o\">|</span> <span class=\"n\">Time</span> <span class=\"n\">to</span> <span class=\"n\">call</span> <span class=\"n\">is_transformers_available</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">:</span> <span class=\"mf\">2.48</span> <span class=\"n\">seconds</span>\n</pre></div>\n</div>\n<div class=\"code-output highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"s1\">&#39;4.44.2&#39;</span>\n</pre></div>\n</div>\n</section>\n</section>\n<section id=\"summary-setting-up-your-code\">\n<h2>Summary - Setting Up Your Code<a class=\"headerlink\" href=\"#summary-setting-up-your-code\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>Here, we implement the above as a script to demonstrate the difference\nbetween dev and prod. The script can easily be adapted and shared\nbetween teammates developing and working with the same repos, with a\nflag or variable flip to differentiate between experimentation and\nproduction branches.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">diffusers.utils</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">is_transformers_available</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;__main__&quot;</span><span class=\"p\">:</span>\n    <span class=\"n\">cluster</span> <span class=\"o\">=</span> <span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">ondemand_cluster</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n    <span class=\"n\">cluster</span><span class=\"o\">.</span><span class=\"n\">up_if_not</span><span class=\"p\">()</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">prod</span><span class=\"p\">:</span>\n        <span class=\"n\">remote_fn</span> <span class=\"o\">=</span> <span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">function</span><span class=\"p\">(</span><span class=\"n\">is_transformers_available</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"n\">cluster</span><span class=\"p\">,</span> <span class=\"n\">sync_local</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">cluster</span><span class=\"o\">.</span><span class=\"n\">install_packages</span><span class=\"p\">([</span><span class=\"s2\">&quot;transformers&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;diffusers&quot;</span><span class=\"p\">],</span> <span class=\"p\">)</span>\n        <span class=\"n\">remote_fn</span> <span class=\"o\">=</span> <span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">function</span><span class=\"p\">(</span><span class=\"n\">is_transformers_available</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"n\">cluster</span><span class=\"p\">)</span>\n\n    <span class=\"n\">remote_fn</span><span class=\"p\">()</span>\n    <span class=\"n\">cluster</span><span class=\"o\">.</span><span class=\"n\">teardown</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</section>\n</section>\n\n    <script type=\"text/x-thebe-config\">\n    {\n        requestKernel: true,\n        binderOptions: {\n            repo: \"binder-examples/jupyter-stacks-datascience\",\n            ref: \"master\",\n        },\n        codeMirrorConfig: {\n            theme: \"abcdef\",\n            mode: \"python\"\n        },\n        kernelOptions: {\n            name: \"python3\",\n            path: \"./.\"\n        },\n        predefinedOutput: true\n    }\n    </script>\n    <script>kernelName = 'python3'</script>", "metatags": "<meta name=\"generator\" content=\"Docutils 0.19: https://docutils.sourceforge.io/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["security-and-authentication", "Security and Authentication", "N", "next"], ["docker-setup", "Docker: Cluster Setup", "P", "previous"]], "sourcename": "docker-workflows.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Docker: Dev and Prod Workflows with Runhouse</a><ul>\n<li><a class=\"reference internal\" href=\"#docker-cluster-setup\">Docker Cluster Setup</a></li>\n<li><a class=\"reference internal\" href=\"#sample-function\">Sample Function</a></li>\n<li><a class=\"reference internal\" href=\"#production-workflow\">Production Workflow</a><ul>\n<li><a class=\"reference internal\" href=\"#defining-the-function\">Defining the Function</a></li>\n<li><a class=\"reference internal\" href=\"#calling-the-function\">Calling the Function</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#local-development\">Local Development</a><ul>\n<li><a class=\"reference internal\" href=\"#local-changes\">Local Changes</a></li>\n<li><a class=\"reference internal\" href=\"#installing-local-version\">Installing local version</a></li>\n<li><a class=\"reference internal\" href=\"#id1\">Defining the Function</a></li>\n<li><a class=\"reference internal\" href=\"#id2\">Calling the Function</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#summary-setting-up-your-code\">Summary - Setting Up Your Code</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "globaltoc": "<p class=\"caption\" role=\"heading\"><span class=\"caption-text\">Getting Started</span></p>\n<ul>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"how-to-use-runhouse/\">How to Use Runhouse</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"tutorials/quick-start-den/\">Setting Up Runhouse</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"tutorials/quick-start-cloud/\">API Quick Start</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"runhouse-in-your-stack/\">Working with Common Libraries and Tools</a></li>\n</ul>\n<p class=\"caption\" role=\"heading\"><span class=\"caption-text\">API Basics</span></p>\n<ul>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"tutorials/api-clusters/\">Clusters</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"tutorials/api-modules/\">Functions and Modules</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"tutorials/api-process/\">Processes</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"tutorials/api-images/\">Images</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"tutorials/api-folders/\">Folders</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"tutorials/api-secrets/\">Secrets</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"tutorials/api-resources/\">Resource Management</a></li>\n</ul>\n<p class=\"caption\" role=\"heading\"><span class=\"caption-text\">API Reference</span></p>\n<ul>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"api/python/\">Python API</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/python/resource/\">Resource</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/python/function/\">Function</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/python/cluster/\">Cluster</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/python/image/\">Image</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/python/package/\">Package</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/python/module/\">Module</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/python/folder/\">Folder</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/python/secrets/\">Secrets</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"api/python/login/\">Login/Logout</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"api/cli/\">Command Line Interface</a></li>\n</ul>\n<p class=\"caption\" role=\"heading\"><span class=\"caption-text\">Other Topics</span></p>\n<ul>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"tutorials/async/\">Asynchronous Programming</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"installation/\">Installation and Setup</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"debugging-logging/\">Debugging and Logging</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"docker-setup/\">Docker: Cluster Setup</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"docker-workflows/\">Docker: Dev and Prod Workflows with Runhouse</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"security-and-authentication/\">Security and Authentication</a></li>\n</ul>\n", "current_page_name": "docker-workflows", "sidebars": ["about.html", "navigation.html", "relations.html", "searchbox.html", "donate.html"], "customsidebar": null, "alabaster_version": "0.7.16", "alabaster_version_info": [0, 7, 16]}