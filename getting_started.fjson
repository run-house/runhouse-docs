{"parents": [], "prev": {"link": "../installation/", "title": "Installation and Setup Guide"}, "next": {"link": "../cli/cli/", "title": "Command Line Interface"}, "title": "Getting Started Example", "meta": null, "body": "<section id=\"getting-started-example\">\n<h1>Getting Started Example<a class=\"headerlink\" href=\"#getting-started-example\" title=\"Permalink to this heading\">\u00b6</a></h1>\n<p><a href=\"https://colab.research.google.com/github/run-house/runhouse/blob/stable/docs/notebooks/getting_started.ipynb\">\n<img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a></p><p>In this basic getting started example, we demonstrate how you can use Runhouse to bridge the gap\nbetween local and remote compute, and create Resources that can be saved, reused, and shared.</p>\n<p>For instructions on installing Runhouse and setting up compute prior to running this example,\nplease first refer to <a class=\"reference internal\" href=\"../installation/#installation-and-setup-guide\"><span class=\"std std-ref\">Installation and Setup Guide</span></a>.</p>\n<p>To import runhouse:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">runhouse</span> <span class=\"k\">as</span> <span class=\"nn\">rh</span>\n</pre></div>\n</div>\n<p>Optionally, to create and login to a (free) Runhouse account, for better resource saving and sharing\nlater on in the example:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">login</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<section id=\"running-local-functions-on-remote-hardware\">\n<h2>Running local functions on remote hardware<a class=\"headerlink\" href=\"#running-local-functions-on-remote-hardware\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>First let\u2019s define a simple local function which returns the number of CPUs available.</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">num_cpus</span><span class=\"p\">():</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span>\n    <span class=\"k\">return</span> <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">cpu_count</span><span class=\"p\">()</span>\n\n<span class=\"n\">num_cpus</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>Next, instantiate the cluster that we want to run this function on. This can be either an existing\ncluster where you pass in an IP address and SSH credentials, or a cluster associated with supported\nCloud account (AWS, GCP, Azure, LambdaLabs), where it is automatically launched (and optionally\nterminated) for you.</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Using an existing, bring-your-own cluster</span>\n<span class=\"n\">cluster</span> <span class=\"o\">=</span> <span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">cluster</span><span class=\"p\">(</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;cpu-cluster&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">ips</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;&lt;ip of the cluster&gt;&#39;</span><span class=\"p\">],</span>\n            <span class=\"n\">ssh_creds</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;ssh_user&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;&lt;user&gt;&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ssh_private_key&#39;</span><span class=\"p\">:</span><span class=\"s1\">&#39;&lt;path_to_key&gt;&#39;</span><span class=\"p\">},</span>\n        <span class=\"p\">)</span>\n\n<span class=\"c1\"># Using a Cloud provider</span>\n<span class=\"n\">cluster</span> <span class=\"o\">=</span> <span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">cluster</span><span class=\"p\">(</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;cpu-cluster&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">instance_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;CPU:8&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">provider</span><span class=\"o\">=</span><span class=\"s2\">&quot;cheapest&quot;</span><span class=\"p\">,</span>      <span class=\"c1\"># options: &quot;AWS&quot;, &quot;GCP&quot;, &quot;Azure&quot;, &quot;Lambda&quot;, or &quot;cheapest&quot;</span>\n        <span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>If using a cloud cluster, we can launch the cluster with <code class=\"docutils literal notranslate\"><span class=\"pre\">.up()</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">.up_if_not()</span></code>.</p>\n<p>Note that it may take a few minutes for the cluster to be launched through the Cloud provider and\nset up dependencies.</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">cluster</span><span class=\"o\">.</span><span class=\"n\">up_if_not</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>Now that we have our function and remote cluster set up, we\u2019re ready to see how to run this function on our cluster!</p>\n<p>We wrap our local function in <code class=\"docutils literal notranslate\"><span class=\"pre\">rh.function</span></code>, and associate this new function with the cluster. Now, whenever we call\nthis new function, just as we would call any other Python function, it runs on the cluster instead of local.</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">num_cpus_cluster</span> <span class=\"o\">=</span> <span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">function</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;num_cpus_cluster&quot;</span><span class=\"p\">,</span> <span class=\"n\">fn</span><span class=\"o\">=</span><span class=\"n\">num_cpus</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"o\">=</span><span class=\"n\">cluster</span><span class=\"p\">)</span>\n\n<span class=\"n\">num_cpus_cluster</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</section>\n<section id=\"saving-reusing-and-sharing\">\n<h2>Saving, Reusing, and Sharing<a class=\"headerlink\" href=\"#saving-reusing-and-sharing\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>Runhouse supports saving down the metadata and configs for resources like clusters and functions, so that you can load\nthem from a different environment, or share it with your collaborators.</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">num_cpus_cluster</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n<span class=\"n\">num_cpus_cluster</span><span class=\"o\">.</span><span class=\"n\">share</span><span class=\"p\">(</span>\n    <span class=\"n\">users</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;&lt;email_to_runhouse_account&gt;&quot;</span><span class=\"p\">],</span>\n    <span class=\"n\">access_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;write&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Now, you, or whoever you shared it with, can reload this function from anther dev environment (like a different Colab,\nlocal, or on a cluster), as long as you are logged in to your Runhouse account.</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">reloaded_function</span> <span class=\"o\">=</span> <span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">function</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;num_cpus_cluster&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">reloaded_function</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</section>\n<section id=\"terminate-the-cluster\">\n<h2>Terminate the Cluster<a class=\"headerlink\" href=\"#terminate-the-cluster\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>To terminate the cluster, you can run:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">cluster</span><span class=\"o\">.</span><span class=\"n\">teardown</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</section>\n<section id=\"summary\">\n<h2>Summary<a class=\"headerlink\" href=\"#summary\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>Here, we demonstrated how to use runhouse to create references to remote clusters, run local functions on the cluster, and save/share and reuse functions with a Runhouse account.</p>\n<p>Runhouse also lets you:</p>\n<ul class=\"simple\">\n<li><p>Send and save data (folders, blobs, tables) between local, remote, and file storage</p></li>\n<li><p>Send, save, and share dev environments</p></li>\n<li><p>Reload and reuse saved resources (both compute and data) from different environments (with a Runhouse account)</p></li>\n<li><p>\u2026 and much more!</p></li>\n</ul>\n</section>\n</section>\n\n    <script type=\"text/x-thebe-config\">\n    {\n        requestKernel: true,\n        binderOptions: {\n            repo: \"binder-examples/jupyter-stacks-datascience\",\n            ref: \"master\",\n        },\n        codeMirrorConfig: {\n            theme: \"abcdef\",\n            mode: \"python\"\n        },\n        kernelOptions: {\n            kernelName: \"python3\",\n            path: \"./.\"\n        },\n        predefinedOutput: true\n    }\n    </script>\n    <script>kernelName = 'python3'</script>", "metatags": "<meta name=\"generator\" content=\"Docutils 0.18.1: http://docutils.sourceforge.net/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["cli/cli", "Command Line Interface", "N", "next"], ["installation", "Installation and Setup Guide", "P", "previous"]], "sourcename": "getting_started.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Getting Started Example</a><ul>\n<li><a class=\"reference internal\" href=\"#running-local-functions-on-remote-hardware\">Running local functions on remote hardware</a></li>\n<li><a class=\"reference internal\" href=\"#saving-reusing-and-sharing\">Saving, Reusing, and Sharing</a></li>\n<li><a class=\"reference internal\" href=\"#terminate-the-cluster\">Terminate the Cluster</a></li>\n<li><a class=\"reference internal\" href=\"#summary\">Summary</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "getting_started", "sidebars": ["sidebar-logo.html", "search-field.html", "sbt-sidebar-nav.html", "sbt-sidebar-footer.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "pagetitle": "Getting Started Example", "page_description": "Getting Started Example  <p><a href=\"https://colab.research.google.com/github/run-house/runhouse/blob/stable/docs/notebooks/getting_started.ipynb\"> <img src=\"ht", "author": "the Runhouse team \ud83c\udfc3\u200d\u2640\ufe0f\ud83c\udfe0", "github_user": "run-house", "github_repo": "runhouse", "github_version": "stable", "doc_path": "docs/", "theme_search_bar_text": "Search the docs ...", "theme_show_toc_level": 1}