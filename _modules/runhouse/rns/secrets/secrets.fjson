{"parents": [{"link": "../../../../", "title": "Module code"}], "title": "runhouse.rns.secrets.secrets", "body": "<h1>Source code for runhouse.rns.secrets.secrets</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">configparser</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">,</span> <span class=\"n\">Union</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">sky</span>\n<span class=\"kn\">import</span> <span class=\"nn\">typer</span>\n<span class=\"kn\">import</span> <span class=\"nn\">yaml</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.globals</span> <span class=\"kn\">import</span> <span class=\"n\">configs</span><span class=\"p\">,</span> <span class=\"n\">rns_client</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.rns.utils.api</span> <span class=\"kn\">import</span> <span class=\"n\">load_resp_content</span><span class=\"p\">,</span> <span class=\"n\">read_resp_data</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"Secrets\"><a class=\"viewcode-back\" href=\"../../../../../api/python/secrets/#runhouse.Secrets\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Secrets</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Handles cluster secrets management (reading and writing) across all major cloud providers.</span>\n<span class=\"sd\">    Secrets are securely stored in Hashicorp Vault.&quot;&quot;&quot;</span>\n\n    <span class=\"n\">PROVIDER_NAME</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"n\">CREDENTIALS_FILE</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"n\">USER_ENDPOINT</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;user/secret&quot;</span>\n    <span class=\"n\">GROUP_ENDPOINT</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;group/secret&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">read_secrets</span><span class=\"p\">(</span>\n        <span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">from_env</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Dict</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span>\n\n<div class=\"viewcode-block\" id=\"Secrets.save_secrets\"><a class=\"viewcode-back\" href=\"../../../../../api/python/secrets/#runhouse.Secrets.save_secrets\">[docs]</a>    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">save_secrets</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">secrets</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">overwrite</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Dict</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Save secrets for providers to their respective configs.&quot;&quot;&quot;</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span></div>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">has_secrets_file</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n        <span class=\"n\">file_path</span> <span class=\"o\">=</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">default_credentials_path</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">file_path</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">return</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">file_exists</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">default_credentials_path</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">CREDENTIALS_FILE</span>\n\n<div class=\"viewcode-block\" id=\"Secrets.extract_and_upload\"><a class=\"viewcode-back\" href=\"../../../../../api/python/secrets/#runhouse.Secrets.extract_and_upload\">[docs]</a>    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">extract_and_upload</span><span class=\"p\">(</span>\n        <span class=\"bp\">cls</span><span class=\"p\">,</span>\n        <span class=\"n\">headers</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">interactive</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">providers</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Upload all locally configured secrets into Vault. Secrets are loaded from their local config files.</span>\n<span class=\"sd\">        (ex: ``~/.aws/credentials)``. To upload custom secrets for custom providers, see Secrets.put()</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; rh.Secrets.extract_and_upload(providers=[&quot;aws&quot;, &quot;lambda&quot;])</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">secrets</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">load_provider_secrets</span><span class=\"p\">(</span><span class=\"n\">providers</span><span class=\"o\">=</span><span class=\"n\">providers</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">provider_name</span><span class=\"p\">,</span> <span class=\"n\">provider_secrets</span> <span class=\"ow\">in</span> <span class=\"n\">secrets</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"n\">interactive</span><span class=\"p\">:</span>\n                <span class=\"n\">upload_secrets</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">confirm</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Upload secrets for </span><span class=\"si\">{</span><span class=\"n\">provider_name</span><span class=\"si\">}</span><span class=\"s2\">?&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">upload_secrets</span><span class=\"p\">:</span>\n                    <span class=\"n\">secrets</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"n\">provider_name</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n\n        <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span>\n            <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">api_server_url</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">{</span><span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">USER_ENDPOINT</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">secrets</span><span class=\"p\">),</span>\n            <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span> <span class=\"ow\">or</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">request_headers</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">status_code</span> <span class=\"o\">!=</span> <span class=\"mi\">200</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;Failed to update secrets in Vault: </span><span class=\"si\">{</span><span class=\"n\">load_resp_content</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Uploaded secrets for to Vault for: </span><span class=\"si\">{</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">secrets</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Secrets.download_into_env\"><a class=\"viewcode-back\" href=\"../../../../../api/python/secrets/#runhouse.Secrets.download_into_env\">[docs]</a>    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">download_into_env</span><span class=\"p\">(</span>\n        <span class=\"bp\">cls</span><span class=\"p\">,</span>\n        <span class=\"n\">save_locally</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">providers</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">headers</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">check_enabled</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Dict</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Get all user secrets from Vault. Optionally save them down to local config files (where relevant).</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; rh.Secrets.download_into_env(providers=[&quot;aws&quot;, &quot;lambda&quot;])</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Getting secrets from Vault.&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span>\n            <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">api_server_url</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">{</span><span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">USER_ENDPOINT</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span> <span class=\"ow\">or</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">request_headers</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">status_code</span> <span class=\"o\">!=</span> <span class=\"mi\">200</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s2\">&quot;Failed to download secrets from Vault&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">secrets</span> <span class=\"o\">=</span> <span class=\"n\">read_resp_data</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">providers</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">secrets</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">p</span><span class=\"p\">:</span> <span class=\"n\">secrets</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">providers</span> <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">secrets</span><span class=\"p\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">save_locally</span> <span class=\"ow\">and</span> <span class=\"n\">secrets</span><span class=\"p\">:</span>\n            <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">save_provider_secrets</span><span class=\"p\">(</span><span class=\"n\">secrets</span><span class=\"p\">,</span> <span class=\"n\">check_enabled</span><span class=\"o\">=</span><span class=\"n\">check_enabled</span><span class=\"p\">)</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Saved secrets from Vault to local config files&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">secrets</span></div>\n\n<div class=\"viewcode-block\" id=\"Secrets.put\"><a class=\"viewcode-back\" href=\"../../../../../api/python/secrets/#runhouse.Secrets.put\">[docs]</a>    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">put</span><span class=\"p\">(</span>\n        <span class=\"bp\">cls</span><span class=\"p\">,</span>\n        <span class=\"n\">provider</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n        <span class=\"n\">from_env</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">secret</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">group</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">headers</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Upload locally configured secrets for a specified provider into Vault.</span>\n<span class=\"sd\">        To upload custom provider secrets, include the secret param and specify the keys and values to upload.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            from_env (bool): Whether to read secrets from environment variables instead of local config files.</span>\n<span class=\"sd\">                (Default: False)</span>\n<span class=\"sd\">            file_path (str or None): If provided, will read secrets directly from specified file instead of default</span>\n<span class=\"sd\">                config file.</span>\n<span class=\"sd\">            secret (dict or None): Dict mapping provider secrets to value, if not loading from env or file.</span>\n<span class=\"sd\">            group (str or None): If provided, will attribute secrets to the specified group.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; rh.put(provider=&quot;lambda&quot;, secret={&quot;api_key&quot;: *****})</span>\n<span class=\"sd\">            &gt;&gt;&gt; rh.put(provider=&quot;aws&quot;, file_path=&quot;~/.aws/credentials&quot;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">provider_name</span> <span class=\"o\">=</span> <span class=\"n\">provider</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">secret</span> <span class=\"ow\">and</span> <span class=\"n\">provider_name</span> <span class=\"ow\">in</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">enabled_providers</span><span class=\"p\">(</span><span class=\"n\">as_str</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n            <span class=\"c1\"># if a supported cloud provider is given and no secret is provided, extract it from its default location</span>\n            <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">builtin_provider_class_from_name</span><span class=\"p\">(</span><span class=\"n\">provider_name</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">secret</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">read_secrets</span><span class=\"p\">(</span><span class=\"n\">from_env</span><span class=\"o\">=</span><span class=\"n\">from_env</span><span class=\"p\">,</span> <span class=\"n\">file_path</span><span class=\"o\">=</span><span class=\"n\">file_path</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">secret</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">secret</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;No secrets dict found or provided for </span><span class=\"si\">{</span><span class=\"n\">provider</span><span class=\"si\">}</span><span class=\"s2\">. Please make sure the credentials &quot;</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;file exists in its default location, or provide credentials with the `secret` param&quot;</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"n\">endpoint</span> <span class=\"o\">=</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">set_endpoint</span><span class=\"p\">(</span><span class=\"n\">group</span><span class=\"p\">)</span>\n        <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span>\n            <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">api_server_url</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">{</span><span class=\"n\">endpoint</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">{</span><span class=\"n\">provider</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">secret</span><span class=\"p\">),</span>\n            <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span> <span class=\"ow\">or</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">request_headers</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">status_code</span> <span class=\"o\">!=</span> <span class=\"mi\">200</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Failed to update </span><span class=\"si\">{</span><span class=\"n\">provider</span><span class=\"si\">}</span><span class=\"s2\"> secrets in Vault&quot;</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Secrets.get\"><a class=\"viewcode-back\" href=\"../../../../../api/python/secrets/#runhouse.Secrets.get\">[docs]</a>    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span>\n        <span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">provider</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">save_to_env</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">group</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">dict</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Read secrets from the Vault service for a given provider and optionally save them to their local config.</span>\n<span class=\"sd\">        If group is provided will read secrets for the specified group.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; rh.get(provider=&quot;lambda&quot;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; # returns {&quot;api_key&quot;: *****}</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">provider_name</span> <span class=\"o\">=</span> <span class=\"n\">provider</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>\n        <span class=\"n\">endpoint</span> <span class=\"o\">=</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">set_endpoint</span><span class=\"p\">(</span><span class=\"n\">group</span><span class=\"p\">)</span>\n        <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">api_server_url</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">{</span><span class=\"n\">endpoint</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">{</span><span class=\"n\">provider_name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n        <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">request_headers</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">status_code</span> <span class=\"o\">!=</span> <span class=\"mi\">200</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;Failed to get secrets from Vault for </span><span class=\"si\">{</span><span class=\"n\">provider_name</span><span class=\"si\">}</span><span class=\"s2\">: </span><span class=\"si\">{</span><span class=\"n\">load_resp_content</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"n\">secrets</span> <span class=\"o\">=</span> <span class=\"n\">read_resp_data</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">provider_name</span><span class=\"p\">,</span> <span class=\"p\">{})</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">secrets</span><span class=\"p\">:</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;No secrets found in Vault for </span><span class=\"si\">{</span><span class=\"n\">provider_name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"p\">{}</span>\n\n        <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">builtin_provider_class_from_name</span><span class=\"p\">(</span><span class=\"n\">provider_name</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">save_to_env</span> <span class=\"ow\">and</span> <span class=\"n\">p</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Saving secrets for </span><span class=\"si\">{</span><span class=\"n\">provider_name</span><span class=\"si\">}</span><span class=\"s2\"> to local config&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">save_secrets</span><span class=\"p\">(</span><span class=\"n\">secrets</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">secrets</span></div>\n\n<div class=\"viewcode-block\" id=\"Secrets.to\"><a class=\"viewcode-back\" href=\"../../../../../api/python/secrets/#runhouse.Secrets.to\">[docs]</a>    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">to</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">system</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Cluster&quot;</span><span class=\"p\">],</span> <span class=\"n\">providers</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Copy secrets to the desired cluster for a list of builtin providers.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            system (str or Cluster): Cluster to send secrets to.</span>\n<span class=\"sd\">            providers (List[str] or None): Providers to send secrets for. If no providers are specified,</span>\n<span class=\"sd\">                will load all builtin providers that are already enabled.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; rh.Secrets.to(my_cluster, providers=[&quot;aws&quot;, &quot;lambda&quot;])</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"kn\">from</span> <span class=\"nn\">runhouse</span> <span class=\"kn\">import</span> <span class=\"n\">Cluster</span>\n\n            <span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"n\">Cluster</span><span class=\"o\">.</span><span class=\"n\">from_name</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">system</span><span class=\"p\">)</span>\n\n        <span class=\"n\">cluster_name</span> <span class=\"o\">=</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">is_up</span><span class=\"p\">():</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;Cluster </span><span class=\"si\">{</span><span class=\"n\">cluster_name</span><span class=\"si\">}</span><span class=\"s2\"> is not up. Run `cluster_obj.up()` to re-up the cluster.&quot;</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"n\">enabled_providers</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">enabled_providers</span><span class=\"p\">(</span><span class=\"n\">as_str</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Extract secrets from default paths</span>\n        <span class=\"n\">configured_secrets</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">load_provider_secrets</span><span class=\"p\">(</span><span class=\"n\">providers</span><span class=\"o\">=</span><span class=\"n\">providers</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">configured_secrets</span> <span class=\"ow\">or</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">configured_secrets</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">providers</span><span class=\"p\">):</span>\n            <span class=\"c1\"># If no secrets found in the enabled providers&#39; credentials files check if they exist in Vault</span>\n            <span class=\"n\">missing_providers</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">providers</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">configured_secrets</span><span class=\"p\">)))</span>\n            <span class=\"n\">secrets_for_missing_providers</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">download_into_env</span><span class=\"p\">(</span>\n                <span class=\"n\">save_locally</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">providers</span><span class=\"o\">=</span><span class=\"n\">missing_providers</span>\n            <span class=\"p\">)</span>\n\n            <span class=\"c1\"># Add the missing provider secrets from Vault to the configured secrets</span>\n            <span class=\"n\">configured_secrets</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">secrets_for_missing_providers</span><span class=\"p\">)</span>\n\n            <span class=\"c1\"># Confirm all enabled providers are either configured locally or have secrets stored in Vault</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">configured_secrets</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">enabled_providers</span><span class=\"p\">):</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;Failed to find secrets locally or in Vault for providers: </span><span class=\"si\">{</span><span class=\"n\">missing_providers</span><span class=\"si\">}</span><span class=\"s2\">. &quot;</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;For enabling locally save the secrets to the provider&#39;s default credentials file, &quot;</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;or upload the secrets directly to Vault (e.g: `rh.Secrets.put(</span><span class=\"si\">{</span><span class=\"n\">missing_providers</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">)`)&quot;</span>\n                <span class=\"p\">)</span>\n\n        <span class=\"c1\"># Send provider secrets over RPC to the cluster, then save each provider&#39;s secrets into their default</span>\n        <span class=\"c1\"># file paths on the cluster</span>\n        <span class=\"n\">failed_to_add_secrets</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">add_secrets</span><span class=\"p\">(</span><span class=\"n\">configured_secrets</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">failed_to_add_secrets</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">configured_secrets</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;Failed to copy all secrets onto the </span><span class=\"si\">{</span><span class=\"n\">cluster_name</span><span class=\"si\">}</span><span class=\"s2\"> cluster: </span><span class=\"si\">{</span><span class=\"n\">failed_to_add_secrets</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">failed_to_add_secrets</span><span class=\"p\">:</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;Failed to copy some secrets onto the </span><span class=\"si\">{</span><span class=\"n\">cluster_name</span><span class=\"si\">}</span><span class=\"s2\"> cluster: </span><span class=\"si\">{</span><span class=\"n\">failed_to_add_secrets</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Finished copying secrets onto the </span><span class=\"si\">{</span><span class=\"n\">cluster_name</span><span class=\"si\">}</span><span class=\"s2\"> cluster&quot;</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Secrets.update\"><a class=\"viewcode-back\" href=\"../../../../../api/python/secrets/#runhouse.Secrets.update\">[docs]</a>    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">provider</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">secrets</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Add new keys to existing secrets saved for a given provider in Vault.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; rh.Secrets.update(provider=&quot;lambda&quot;, secrets={&quot;api_key&quot;: new_api_key})</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">existing_secrets</span> <span class=\"o\">=</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">provider</span><span class=\"o\">=</span><span class=\"n\">provider</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">existing_secrets</span><span class=\"p\">:</span>\n            <span class=\"n\">existing_secrets</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">secrets</span><span class=\"p\">)</span>\n            <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">provider</span><span class=\"p\">,</span> <span class=\"n\">secret</span><span class=\"o\">=</span><span class=\"n\">existing_secrets</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Secrets.delete_from_local_env\"><a class=\"viewcode-back\" href=\"../../../../../api/python/secrets/#runhouse.Secrets.delete_from_local_env\">[docs]</a>    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">delete_from_local_env</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">providers</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Delete secrets credential files and use in Runhouse configs for list of specified providers.</span>\n<span class=\"sd\">        If none are provided, will delete secrets for all providers which have been enabled in the local environment.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; rh.Secrets.delete_from_local_env(provider=[&quot;lambda&quot;])</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">providers</span> <span class=\"o\">=</span> <span class=\"n\">providers</span> <span class=\"ow\">or</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">enabled_providers</span><span class=\"p\">(</span><span class=\"n\">as_str</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">provider</span> <span class=\"ow\">in</span> <span class=\"n\">providers</span><span class=\"p\">:</span>\n            <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">builtin_provider_class_from_name</span><span class=\"p\">(</span><span class=\"n\">provider</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Use the default credentials path defined in the builtin provider&#39;s class</span>\n                <span class=\"n\">creds_file_path</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">default_credentials_path</span><span class=\"p\">()</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"c1\"># See if we have the provider&#39;s path saved in the rh config</span>\n                <span class=\"n\">creds_file_path</span> <span class=\"o\">=</span> <span class=\"n\">configs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;secrets&quot;</span><span class=\"p\">,</span> <span class=\"p\">{})</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">provider</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">creds_file_path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">():</span>\n                    <span class=\"n\">creds_file_path</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n            <span class=\"n\">configs</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">provider</span><span class=\"p\">)</span>\n\n            <span class=\"c1\"># Delete the local creds file</span>\n            <span class=\"k\">if</span> <span class=\"n\">creds_file_path</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;Unable to delete credentials file for </span><span class=\"si\">{</span><span class=\"n\">provider</span><span class=\"si\">}</span><span class=\"s2\">. Please delete the file manually.&quot;</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;Deleted </span><span class=\"si\">{</span><span class=\"n\">provider</span><span class=\"si\">}</span><span class=\"s2\"> credentials file from path: </span><span class=\"si\">{</span><span class=\"n\">creds_file_path</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n                <span class=\"p\">)</span>\n                <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">delete_secrets_file</span><span class=\"p\">(</span><span class=\"n\">creds_file_path</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Secrets.delete_from_vault\"><a class=\"viewcode-back\" href=\"../../../../../api/python/secrets/#runhouse.Secrets.delete_from_vault\">[docs]</a>    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">delete_from_vault</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">providers</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Delete secrets from Vault for specified providers.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            providers (List[str] or None): Providers to delete from vault. If not set,</span>\n<span class=\"sd\">                will delete secrets for all providers which have been enabled in the local environment.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; rh.Secrets.delete_from_vault()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">providers</span> <span class=\"o\">=</span> <span class=\"n\">providers</span> <span class=\"ow\">or</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">enabled_providers</span><span class=\"p\">(</span><span class=\"n\">as_str</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">provider</span> <span class=\"ow\">in</span> <span class=\"n\">providers</span><span class=\"p\">:</span>\n            <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">api_server_url</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">{</span><span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">USER_ENDPOINT</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">{</span><span class=\"n\">provider</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n            <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">request_headers</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">status_code</span> <span class=\"o\">!=</span> <span class=\"mi\">200</span><span class=\"p\">:</span>\n                <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;Failed to delete secrets from Vault: </span><span class=\"si\">{</span><span class=\"n\">load_resp_content</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n                <span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Secrets.load_provider_secrets\"><a class=\"viewcode-back\" href=\"../../../../../api/python/secrets/#runhouse.Secrets.load_provider_secrets\">[docs]</a>    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">load_provider_secrets</span><span class=\"p\">(</span>\n        <span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">from_env</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">providers</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">]:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Load secret credentials for all the providers which have been configured locally, or optionally</span>\n<span class=\"sd\">        provide a list of specific providers to load. Returns a dictionary with provider name as the key and</span>\n<span class=\"sd\">        secrets dictionary as value.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; rh.Secrets.load_provider_secrets(providers=[&quot;aws&quot;])</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">secrets</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">providers</span> <span class=\"o\">=</span> <span class=\"n\">providers</span> <span class=\"ow\">or</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">enabled_providers</span><span class=\"p\">()</span>\n        <span class=\"k\">for</span> <span class=\"n\">provider</span> <span class=\"ow\">in</span> <span class=\"n\">providers</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">provider</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n                <span class=\"n\">provider</span> <span class=\"o\">=</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">builtin_provider_class_from_name</span><span class=\"p\">(</span><span class=\"n\">provider</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">provider</span><span class=\"p\">:</span>\n                    <span class=\"k\">continue</span>\n\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">from_env</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">provider</span><span class=\"o\">.</span><span class=\"n\">has_secrets_file</span><span class=\"p\">():</span>\n                <span class=\"c1\"># no secrets file configured for this provider</span>\n                <span class=\"k\">continue</span>\n\n            <span class=\"n\">provider_secrets</span> <span class=\"o\">=</span> <span class=\"n\">provider</span><span class=\"o\">.</span><span class=\"n\">read_secrets</span><span class=\"p\">(</span><span class=\"n\">from_env</span><span class=\"o\">=</span><span class=\"n\">from_env</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">provider_secrets</span><span class=\"p\">:</span>\n                <span class=\"n\">secrets</span><span class=\"p\">[</span><span class=\"n\">provider</span><span class=\"o\">.</span><span class=\"n\">PROVIDER_NAME</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">provider_secrets</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">secrets</span></div>\n\n<div class=\"viewcode-block\" id=\"Secrets.save_provider_secrets\"><a class=\"viewcode-back\" href=\"../../../../../api/python/secrets/#runhouse.Secrets.save_provider_secrets\">[docs]</a>    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">save_provider_secrets</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">secrets</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">check_enabled</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Save secrets for each provider to their respective local configs.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; rh.Secrets.save_provider_secrets(secrets={&quot;lambda&quot;: {&quot;api_key&quot;: ******}})</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">for</span> <span class=\"n\">provider_name</span><span class=\"p\">,</span> <span class=\"n\">provider_secrets</span> <span class=\"ow\">in</span> <span class=\"n\">secrets</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"n\">provider_cls</span> <span class=\"o\">=</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">builtin_provider_class_from_name</span><span class=\"p\">(</span><span class=\"n\">provider_name</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">provider_cls</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"n\">provider_cls</span><span class=\"o\">.</span><span class=\"n\">save_secrets</span><span class=\"p\">(</span><span class=\"n\">provider_secrets</span><span class=\"p\">,</span> <span class=\"n\">overwrite</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n                <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n                    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n                        <span class=\"sa\">f</span><span class=\"s2\">&quot;Failed to save </span><span class=\"si\">{</span><span class=\"n\">provider_name</span><span class=\"si\">}</span><span class=\"s2\"> secrets to config: </span><span class=\"si\">{</span><span class=\"n\">e</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n                    <span class=\"p\">)</span>\n                    <span class=\"k\">continue</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">check_enabled</span><span class=\"p\">:</span>\n            <span class=\"n\">enabled_providers</span> <span class=\"o\">=</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">enabled_providers</span><span class=\"p\">(</span><span class=\"n\">as_str</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"n\">not_enabled</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"n\">p</span>\n                <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">secrets</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span>\n                <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">enabled_providers</span>\n                <span class=\"ow\">and</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">builtin_providers</span><span class=\"p\">(</span><span class=\"n\">as_str</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"n\">not_enabled</span><span class=\"p\">:</span>\n                <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;Received secrets </span><span class=\"si\">{</span><span class=\"n\">not_enabled</span><span class=\"si\">}</span><span class=\"s2\"> which Runhouse did not auto-detect as configured. &quot;</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;For cloud providers, you may want to run `sky check` to double check that they&#39;re &quot;</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;enabled and to see instructions on how to enable them.&quot;</span>\n                <span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Secrets.enabled_providers\"><a class=\"viewcode-back\" href=\"../../../../../api/python/secrets/#runhouse.Secrets.enabled_providers\">[docs]</a>    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">enabled_providers</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">as_str</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Returns a list of cloud provider classes which Runhouse supports out of the box.</span>\n<span class=\"sd\">        If as_str is True, return the names of the providers as strings.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; rh.Secrets.enabled_providers(as_str=True)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">sky</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">quiet</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">clouds</span> <span class=\"o\">=</span> <span class=\"n\">sky</span><span class=\"o\">.</span><span class=\"n\">global_user_state</span><span class=\"o\">.</span><span class=\"n\">get_enabled_clouds</span><span class=\"p\">()</span>\n        <span class=\"n\">cloud_names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">clouds</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;local&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">cloud_names</span><span class=\"p\">:</span>\n            <span class=\"n\">cloud_names</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"s2\">&quot;local&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">cloud_names</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;sky&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"kn\">import</span> <span class=\"nn\">huggingface_hub</span>  <span class=\"c1\"># noqa</span>\n\n            <span class=\"kn\">from</span> <span class=\"nn\">.huggingface_secrets</span> <span class=\"kn\">import</span> <span class=\"n\">HuggingFaceSecrets</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">HuggingFaceSecrets</span><span class=\"o\">.</span><span class=\"n\">read_secrets</span><span class=\"p\">():</span>\n                <span class=\"n\">cloud_names</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;huggingface&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">ModuleNotFoundError</span><span class=\"p\">:</span>\n            <span class=\"k\">pass</span>\n\n        <span class=\"c1\"># Add any SSH keys + GitHub token that were explicitly added</span>\n        <span class=\"n\">config_secrets</span> <span class=\"o\">=</span> <span class=\"n\">configs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;secrets&quot;</span><span class=\"p\">,</span> <span class=\"p\">{})</span>\n        <span class=\"k\">if</span> <span class=\"n\">config_secrets</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;ssh&quot;</span><span class=\"p\">):</span>\n            <span class=\"n\">cloud_names</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;ssh&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">config_secrets</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;github&quot;</span><span class=\"p\">):</span>\n            <span class=\"n\">cloud_names</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;github&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">as_str</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">cloud_names</span>\n\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">builtin_provider_class_from_name</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">cloud_names</span><span class=\"p\">]</span></div>\n\n<div class=\"viewcode-block\" id=\"Secrets.builtin_providers\"><a class=\"viewcode-back\" href=\"../../../../../api/python/secrets/#runhouse.Secrets.builtin_providers\">[docs]</a>    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">builtin_providers</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">as_str</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">list</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Return list of all Runhouse providers (as class objects) supported out of the box.&quot;&quot;&quot;</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">runhouse.rns.secrets.providers</span> <span class=\"kn\">import</span> <span class=\"n\">Providers</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">as_str</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">Providers</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">Providers</span><span class=\"p\">]</span></div>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_check_secrets_for_mismatches</span><span class=\"p\">(</span>\n        <span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">secrets_to_save</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">secrets_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">overwrite</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;When overwrite is set to `False` and a secrets file already exists, check if new secrets clash with</span>\n<span class=\"sd\">        what may have already been saved.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">overwrite</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">has_secrets_file</span><span class=\"p\">():</span>\n            <span class=\"c1\"># If explicitly overwriting or the secrets file does not exist we can ignore</span>\n            <span class=\"k\">return</span>\n\n        <span class=\"n\">existing_secrets</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">read_secrets</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"o\">=</span><span class=\"n\">secrets_path</span><span class=\"p\">)</span>\n        <span class=\"n\">provider</span> <span class=\"o\">=</span> <span class=\"n\">existing_secrets</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;provider&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">existing_key</span><span class=\"p\">,</span> <span class=\"n\">existing_val</span> <span class=\"ow\">in</span> <span class=\"n\">existing_secrets</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"n\">new_val</span> <span class=\"o\">=</span> <span class=\"n\">secrets_to_save</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">existing_key</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">existing_key</span> <span class=\"o\">!=</span> <span class=\"n\">new_val</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;Mismatch in </span><span class=\"si\">{</span><span class=\"n\">provider</span><span class=\"si\">}</span><span class=\"s2\"> secrets for key `</span><span class=\"si\">{</span><span class=\"n\">existing_key</span><span class=\"si\">}</span><span class=\"s2\">`! Secrets in config file </span><span class=\"si\">{</span><span class=\"n\">secrets_path</span><span class=\"si\">}</span><span class=\"s2\"> &quot;</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;do not match those provided. If you intend to overwrite a particular secret key, &quot;</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;please do so manually.&quot;</span>\n                <span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"Secrets.delete_secrets_file\"><a class=\"viewcode-back\" href=\"../../../../../api/python/secrets/#runhouse.Secrets.delete_secrets_file\">[docs]</a>    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">delete_secrets_file</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Delete local credentials file. If no path is provided will use the default path set for the provider.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; rh.Secrets.delete_secrets_file()</span>\n<span class=\"sd\">            &gt;&gt;&gt; rh.Secrets.delete_secrets_file(&quot;~/.aws/credentials&quot;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">file_path</span> <span class=\"o\">=</span> <span class=\"n\">file_path</span> <span class=\"ow\">or</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">default_credentials_path</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">unlink</span><span class=\"p\">(</span><span class=\"n\">missing_ok</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">):</span>\n            <span class=\"k\">for</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"n\">file_path</span><span class=\"p\">:</span>\n                <span class=\"n\">Secrets</span><span class=\"o\">.</span><span class=\"n\">delete_secrets_file</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"o\">=</span><span class=\"n\">f</span><span class=\"p\">)</span></div>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_add_provider_to_rh_config</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">secrets_for_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Save the loaded provider config path to the runhouse config saved in the file system.&quot;&quot;&quot;</span>\n        <span class=\"n\">config_secrets</span> <span class=\"o\">=</span> <span class=\"n\">secrets_for_config</span> <span class=\"ow\">or</span> <span class=\"p\">{</span>\n            <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">PROVIDER_NAME</span><span class=\"p\">:</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">default_credentials_path</span><span class=\"p\">()</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">configs</span><span class=\"o\">.</span><span class=\"n\">set_nested</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s2\">&quot;secrets&quot;</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"n\">config_secrets</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">set_endpoint</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">group</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span>\n            <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">GROUP_ENDPOINT</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">{</span><span class=\"n\">group</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span> <span class=\"k\">if</span> <span class=\"n\">group</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"k\">else</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">USER_ENDPOINT</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">save_to_config_file</span><span class=\"p\">(</span><span class=\"n\">parser</span><span class=\"p\">,</span> <span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">mkdir</span><span class=\"p\">(</span><span class=\"n\">parents</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">exist_ok</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">,</span> <span class=\"s2\">&quot;w+&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n            <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">save_to_json_file</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">mkdir</span><span class=\"p\">(</span><span class=\"n\">parents</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">exist_ok</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">,</span> <span class=\"s2\">&quot;w+&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n            <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">read_json_file</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Dict</span><span class=\"p\">:</span>\n        <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">,</span> <span class=\"s2\">&quot;r&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">config_file</span><span class=\"p\">:</span>\n            <span class=\"n\">config_data</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">config_file</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">config_data</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">read_config_file</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">configparser</span><span class=\"o\">.</span><span class=\"n\">ConfigParser</span><span class=\"p\">()</span>\n        <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">config</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">read_yaml_file</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">,</span> <span class=\"s2\">&quot;r&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">stream</span><span class=\"p\">:</span>\n            <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">yaml</span><span class=\"o\">.</span><span class=\"n\">safe_load</span><span class=\"p\">(</span><span class=\"n\">stream</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">config</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">save_to_yaml_file</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">file_path</span><span class=\"p\">):</span>\n        <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">,</span> <span class=\"s2\">&quot;w&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">yaml_file</span><span class=\"p\">:</span>\n            <span class=\"n\">yaml</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">yaml_file</span><span class=\"p\">,</span> <span class=\"n\">default_flow_style</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">builtin_provider_class_from_name</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"kn\">from</span> <span class=\"nn\">runhouse.rns.secrets.providers</span> <span class=\"kn\">import</span> <span class=\"n\">Providers</span>\n\n            <span class=\"k\">return</span> <span class=\"n\">Providers</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()]</span><span class=\"o\">.</span><span class=\"n\">value</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"c1\"># could be a custom provider, in which case there is no built-in class</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">file_exists</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n\n<span class=\"c1\"># TODO AWS secrets (use https://github.com/99designs/aws-vault ?)</span>\n<span class=\"c1\"># TODO Azure secrets</span>\n<span class=\"c1\"># TODO GCP secrets</span>\n<span class=\"c1\"># TODO custom vault secrets</span>\n</pre></div>", "current_page_name": "_modules/runhouse/rns/secrets/secrets", "sidebars": ["about.html", "navigation.html", "relations.html", "searchbox.html", "donate.html"], "customsidebar": null, "alabaster_version": "0.7.13"}