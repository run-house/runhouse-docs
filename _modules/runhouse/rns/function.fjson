{"parents": [{"link": "../../../", "title": "Module code"}], "title": "runhouse.rns.function", "body": "<h1>Source code for runhouse.rns.function</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">copy</span>\n<span class=\"kn\">import</span> <span class=\"nn\">inspect</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">re</span>\n<span class=\"kn\">import</span> <span class=\"nn\">warnings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">,</span> <span class=\"n\">Union</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse</span> <span class=\"kn\">import</span> <span class=\"n\">rh_config</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.rns.envs</span> <span class=\"kn\">import</span> <span class=\"n\">CondaEnv</span><span class=\"p\">,</span> <span class=\"n\">Env</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.rns.hardware</span> <span class=\"kn\">import</span> <span class=\"n\">Cluster</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.rns.module</span> <span class=\"kn\">import</span> <span class=\"n\">Module</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.rns.packages</span> <span class=\"kn\">import</span> <span class=\"n\">git_package</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.rns.run_module_utils</span> <span class=\"kn\">import</span> <span class=\"n\">get_fn_from_pointers</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.rns.utils.api</span> <span class=\"kn\">import</span> <span class=\"n\">ResourceAccess</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.rns.utils.env</span> <span class=\"kn\">import</span> <span class=\"n\">_env_vars_from_file</span><span class=\"p\">,</span> <span class=\"n\">_get_env_from</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.rns.utils.hardware</span> <span class=\"kn\">import</span> <span class=\"n\">_get_cluster_from</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.rns.utils.names</span> <span class=\"kn\">import</span> <span class=\"n\">_generate_default_name</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"Function\"><a class=\"viewcode-back\" href=\"../../../../api/python/function/#runhouse.Function\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Function</span><span class=\"p\">(</span><span class=\"n\">Module</span><span class=\"p\">):</span>\n    <span class=\"n\">RESOURCE_TYPE</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;function&quot;</span>\n    <span class=\"n\">DEFAULT_ACCESS</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;write&quot;</span>\n\n<div class=\"viewcode-block\" id=\"Function.__init__\"><a class=\"viewcode-back\" href=\"../../../../api/python/function/#runhouse.Function.__init__\">[docs]</a>    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">fn_pointers</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">system</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Cluster</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Env</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">dryrun</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">access</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">resources</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>  <span class=\"c1\"># We have this here to ignore extra arguments when calling from from_config</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Runhouse Function object. It comprises of the entrypoint, system/cluster,</span>\n<span class=\"sd\">        and dependencies necessary to run the service.</span>\n\n<span class=\"sd\">        .. note::</span>\n<span class=\"sd\">                To create a Function, please use the factory method :func:`function`.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fn_pointers</span> <span class=\"o\">=</span> <span class=\"n\">fn_pointers</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">access</span> <span class=\"o\">=</span> <span class=\"n\">access</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_ACCESS</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">resources</span> <span class=\"o\">=</span> <span class=\"n\">resources</span> <span class=\"ow\">or</span> <span class=\"p\">{}</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">,</span> <span class=\"n\">system</span><span class=\"o\">=</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span></div>\n\n        <span class=\"c1\"># if not self.dryrun:</span>\n        <span class=\"c1\">#     self = self.to(self.system, env=self.env)</span>\n\n    <span class=\"c1\"># ----------------- Constructor helper methods -----------------</span>\n\n<div class=\"viewcode-block\" id=\"Function.from_config\"><a class=\"viewcode-back\" href=\"../../../../api/python/function/#runhouse.Function.from_config\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_config</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Create a Function object from a config dictionary.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;system&quot;</span><span class=\"p\">],</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n            <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;system&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Cluster</span><span class=\"o\">.</span><span class=\"n\">from_config</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;system&quot;</span><span class=\"p\">],</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;env&quot;</span><span class=\"p\">],</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n            <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;env&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Env</span><span class=\"o\">.</span><span class=\"n\">from_config</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;env&quot;</span><span class=\"p\">],</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span>\n\n        <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;resource_subtype&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">Function</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span></div>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_check_for_child_configs</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Overload by child resources to load any resources they hold internally.&quot;&quot;&quot;</span>\n        <span class=\"c1\"># TODO: Replace with _get_cluster_from?</span>\n        <span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;system&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;system&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">rh_config</span><span class=\"o\">.</span><span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">load_config</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">system</span><span class=\"p\">)</span>\n            <span class=\"c1\"># if the system is set to a cluster</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;system&quot;</span><span class=\"p\">]:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;No cluster config saved for </span><span class=\"si\">{</span><span class=\"n\">system</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;env&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">_get_env_from</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;env&quot;</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"n\">config</span>\n\n<div class=\"viewcode-block\" id=\"Function.to\"><a class=\"viewcode-back\" href=\"../../../../api/python/function/#runhouse.Function.to\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">to</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">system</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">Env</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[],</span>\n        <span class=\"c1\"># Variables below are deprecated</span>\n        <span class=\"n\">reqs</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">setup_cmds</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"p\">[],</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Set up a Function and Env on the given system.</span>\n\n<span class=\"sd\">        See the args of the factory method :func:`function` for more information.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; rh.function(fn=local_fn).to(gpu_cluster)</span>\n<span class=\"sd\">            &gt;&gt;&gt; rh.function(fn=local_fn).to(system=gpu_cluster, env=my_conda_env)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">setup_cmds</span><span class=\"p\">:</span>\n            <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;``setup_cmds`` argument has been deprecated. &quot;</span>\n                <span class=\"s2\">&quot;Please pass in setup commands to the ``Env`` class corresponding to the function instead.&quot;</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"c1\"># to retain backwards compatibility</span>\n        <span class=\"k\">if</span> <span class=\"n\">reqs</span> <span class=\"ow\">or</span> <span class=\"n\">setup_cmds</span><span class=\"p\">:</span>\n            <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;``reqs`` and ``setup_cmds`` arguments has been deprecated. Please use ``env`` instead.&quot;</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">Env</span><span class=\"p\">(</span><span class=\"n\">reqs</span><span class=\"o\">=</span><span class=\"n\">reqs</span><span class=\"p\">,</span> <span class=\"n\">setup_cmds</span><span class=\"o\">=</span><span class=\"n\">setup_cmds</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">env</span> <span class=\"ow\">and</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">):</span>\n            <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">Env</span><span class=\"p\">(</span><span class=\"n\">reqs</span><span class=\"o\">=</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"n\">setup_cmds</span><span class=\"o\">=</span><span class=\"n\">setup_cmds</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">env</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">env</span> <span class=\"ow\">or</span> <span class=\"n\">Env</span><span class=\"p\">()</span>\n            <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">_get_env_from</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dryrun</span>\n            <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"n\">system</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">)</span>\n            <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">access</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;write&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;read&quot;</span><span class=\"p\">]</span>\n        <span class=\"p\">):</span>\n            <span class=\"c1\"># don&#39;t move the function to a system</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">env</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n        <span class=\"c1\"># We need to backup the system here so the __getstate__ method of the cluster</span>\n        <span class=\"c1\"># doesn&#39;t wipe the client of this function&#39;s cluster when deepcopy copies it.</span>\n        <span class=\"n\">hw_backup</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">new_function</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"n\">hw_backup</span>\n\n        <span class=\"n\">new_function</span><span class=\"o\">.</span><span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"n\">_get_cluster_from</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dryrun</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">system</span> <span class=\"k\">else</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Setting up Function on cluster.&quot;</span><span class=\"p\">)</span>\n        <span class=\"c1\"># To up cluster in case it&#39;s not yet up</span>\n        <span class=\"n\">new_function</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">check_server</span><span class=\"p\">()</span>\n        <span class=\"n\">new_function</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">new_function</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fn_pointers</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n        <span class=\"c1\"># TODO</span>\n        <span class=\"c1\"># env.name = env.name or (new_function.name + &quot;_env&quot;)</span>\n        <span class=\"n\">new_env</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"n\">new_function</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">)</span>\n        <span class=\"n\">new_function</span><span class=\"o\">.</span><span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">new_env</span>\n\n        <span class=\"n\">new_function</span><span class=\"o\">.</span><span class=\"n\">dryrun</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">put_resource</span><span class=\"p\">(</span><span class=\"n\">new_function</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Function setup complete.&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">new_function</span></div>\n\n    <span class=\"c1\"># ----------------- Function call methods -----------------</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Any</span><span class=\"p\">:</span>\n        <span class=\"sd\">&quot;&quot;&quot;Call the function on its system</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">             *args: Optional args for the Function</span>\n<span class=\"sd\">             stream_logs (bool): Whether to stream the logs from the Function&#39;s execution.</span>\n<span class=\"sd\">                Defaults to ``True``.</span>\n<span class=\"sd\">             run_name (Optional[str]): Name of the Run to create. If provided, a Run will be created</span>\n<span class=\"sd\">                for this function call, which will be executed synchronously on the cluster before returning its result</span>\n<span class=\"sd\">             **kwargs: Optional kwargs for the Function</span>\n\n<span class=\"sd\">        Returns:</span>\n<span class=\"sd\">            The Function&#39;s return value</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">call</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Any</span><span class=\"p\">:</span>\n        <span class=\"c1\"># We need this strictly because Module&#39;s __getattribute__ overload can&#39;t pick up the __call__ method</span>\n        <span class=\"n\">fn</span> <span class=\"o\">=</span> <span class=\"n\">get_fn_from_pointers</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fn_pointers</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">fn</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"Function.repeat\"><a class=\"viewcode-back\" href=\"../../../../api/python/function/#runhouse.Function.repeat\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">repeat</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">num_repeats</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Repeat the Function call multiple times.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            num_repeats (int): Number of times to repeat the Function call.</span>\n<span class=\"sd\">            *args: Positional arguments to pass to the Function</span>\n<span class=\"sd\">            **kwargs: Keyword arguments to pass to the Function</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; remote_fn = rh.function(local_fn).to(gpu)</span>\n<span class=\"sd\">            &gt;&gt;&gt; remote_fn.repeat(num_repeats=5)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">access</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">ResourceAccess</span><span class=\"o\">.</span><span class=\"n\">WRITE</span><span class=\"p\">,</span> <span class=\"n\">ResourceAccess</span><span class=\"o\">.</span><span class=\"n\">READ</span><span class=\"p\">]:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_call_fn_with_ssh_access</span><span class=\"p\">(</span>\n                <span class=\"n\">fn_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;repeat&quot;</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">num_repeats</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">],</span> <span class=\"n\">kwargs</span><span class=\"o\">=</span><span class=\"n\">kwargs</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Function.repeat only works with Write or Read access, not Proxy access&quot;</span>\n            <span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Function.map\"><a class=\"viewcode-back\" href=\"../../../../api/python/function/#runhouse.Function.map\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">map</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Map a function over a list of arguments.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; def local_sum(arg1, arg2, arg3):</span>\n<span class=\"sd\">            &gt;&gt;&gt;     return arg1 + arg2 + arg3</span>\n<span class=\"sd\">            &gt;&gt;&gt;</span>\n<span class=\"sd\">            &gt;&gt;&gt; remote_fn = rh.function(local_fn).to(gpu)</span>\n<span class=\"sd\">            &gt;&gt;&gt; remote_fn.map([1, 2], [1, 4], [2, 3])</span>\n<span class=\"sd\">            &gt;&gt;&gt; # output: [4, 9]</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">arg_list</span> <span class=\"o\">=</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">access</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">ResourceAccess</span><span class=\"o\">.</span><span class=\"n\">WRITE</span><span class=\"p\">,</span> <span class=\"n\">ResourceAccess</span><span class=\"o\">.</span><span class=\"n\">READ</span><span class=\"p\">]:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_call_fn_with_ssh_access</span><span class=\"p\">(</span>\n                <span class=\"n\">fn_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;starmap&quot;</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"n\">arg_list</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"o\">=</span><span class=\"n\">kwargs</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Function.map only works with Write or Read access, not Proxy access&quot;</span>\n            <span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Function.starmap\"><a class=\"viewcode-back\" href=\"../../../../api/python/function/#runhouse.Function.starmap\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">starmap</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">args_lists</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Like :func:`map` except that the elements of the iterable are expected to be iterables</span>\n<span class=\"sd\">        that are unpacked as arguments. An iterable of [(1,2), (3, 4)] results in [func(1,2), func(3,4)].</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; arg_list = [(1,2), (3, 4)]</span>\n<span class=\"sd\">            &gt;&gt;&gt; # runs the function twice, once with args (1, 2) and once with args (3, 4)</span>\n<span class=\"sd\">            &gt;&gt;&gt; remote_fn.starmap(arg_list)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">access</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">ResourceAccess</span><span class=\"o\">.</span><span class=\"n\">WRITE</span><span class=\"p\">,</span> <span class=\"n\">ResourceAccess</span><span class=\"o\">.</span><span class=\"n\">READ</span><span class=\"p\">]:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_call_fn_with_ssh_access</span><span class=\"p\">(</span>\n                <span class=\"n\">fn_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;starmap&quot;</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"n\">args_lists</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"o\">=</span><span class=\"n\">kwargs</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Function.starmap only works with Write or Read access, not Proxy access&quot;</span>\n            <span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Function.enqueue\"><a class=\"viewcode-back\" href=\"../../../../api/python/function/#runhouse.Function.enqueue\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">enqueue</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">resources</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Enqueue a Function call to be run later. This ensures a function call doesn\u2019t run simultaneously with other</span>\n<span class=\"sd\">        calls, but will wait until the execution completes.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # This will run the functions sequentially</span>\n<span class=\"sd\">            &gt;&gt;&gt; [remote_fn.enqueue() for _ in range(3)]</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># Add resources one-off without setting as a Function param</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">access</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">ResourceAccess</span><span class=\"o\">.</span><span class=\"n\">WRITE</span><span class=\"p\">,</span> <span class=\"n\">ResourceAccess</span><span class=\"o\">.</span><span class=\"n\">READ</span><span class=\"p\">]:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_call_fn_with_ssh_access</span><span class=\"p\">(</span>\n                <span class=\"n\">fn_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;queue&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">resources</span><span class=\"o\">=</span><span class=\"n\">resources</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">resources</span><span class=\"p\">,</span>\n                <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"n\">args</span><span class=\"p\">,</span>\n                <span class=\"n\">kwargs</span><span class=\"o\">=</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Function.enqueue only works with Write or Read access, not Proxy access&quot;</span>\n            <span class=\"p\">)</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">remote</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">local</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"o\">.</span><span class=\"n\">remote</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">obj</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">local</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">key</span>\n\n<div class=\"viewcode-block\" id=\"Function.get\"><a class=\"viewcode-back\" href=\"../../../../api/python/function/#runhouse.Function.get\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">run_key</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Get the result of a Function call that was submitted as async using `remote`.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            run_key: A single or list of runhouse run_key strings returned by a Function.remote() call. The ObjectRefs</span>\n<span class=\"sd\">                must be from the cluster that this Function is running on.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; remote_fn = rh.function(local_fn).to(gpu)</span>\n<span class=\"sd\">            &gt;&gt;&gt; remote_fn_run = remote_fn.run()</span>\n<span class=\"sd\">            &gt;&gt;&gt; remote_fn.get(remote_fn_run.name)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">run_key</span><span class=\"p\">)</span></div>\n\n    <span class=\"c1\"># TODO remove</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_call_fn_with_ssh_access</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">fn_type</span><span class=\"p\">,</span> <span class=\"n\">resources</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">run_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"o\">=</span><span class=\"kc\">None</span>\n    <span class=\"p\">):</span>\n        <span class=\"n\">resources</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"n\">resources</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">resources</span>\n        <span class=\"p\">)</span>  <span class=\"c1\"># Allow for passing in one-off resources for this specific call</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"ow\">or</span> <span class=\"s2\">&quot;anonymous function&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fn_pointers</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;No fn pointers saved for </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"p\">[</span><span class=\"n\">relative_path</span><span class=\"p\">,</span> <span class=\"n\">module_name</span><span class=\"p\">,</span> <span class=\"n\">fn_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fn_pointers</span>\n\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"ow\">or</span> <span class=\"n\">fn_name</span> <span class=\"ow\">or</span> <span class=\"s2\">&quot;anonymous function&quot;</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Running </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\"> via HTTP&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">env_name</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">env_name</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">env</span> <span class=\"ow\">and</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"n\">CondaEnv</span><span class=\"p\">))</span> <span class=\"k\">else</span> <span class=\"kc\">None</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">env_vars</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">env_vars</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">env</span> <span class=\"k\">else</span> <span class=\"p\">{}</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">env_vars</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n            <span class=\"n\">env_vars</span> <span class=\"o\">=</span> <span class=\"n\">_env_vars_from_file</span><span class=\"p\">(</span><span class=\"n\">env_vars</span><span class=\"p\">)</span>\n\n        <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">_run_module</span><span class=\"p\">(</span>\n            <span class=\"n\">relative_path</span><span class=\"p\">,</span>\n            <span class=\"n\">module_name</span><span class=\"p\">,</span>\n            <span class=\"n\">fn_name</span><span class=\"p\">,</span>\n            <span class=\"n\">fn_type</span><span class=\"p\">,</span>\n            <span class=\"n\">resources</span><span class=\"p\">,</span>\n            <span class=\"n\">env_name</span><span class=\"p\">,</span>\n            <span class=\"n\">env_vars</span><span class=\"p\">,</span>\n            <span class=\"n\">run_name</span><span class=\"p\">,</span>\n            <span class=\"n\">args</span><span class=\"p\">,</span>\n            <span class=\"n\">kwargs</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">config_for_rns</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">config_for_rns</span>\n        <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span>\n            <span class=\"p\">{</span>\n                <span class=\"s2\">&quot;fn_pointers&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fn_pointers</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;resources&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">resources</span><span class=\"p\">,</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">config</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_save_sub_resources</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n<div class=\"viewcode-block\" id=\"Function.send_secrets\"><a class=\"viewcode-back\" href=\"../../../../api/python/function/#runhouse.Function.send_secrets\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">send_secrets</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">providers</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Send secrets to the system.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; remote_fn.send_secrets(providers=[&quot;aws&quot;, &quot;lambda&quot;])</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">sync_secrets</span><span class=\"p\">(</span><span class=\"n\">providers</span><span class=\"o\">=</span><span class=\"n\">providers</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Function.http_url\"><a class=\"viewcode-back\" href=\"../../../../api/python/function/#runhouse.Function.http_url\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">http_url</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">curl_command</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return the endpoint needed to run the Function on the remote cluster, or provide the curl command if requested.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span><span class=\"s2\">&quot;http_url not yet implemented for Function&quot;</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Function.notebook\"><a class=\"viewcode-back\" href=\"../../../../api/python/function/#runhouse.Function.notebook\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">notebook</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">persist</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">sync_package_on_close</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">port_forward</span><span class=\"o\">=</span><span class=\"mi\">8888</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Tunnel into and launch notebook from the system.&quot;&quot;&quot;</span>\n        <span class=\"c1\"># Roughly trying to follow:</span>\n        <span class=\"c1\"># https://towardsdatascience.com/using-jupyter-notebook-running-on-a-remote-docker-container-via-ssh-ea2c3ebb9055</span>\n        <span class=\"c1\"># https://docs.ray.io/en/latest/ray-core/using-ray-with-jupyter.html</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Cannot SSH, running locally&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">tunnel</span><span class=\"p\">,</span> <span class=\"n\">port_fwd</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">ssh_tunnel</span><span class=\"p\">(</span>\n            <span class=\"n\">local_port</span><span class=\"o\">=</span><span class=\"n\">port_forward</span><span class=\"p\">,</span> <span class=\"n\">num_ports_to_try</span><span class=\"o\">=</span><span class=\"mi\">10</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">install_cmd</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;pip install jupyterlab&quot;</span>\n            <span class=\"n\">jupyter_cmd</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;jupyter lab --port </span><span class=\"si\">{</span><span class=\"n\">port_fwd</span><span class=\"si\">}</span><span class=\"s2\"> --no-browser&quot;</span>\n            <span class=\"c1\"># port_fwd = &#39;-L localhost:8888:localhost:8888 &#39;  # TOOD may need when we add docker support</span>\n            <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">pause_autostop</span><span class=\"p\">():</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">commands</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">install_cmd</span><span class=\"p\">,</span> <span class=\"n\">jupyter_cmd</span><span class=\"p\">],</span> <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n        <span class=\"k\">finally</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">sync_package_on_close</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">sync_package_on_close</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;./&quot;</span><span class=\"p\">:</span>\n                    <span class=\"n\">sync_package_on_close</span> <span class=\"o\">=</span> <span class=\"n\">rh_config</span><span class=\"o\">.</span><span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">locate_working_dir</span><span class=\"p\">()</span>\n                <span class=\"kn\">from</span> <span class=\"nn\">.folders</span> <span class=\"kn\">import</span> <span class=\"n\">folder</span>\n\n                <span class=\"n\">folder</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">sync_package_on_close</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"s2\">&quot;here&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">persist</span><span class=\"p\">:</span>\n                <span class=\"n\">tunnel</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n                <span class=\"n\">kill_jupyter_cmd</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;jupyter notebook stop </span><span class=\"si\">{</span><span class=\"n\">port_fwd</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">commands</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">kill_jupyter_cmd</span><span class=\"p\">])</span></div>\n\n<div class=\"viewcode-block\" id=\"Function.get_or_call\"><a class=\"viewcode-back\" href=\"../../../../api/python/function/#runhouse.Function.get_or_call\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_or_call</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">run_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Any</span><span class=\"p\">:</span>\n        <span class=\"sd\">&quot;&quot;&quot;Check if Run was already completed, and if so return the result.</span>\n<span class=\"sd\">        If no cached Run is found on the cluster, create a new one and run it synchronously before</span>\n<span class=\"sd\">        returning its result.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            run_name (Optional[str]): Name of a particular run for this function.</span>\n<span class=\"sd\">                If not provided will use the function&#39;s name.</span>\n<span class=\"sd\">            *args: Arguments to pass to the function for the run (relevant if creating a new run).</span>\n<span class=\"sd\">            **kwargs: Keyword arguments to pass to the function for the run (relevant if creating a new run).</span>\n\n<span class=\"sd\">        Returns:</span>\n<span class=\"sd\">            Any: Result of the Run</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # previously, remote_fn.run(arg1, arg2, run_name=&quot;my_async_run&quot;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; remote_fn.get_or_call()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"n\">run_name</span> <span class=\"o\">=</span> <span class=\"n\">run_name</span> <span class=\"ow\">or</span> <span class=\"n\">_generate_default_name</span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n        <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_call_fn_with_ssh_access</span><span class=\"p\">(</span>\n            <span class=\"n\">fn_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;get_or_call&quot;</span><span class=\"p\">,</span> <span class=\"n\">run_name</span><span class=\"o\">=</span><span class=\"n\">run_name</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"o\">=</span><span class=\"n\">kwargs</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">res</span></div>\n\n<div class=\"viewcode-block\" id=\"Function.get_or_run\"><a class=\"viewcode-back\" href=\"../../../../api/python/function/#runhouse.Function.get_or_run\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_or_run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">run_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"s2\">&quot;Run&quot;</span><span class=\"p\">:</span>\n        <span class=\"sd\">&quot;&quot;&quot;Check if Run was already completed. If no cached Run is found on the cluster, create a new one.</span>\n\n<span class=\"sd\">        Note: If the Run has already completed, will not trigger a new Run.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            run_name (Optional[str]): Name of a particular run for this function.</span>\n<span class=\"sd\">                If not provided will use the function&#39;s name.</span>\n<span class=\"sd\">            *args: Arguments to pass to the function for the run (relevant if creating a new run).</span>\n<span class=\"sd\">            **kwargs: Keyword arguments to pass to the function for the run (relevant if creating a new run).</span>\n\n<span class=\"sd\">        Returns:</span>\n<span class=\"sd\">            Run: Run object</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # previously, remote_fn.run(arg1, arg2, run_name=&quot;my_async_run&quot;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; remote_fn.get_or_call()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">runhouse</span> <span class=\"kn\">import</span> <span class=\"n\">Run</span>\n\n        <span class=\"n\">run_name</span> <span class=\"o\">=</span> <span class=\"n\">run_name</span> <span class=\"ow\">or</span> <span class=\"n\">_generate_default_name</span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">run_name</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;latest&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Latest not currently supported&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">completed_run</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Run&quot;</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_call_fn_with_ssh_access</span><span class=\"p\">(</span>\n            <span class=\"n\">fn_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;get_or_run&quot;</span><span class=\"p\">,</span> <span class=\"n\">run_name</span><span class=\"o\">=</span><span class=\"n\">run_name</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"o\">=</span><span class=\"n\">kwargs</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">completed_run</span></div>\n\n<div class=\"viewcode-block\" id=\"Function.keep_warm\"><a class=\"viewcode-back\" href=\"../../../../api/python/function/#runhouse.Function.keep_warm\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">keep_warm</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">autostop_mins</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Keep the system warm for autostop_mins. If autostop_mins is ``None`` or -1, keep warm indefinitely.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # keep gpu warm for 30 mins</span>\n<span class=\"sd\">            &gt;&gt;&gt; remote_fn = rh.function(local_fn).to(gpu)</span>\n<span class=\"sd\">            &gt;&gt;&gt; remote_fn.keep_warm(autostop_mins=30)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">autostop_mins</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Keeping </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\"> indefinitely warm&quot;</span><span class=\"p\">)</span>\n            <span class=\"c1\"># keep indefinitely warm if user doesn&#39;t specify</span>\n            <span class=\"n\">autostop_mins</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">keep_warm</span><span class=\"p\">(</span><span class=\"n\">autostop_mins</span><span class=\"o\">=</span><span class=\"n\">autostop_mins</span><span class=\"p\">)</span></div>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_handle_nb_fn</span><span class=\"p\">(</span><span class=\"n\">fn</span><span class=\"p\">,</span> <span class=\"n\">fn_pointers</span><span class=\"p\">,</span> <span class=\"n\">serialize_notebook_fn</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Handle the case where the user passes in a notebook function&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">serialize_notebook_fn</span><span class=\"p\">:</span>\n            <span class=\"c1\"># This will all be cloudpickled by the RPC client and unpickled by the RPC server</span>\n            <span class=\"c1\"># Note that this means the function cannot be saved, and it&#39;s better that way because</span>\n            <span class=\"c1\"># pickling functions is not meant for long term storage. Case in point, this method will be</span>\n            <span class=\"c1\"># sensitive to differences in minor Python versions between the serializing and deserializing envs.</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;notebook&quot;</span><span class=\"p\">,</span> <span class=\"n\">fn</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">module_path</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"o\">.</span><span class=\"n\">cwd</span><span class=\"p\">()</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">_fn.py&quot;</span> <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;sent_fn.py&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;Writing out function function to </span><span class=\"si\">{</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">module_path</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">. Please make &quot;</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;sure the function does not rely on any local variables, &quot;</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;including imports (which should be moved inside the function body).&quot;</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n                <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;You should name Functions that are created in notebooks to avoid naming collisions &quot;</span>\n                    <span class=\"s2\">&quot;between the modules that are created to hold their functions &quot;</span>\n                    <span class=\"s1\">&#39;(i.e. &quot;sent_fn.py&quot; errors.&#39;</span>\n                <span class=\"p\">)</span>\n            <span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">getsource</span><span class=\"p\">(</span><span class=\"n\">fn</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n            <span class=\"k\">with</span> <span class=\"n\">module_path</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s2\">&quot;w&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n                <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">fn_pointers</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">module_path</span><span class=\"o\">.</span><span class=\"n\">stem</span><span class=\"p\">,</span> <span class=\"n\">fn_pointers</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span></div>\n            <span class=\"c1\"># from importlib.util import spec_from_file_location, module_from_spec</span>\n            <span class=\"c1\"># spec = spec_from_file_location(config[&#39;name&#39;], str(module_path))</span>\n            <span class=\"c1\"># module = module_from_spec(spec)</span>\n            <span class=\"c1\"># spec.loader.exec_module(module)</span>\n            <span class=\"c1\"># new_fn = getattr(module, fn_pointers[2])</span>\n            <span class=\"c1\"># fn_pointers = Function._extract_fn_paths(raw_fn=new_fn, reqs=config[&#39;reqs&#39;])</span>\n\n\n<div class=\"viewcode-block\" id=\"function\"><a class=\"viewcode-back\" href=\"../../../../api/python/function/#runhouse.function\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">function</span><span class=\"p\">(</span>\n    <span class=\"n\">fn</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Callable</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">system</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">Env</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">resources</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">dryrun</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">load_secrets</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">serialize_notebook_fn</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"c1\"># args below are deprecated</span>\n    <span class=\"n\">reqs</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">setup_cmds</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n<span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Builds an instance of :class:`Function`.</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        fn (Optional[str or Callable]): The function to execute on the remote system when the function is called.</span>\n<span class=\"sd\">        name (Optional[str]): Name of the Function to create or retrieve.</span>\n<span class=\"sd\">            This can be either from a local config or from the RNS.</span>\n<span class=\"sd\">        system (Optional[str or Cluster]): Hardware (cluster) on which to execute the Function.</span>\n<span class=\"sd\">            This can be either the string name of a Cluster object, or a Cluster object.</span>\n<span class=\"sd\">        env (Optional[List[str] or Env or str]): List of requirements to install on the remote cluster, or path to the</span>\n<span class=\"sd\">            requirements.txt file, or Env object or string name of an Env object.</span>\n<span class=\"sd\">        resources (Optional[dict]): Optional number (int) of resources needed to run the Function on the Cluster.</span>\n<span class=\"sd\">            Keys must be ``num_cpus`` and ``num_gpus``.</span>\n<span class=\"sd\">        dryrun (bool): Whether to create the Function if it doesn&#39;t exist, or load the Function object as a dryrun.</span>\n<span class=\"sd\">            (Default: ``False``)</span>\n<span class=\"sd\">        load_secrets (bool): Whether or not to send secrets; only applicable if `dryrun` is set to ``False``.</span>\n<span class=\"sd\">            (Default: ``False``)</span>\n<span class=\"sd\">        serialize_notebook_fn (bool): If function is of a notebook setting, whether or not to serialized the function.</span>\n<span class=\"sd\">            (Default: ``False``)</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        Function: The resulting Function object.</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; import runhouse as rh</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; cluster = rh.cluster(name=&quot;my_cluster&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; def sum(a, b):</span>\n<span class=\"sd\">        &gt;&gt;&gt;    return a + b</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; summer = rh.function(fn=sum, name=&quot;my_func&quot;).to(cluster, env=[&#39;requirements.txt&#39;]).save()</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; # using the function</span>\n<span class=\"sd\">        &gt;&gt;&gt; res = summer(5, 8)  # returns 13</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; # Load function from above</span>\n<span class=\"sd\">        &gt;&gt;&gt; reloaded_function = rh.function(name=&quot;my_func&quot;)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"nb\">any</span><span class=\"p\">([</span><span class=\"n\">fn</span><span class=\"p\">,</span> <span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"n\">resources</span><span class=\"p\">]):</span>\n        <span class=\"c1\"># Try reloading existing function</span>\n        <span class=\"k\">return</span> <span class=\"n\">Function</span><span class=\"o\">.</span><span class=\"n\">from_name</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">setup_cmds</span><span class=\"p\">:</span>\n        <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;``setup_cmds`` argument has been deprecated. &quot;</span>\n            <span class=\"s2\">&quot;Please pass in setup commands to rh.Env corresponding to the function instead.&quot;</span>\n        <span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">reqs</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;``reqs`` argument has been deprecated. Please use ``env`` instead.&quot;</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">Env</span><span class=\"p\">(</span><span class=\"n\">reqs</span><span class=\"o\">=</span><span class=\"n\">reqs</span><span class=\"p\">,</span> <span class=\"n\">setup_cmds</span><span class=\"o\">=</span><span class=\"n\">setup_cmds</span><span class=\"p\">,</span> <span class=\"n\">working_dir</span><span class=\"o\">=</span><span class=\"s2\">&quot;./&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"n\">Env</span><span class=\"p\">):</span>\n        <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">_get_env_from</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">Env</span><span class=\"p\">()</span>\n        <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">working_dir</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">working_dir</span> <span class=\"ow\">or</span> <span class=\"s2\">&quot;./&quot;</span>\n\n    <span class=\"n\">fn_pointers</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"k\">if</span> <span class=\"n\">callable</span><span class=\"p\">(</span><span class=\"n\">fn</span><span class=\"p\">):</span>\n        <span class=\"n\">fn_pointers</span> <span class=\"o\">=</span> <span class=\"n\">Function</span><span class=\"o\">.</span><span class=\"n\">_extract_pointers</span><span class=\"p\">(</span><span class=\"n\">fn</span><span class=\"p\">,</span> <span class=\"n\">reqs</span><span class=\"o\">=</span><span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">reqs</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">fn_pointers</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;notebook&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">fn_pointers</span> <span class=\"o\">=</span> <span class=\"n\">Function</span><span class=\"o\">.</span><span class=\"n\">_handle_nb_fn</span><span class=\"p\">(</span>\n                <span class=\"n\">fn</span><span class=\"p\">,</span>\n                <span class=\"n\">fn_pointers</span><span class=\"o\">=</span><span class=\"n\">fn_pointers</span><span class=\"p\">,</span>\n                <span class=\"n\">serialize_notebook_fn</span><span class=\"o\">=</span><span class=\"n\">serialize_notebook_fn</span><span class=\"p\">,</span>\n                <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">fn_pointers</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"ow\">or</span> <span class=\"n\">name</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">fn</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Url must match a regex of the form</span>\n        <span class=\"c1\"># &#39;https://github.com/username/repo_name/blob/branch_name/path/to/file.py:func_name&#39;</span>\n        <span class=\"c1\"># Use a regex to extract username, repo_name, branch_name, path/to/file.py, and func_name</span>\n        <span class=\"n\">pattern</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"sa\">r</span><span class=\"s2\">&quot;https://github\\.com/(?P&lt;username&gt;[^/]+)/(?P&lt;repo_name&gt;[^/]+)/blob/&quot;</span>\n            <span class=\"sa\">r</span><span class=\"s2\">&quot;(?P&lt;branch_name&gt;[^/]+)/(?P&lt;path&gt;[^:]+):(?P&lt;func_name&gt;.+)&quot;</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">match</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">,</span> <span class=\"n\">fn</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">match</span><span class=\"p\">:</span>\n            <span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"s2\">&quot;username&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">repo_name</span> <span class=\"o\">=</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"s2\">&quot;repo_name&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">branch_name</span> <span class=\"o\">=</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"s2\">&quot;branch_name&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"s2\">&quot;path&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">func_name</span> <span class=\"o\">=</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"s2\">&quot;func_name&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;fn must be a callable or string of the form &quot;</span>\n                <span class=\"s1\">&#39;&quot;https://github.com/username/repo_name/blob/branch_name/path/to/file.py:func_name&quot;&#39;</span>\n            <span class=\"p\">)</span>\n        <span class=\"n\">module_name</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">stem</span>\n        <span class=\"n\">relative_path</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">repo_name</span> <span class=\"o\">/</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"p\">)</span>\n        <span class=\"n\">fn_pointers</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">relative_path</span><span class=\"p\">,</span> <span class=\"n\">module_name</span><span class=\"p\">,</span> <span class=\"n\">func_name</span><span class=\"p\">)</span>\n        <span class=\"c1\"># TODO [DG] check if the user already added this in their reqs</span>\n        <span class=\"n\">repo_package</span> <span class=\"o\">=</span> <span class=\"n\">git_package</span><span class=\"p\">(</span>\n            <span class=\"n\">git_url</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s2\">&quot;https://github.com/</span><span class=\"si\">{</span><span class=\"n\">username</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">{</span><span class=\"n\">repo_name</span><span class=\"si\">}</span><span class=\"s2\">.git&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">revision</span><span class=\"o\">=</span><span class=\"n\">branch_name</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">reqs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">repo_package</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">reqs</span>\n\n    <span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"n\">_get_cluster_from</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">)</span>\n\n    <span class=\"n\">new_function</span> <span class=\"o\">=</span> <span class=\"n\">Function</span><span class=\"p\">(</span>\n        <span class=\"n\">fn_pointers</span><span class=\"o\">=</span><span class=\"n\">fn_pointers</span><span class=\"p\">,</span>\n        <span class=\"n\">resources</span><span class=\"o\">=</span><span class=\"n\">resources</span><span class=\"p\">,</span>\n        <span class=\"n\">access</span><span class=\"o\">=</span><span class=\"n\">Function</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_ACCESS</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span>\n        <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"o\">=</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"n\">env</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">load_secrets</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">dryrun</span><span class=\"p\">:</span>\n        <span class=\"n\">new_function</span><span class=\"o\">.</span><span class=\"n\">send_secrets</span><span class=\"p\">()</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">new_function</span></div>\n</pre></div>", "current_page_name": "_modules/runhouse/rns/function", "sidebars": ["about.html", "navigation.html", "relations.html", "searchbox.html", "donate.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12"}