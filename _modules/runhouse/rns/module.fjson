{"parents": [{"link": "../../../", "title": "Module code"}], "title": "runhouse.rns.module", "body": "<h1>Source code for runhouse.rns.module</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">copy</span>\n<span class=\"kn\">import</span> <span class=\"nn\">importlib</span>\n<span class=\"kn\">import</span> <span class=\"nn\">inspect</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">from</span> <span class=\"nn\">concurrent.futures</span> <span class=\"kn\">import</span> <span class=\"n\">ThreadPoolExecutor</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">,</span> <span class=\"n\">Type</span><span class=\"p\">,</span> <span class=\"n\">Union</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.rh_config</span> <span class=\"kn\">import</span> <span class=\"n\">obj_store</span><span class=\"p\">,</span> <span class=\"n\">rns_client</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.rns.envs</span> <span class=\"kn\">import</span> <span class=\"n\">Env</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.rns.hardware.cluster</span> <span class=\"kn\">import</span> <span class=\"n\">Cluster</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.rns.packages</span> <span class=\"kn\">import</span> <span class=\"n\">Package</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.rns.resource</span> <span class=\"kn\">import</span> <span class=\"n\">Resource</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.rns.utils.env</span> <span class=\"kn\">import</span> <span class=\"n\">_get_env_from</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.rns.utils.hardware</span> <span class=\"kn\">import</span> <span class=\"n\">_current_cluster</span><span class=\"p\">,</span> <span class=\"n\">_get_cluster_from</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.rns.utils.names</span> <span class=\"kn\">import</span> <span class=\"n\">_generate_default_name</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># These are methods that the Module&#39;s __getattribute__ logic should not intercept to run remotely</span>\n<span class=\"n\">LOCAL_METHODS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s2\">&quot;RESOURCE_TYPE&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;__class__&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;__delattr__&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;__dict__&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;__dir__&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;__doc__&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;__eq__&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;__format__&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;__ge__&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;__gt__&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;__hash__&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;__init__&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;__init_subclass__&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;__le__&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;__lt__&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;__module__&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;__ne__&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;__new__&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;__reduce__&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;__reduce_ex__&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;__repr__&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;__setattr__&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;set_async&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;__getattribute__&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;__sizeof__&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;__str__&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;__subclasshook__&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;__weakref__&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;_check_for_child_configs&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;_cls_pointers&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;_env&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;_extract_pointers&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;_name&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;_resource_string_for_subconfig&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;_rns_folder&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;_save_sub_resources&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;_system&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;config_for_rns&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;delete_configs&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;dryrun&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;env&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;from_config&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;from_name&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;history&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;is_local&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;remote&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;local&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;resolve&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;_resolve&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;resolved_state&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;fetch&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;fetch_async&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;rename&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;rns_address&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;save&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;save_attrs_to_config&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;share&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;system&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;to&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;unname&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;provenance&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n\n\n<div class=\"viewcode-block\" id=\"Module\"><a class=\"viewcode-back\" href=\"../../../../api/python/module/#runhouse.Module\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Module</span><span class=\"p\">(</span><span class=\"n\">Resource</span><span class=\"p\">):</span>\n    <span class=\"n\">RESOURCE_TYPE</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;module&quot;</span>\n\n<div class=\"viewcode-block\" id=\"Module.__init__\"><a class=\"viewcode-back\" href=\"../../../../api/python/module/#runhouse.Module.__init__\">[docs]</a>    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">cls_pointers</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">system</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Cluster</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Env</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">dryrun</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">provenance</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Runhouse Module object</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">,</span> <span class=\"n\">provenance</span><span class=\"o\">=</span><span class=\"n\">provenance</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_system</span> <span class=\"o\">=</span> <span class=\"n\">_get_cluster_from</span><span class=\"p\">(</span>\n            <span class=\"n\">system</span> <span class=\"ow\">or</span> <span class=\"n\">_current_cluster</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s2\">&quot;config&quot;</span><span class=\"p\">),</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_env</span> <span class=\"o\">=</span> <span class=\"n\">env</span>\n        <span class=\"n\">is_builtin</span> <span class=\"o\">=</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"p\">[</span><span class=\"s2\">&quot;runhouse&quot;</span><span class=\"p\">],</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__qualname__</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">cls_pointers</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">is_builtin</span><span class=\"p\">:</span>\n            <span class=\"c1\"># When creating a module as a subclass of rh.Module, we need to collect pointers here</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_env</span> <span class=\"o\">=</span> <span class=\"n\">env</span> <span class=\"ow\">or</span> <span class=\"n\">Env</span><span class=\"p\">()</span>\n            <span class=\"c1\"># If we&#39;re creating pointers, we&#39;re also local to the class definition and package, so it should be</span>\n            <span class=\"c1\"># set as the workdir (we can do this in a fancier way later)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_env</span><span class=\"o\">.</span><span class=\"n\">working_dir</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_env</span><span class=\"o\">.</span><span class=\"n\">working_dir</span> <span class=\"ow\">or</span> <span class=\"s2\">&quot;./&quot;</span>\n            <span class=\"n\">cls_pointers</span> <span class=\"o\">=</span> <span class=\"n\">Module</span><span class=\"o\">.</span><span class=\"n\">_extract_pointers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"p\">,</span> <span class=\"n\">reqs</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_env</span><span class=\"o\">.</span><span class=\"n\">reqs</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cls_pointers</span> <span class=\"o\">=</span> <span class=\"n\">cls_pointers</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_resolve</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></div>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">config_for_rns</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Cannot save an in-memory local module to RNS. Please send the module to a local &quot;</span>\n                <span class=\"s2\">&quot;path or system first.&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">config_for_rns</span>\n        <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;system&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_resource_string_for_subconfig</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span> <span class=\"k\">else</span> <span class=\"kc\">None</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;env&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_resource_string_for_subconfig</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">env</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">env</span> <span class=\"k\">else</span> <span class=\"kc\">None</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cls_pointers</span><span class=\"p\">:</span>\n            <span class=\"c1\"># For some reason sometimes this is coming back as a string, so we force it into a tuple</span>\n            <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;cls_pointers&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cls_pointers</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">config</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_config</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;cls_pointers&quot;</span><span class=\"p\">):</span>\n            <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;resource_subtype&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Constructing module from pointers </span><span class=\"si\">{</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s1\">&#39;cls_pointers&#39;</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n            <span class=\"p\">(</span><span class=\"n\">module_path</span><span class=\"p\">,</span> <span class=\"n\">module_name</span><span class=\"p\">,</span> <span class=\"n\">class_name</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;cls_pointers&quot;</span><span class=\"p\">]</span>\n            <span class=\"n\">module_cls</span> <span class=\"o\">=</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">_get_obj_from_pointers</span><span class=\"p\">(</span>\n                <span class=\"n\">module_path</span><span class=\"p\">,</span> <span class=\"n\">module_name</span><span class=\"p\">,</span> <span class=\"n\">class_name</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">issubclass</span><span class=\"p\">(</span><span class=\"n\">module_cls</span><span class=\"p\">,</span> <span class=\"n\">Module</span><span class=\"p\">):</span>\n                <span class=\"c1\"># Case when module was created through rh.module(new_class) factory, and needs to be</span>\n                <span class=\"c1\"># made into a subclass of rh.Module. We&#39;ll follow the same flow as the subclass-created module below,</span>\n                <span class=\"c1\"># where we don&#39;t call __init__ explicitly, because __init__ will call the subclass&#39;s init and this may</span>\n                <span class=\"c1\"># a &quot;type&quot; module rather than an &quot;instance&quot;. The user might instantiate it later, or it may be</span>\n                <span class=\"c1\"># populated with attributes by the servlet&#39;s put_resource.</span>\n                <span class=\"n\">module_cls</span> <span class=\"o\">=</span> <span class=\"n\">_module_subclass_factory</span><span class=\"p\">(</span>\n                    <span class=\"n\">module_cls</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;cls_pointers&quot;</span><span class=\"p\">)</span>\n                <span class=\"p\">)</span>\n\n            <span class=\"c1\"># Module created as subclass of rh.Module may not have rh.Module&#39;s</span>\n            <span class=\"c1\"># constructor signature (e.g. system, env, etc.), so assign them manually</span>\n            <span class=\"c1\"># We don&#39;t call __init__ here because we don&#39;t know the signature of the subclass&#39;s __init__</span>\n            <span class=\"c1\"># If this resource was put on a cluster with put_resource, the servlet will be populating the rest</span>\n            <span class=\"c1\"># of the class-specific attributes.</span>\n            <span class=\"n\">new_module</span> <span class=\"o\">=</span> <span class=\"n\">module_cls</span><span class=\"o\">.</span><span class=\"fm\">__new__</span><span class=\"p\">(</span><span class=\"n\">module_cls</span><span class=\"p\">)</span>\n            <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">module_cls</span><span class=\"o\">.</span><span class=\"n\">_check_for_child_configs</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n            <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;system&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n            <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;env&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n            <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n            <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">_cls_pointers</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;cls_pointers&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n            <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">dryrun</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;dryrun&quot;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n            <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">provenance</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;provenance&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">new_module</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;resource_subtype&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;module&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">Module</span><span class=\"o\">.</span><span class=\"n\">_check_for_child_configs</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">Module</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># If there are no class pointers, we assume the module is a built-in rh.Module subclass</span>\n        <span class=\"n\">resource_class</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span>\n            <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"p\">[</span><span class=\"s2\">&quot;runhouse&quot;</span><span class=\"p\">],</span>\n            <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;resource_subtype&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">capitalize</span><span class=\"p\">(),</span>\n            <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">resource_class</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;Could not find module associated with </span><span class=\"si\">{</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s1\">&#39;resource_subtype&#39;</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">resource_class</span><span class=\"o\">.</span><span class=\"n\">_check_for_child_configs</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">resource_class</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_check_for_child_configs</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Overload by child resources to load any resources they hold internally.&quot;&quot;&quot;</span>\n        <span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;system&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;system&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">_get_cluster_from</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">)</span>\n        <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;env&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;env&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">_get_env_from</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">config</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">system</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_system</span>\n\n    <span class=\"nd\">@system</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">system</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">new_system</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">]):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_system</span> <span class=\"o\">=</span> <span class=\"n\">_get_cluster_from</span><span class=\"p\">(</span><span class=\"n\">new_system</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">env</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_env</span>\n\n    <span class=\"nd\">@env</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">env</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">new_env</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Env</span><span class=\"p\">]]):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_env</span> <span class=\"o\">=</span> <span class=\"n\">_get_env_from</span><span class=\"p\">(</span><span class=\"n\">new_env</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_remote_init</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;A method which you can overload and will be called remotely on the cluster upon initialization there,</span>\n<span class=\"sd\">        in case you want to do certain initialization activities on the cluster only. For example, if you want</span>\n<span class=\"sd\">        to load a model or dataset and send it to GPU, you probably don&#39;t want to do those locally and send the</span>\n<span class=\"sd\">        state over to the cluster.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cls_pointers</span><span class=\"p\">:</span>\n            <span class=\"p\">(</span><span class=\"n\">module_path</span><span class=\"p\">,</span> <span class=\"n\">module_name</span><span class=\"p\">,</span> <span class=\"n\">class_name</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cls_pointers</span>\n            <span class=\"n\">module_cls</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_obj_from_pointers</span><span class=\"p\">(</span>\n                <span class=\"n\">module_path</span><span class=\"p\">,</span> <span class=\"n\">module_name</span><span class=\"p\">,</span> <span class=\"n\">class_name</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">module_cls</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_get_obj_from_pointers</span><span class=\"p\">(</span><span class=\"n\">module_path</span><span class=\"p\">,</span> <span class=\"n\">module_name</span><span class=\"p\">,</span> <span class=\"n\">obj_name</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Helper method to load a class or function from a module path, module name, and class name.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">module_path</span><span class=\"p\">:</span>\n            <span class=\"n\">abs_path</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">((</span><span class=\"n\">Path</span><span class=\"o\">.</span><span class=\"n\">home</span><span class=\"p\">()</span> <span class=\"o\">/</span> <span class=\"n\">module_path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">expanduser</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">resolve</span><span class=\"p\">())</span>\n            <span class=\"k\">if</span> <span class=\"n\">abs_path</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">:</span>\n                <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">abs_path</span><span class=\"p\">)</span>\n                <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Appending </span><span class=\"si\">{</span><span class=\"n\">module_path</span><span class=\"si\">}</span><span class=\"s2\"> to sys.path&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">module_name</span> <span class=\"ow\">in</span> <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">imported_modules</span><span class=\"p\">:</span>\n            <span class=\"n\">importlib</span><span class=\"o\">.</span><span class=\"n\">invalidate_caches</span><span class=\"p\">()</span>\n            <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">imported_modules</span><span class=\"p\">[</span><span class=\"n\">module_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">importlib</span><span class=\"o\">.</span><span class=\"n\">reload</span><span class=\"p\">(</span>\n                <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">imported_modules</span><span class=\"p\">[</span><span class=\"n\">module_name</span><span class=\"p\">]</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Reloaded module </span><span class=\"si\">{</span><span class=\"n\">module_name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Importing module </span><span class=\"si\">{</span><span class=\"n\">module_name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">imported_modules</span><span class=\"p\">[</span><span class=\"n\">module_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">importlib</span><span class=\"o\">.</span><span class=\"n\">import_module</span><span class=\"p\">(</span>\n                <span class=\"n\">module_name</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">imported_modules</span><span class=\"p\">[</span><span class=\"n\">module_name</span><span class=\"p\">],</span> <span class=\"n\">obj_name</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"Module.to\"><a class=\"viewcode-back\" href=\"../../../../api/python/module/#runhouse.Module.to\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">to</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">system</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">],</span>\n        <span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">Env</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Put a copy of the module on the destination system and env, and return the new module.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; local_module = rh.module(my_class)</span>\n<span class=\"sd\">            &gt;&gt;&gt; cluster_module = local_module.to(&quot;my_cluster&quot;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">system</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span> <span class=\"ow\">and</span> <span class=\"n\">env</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">env</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n                <span class=\"c1\"># TODO return duplicate object under new name, don&#39;t rename</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rename</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">system</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;here&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">current_cluster_config</span> <span class=\"o\">=</span> <span class=\"n\">_current_cluster</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s2\">&quot;config&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">current_cluster_config</span><span class=\"p\">:</span>\n                <span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"n\">Cluster</span><span class=\"o\">.</span><span class=\"n\">from_config</span><span class=\"p\">(</span><span class=\"n\">current_cluster_config</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"n\">_get_cluster_from</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dryrun</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">system</span> <span class=\"k\">else</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">env</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">env</span>\n        <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">_get_env_from</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">env</span> <span class=\"ow\">and</span> <span class=\"n\">system</span><span class=\"p\">:</span>\n            <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># We need to backup the system here so the __getstate__ method of the cluster</span>\n        <span class=\"c1\"># doesn&#39;t wipe the client of this function&#39;s cluster when deepcopy copies it.</span>\n        <span class=\"n\">hw_backup</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">new_module</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"n\">hw_backup</span>\n\n        <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"n\">system</span>\n        <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">env</span>\n        <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">dryrun</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">):</span>\n            <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                <span class=\"n\">name</span>\n                <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n                <span class=\"ow\">or</span> <span class=\"p\">(</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cls_pointers</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n                    <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cls_pointers</span>\n                    <span class=\"k\">else</span> <span class=\"kc\">None</span>\n                    <span class=\"ow\">or</span> <span class=\"n\">_generate_default_name</span><span class=\"p\">(</span>\n                        <span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__qualname__</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>\n                    <span class=\"p\">)</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">():</span>\n                <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">pin</span><span class=\"p\">()</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"c1\"># We only send over state for instances, not classes</span>\n                <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">):</span>\n                    <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                        <span class=\"n\">attr</span><span class=\"p\">:</span> <span class=\"n\">val</span>\n                        <span class=\"k\">for</span> <span class=\"n\">attr</span><span class=\"p\">,</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span>\n                        <span class=\"k\">if</span> <span class=\"n\">attr</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;_&quot;</span> <span class=\"ow\">and</span> <span class=\"n\">attr</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">config_for_rns</span>\n                    <span class=\"p\">}</span>\n                <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">put_resource</span><span class=\"p\">(</span><span class=\"n\">new_module</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">new_module</span></div>\n\n<div class=\"viewcode-block\" id=\"Module.get_or_to\"><a class=\"viewcode-back\" href=\"../../../../api/python/module/#runhouse.Module.get_or_to\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_or_to</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">system</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">],</span>\n        <span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">Env</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Check if the module already exists on the cluster, and if so return the module object.</span>\n<span class=\"sd\">        If not, put the module on the cluster and return the remote module.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; remote_df = Model().get_or_to(my_cluster, name=&quot;remote_model&quot;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"ow\">or</span> <span class=\"n\">name</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;You must specify a name for the module if you want to get_or_to it.&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"n\">_get_cluster_from</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">)</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">remote</span> <span class=\"o\">=</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">remote</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n            <span class=\"n\">remote</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"n\">remote</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">remote</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"p\">)</span></div>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Override to allow for remote execution if system is a remote cluster. If not, the subclass&#39;s own</span>\n<span class=\"sd\">        __getattr__ will be called.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">LOCAL_METHODS</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_system&quot;</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n        <span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"s2\">&quot;_system&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">attr</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">system</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"n\">attr</span>\n\n        <span class=\"c1\"># Don&#39;t try to run private methods or attributes remotely</span>\n        <span class=\"k\">if</span> <span class=\"n\">item</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;_&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">attr</span>\n\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"s2\">&quot;_name&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Handle properties</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">callable</span><span class=\"p\">(</span><span class=\"n\">attr</span><span class=\"p\">):</span>\n            <span class=\"c1\"># TODO should we throw a warning here or is that annoying?</span>\n            <span class=\"k\">return</span> <span class=\"n\">attr</span>\n\n        <span class=\"n\">signature</span> <span class=\"o\">=</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">signature</span><span class=\"p\">(</span><span class=\"n\">attr</span><span class=\"p\">)</span>\n        <span class=\"n\">has_local_arg</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;local&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">signature</span><span class=\"o\">.</span><span class=\"n\">parameters</span>\n        <span class=\"n\">local_default_true</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"n\">has_local_arg</span> <span class=\"ow\">and</span> <span class=\"n\">signature</span><span class=\"o\">.</span><span class=\"n\">parameters</span><span class=\"p\">[</span><span class=\"s2\">&quot;local&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">default</span> <span class=\"ow\">is</span> <span class=\"kc\">True</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"c1\"># Needed to handle async Functions, because we can&#39;t detect if the function they wrap is async like we</span>\n        <span class=\"c1\"># do below for Module methods</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">is_async</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"s2\">&quot;_is_async&quot;</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">item</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;call&quot;</span> <span class=\"k\">else</span> <span class=\"kc\">False</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">is_async_gen</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"s2\">&quot;_is_async_gen&quot;</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">item</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;call&quot;</span> <span class=\"k\">else</span> <span class=\"kc\">False</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>\n            <span class=\"n\">is_async</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n            <span class=\"n\">is_async_gen</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">class</span> <span class=\"nc\">RemoteMethodWrapper</span><span class=\"p\">:</span>\n<span class=\"w\">            </span><span class=\"sd\">&quot;&quot;&quot;Helper class to allow methods to be called with __call__, remote, or run.&quot;&quot;&quot;</span>\n\n            <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n                <span class=\"c1\"># stream_logs and run_name are both supported args here, but we can&#39;t include them explicitly because</span>\n                <span class=\"c1\"># the local code path here will throw an error if they are included and not supported in the</span>\n                <span class=\"c1\"># method signature.</span>\n\n                <span class=\"c1\"># Check if the method has a &quot;local=True&quot; arg, and check that the user didn&#39;t pass local=False instead</span>\n                <span class=\"k\">if</span> <span class=\"n\">local_default_true</span> <span class=\"ow\">and</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;local&quot;</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">):</span>\n                    <span class=\"k\">return</span> <span class=\"n\">attr</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n                <span class=\"c1\"># If the method is a coroutine, we need to wrap it in a function so we can await it</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span>\n                    <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">iscoroutinefunction</span><span class=\"p\">(</span><span class=\"n\">attr</span><span class=\"p\">)</span>\n                    <span class=\"ow\">or</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">isasyncgenfunction</span><span class=\"p\">(</span><span class=\"n\">attr</span><span class=\"p\">)</span>\n                    <span class=\"ow\">or</span> <span class=\"n\">is_async</span>\n                <span class=\"p\">):</span>\n\n                    <span class=\"k\">def</span> <span class=\"nf\">call_wrapper</span><span class=\"p\">():</span>\n                        <span class=\"k\">return</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span>\n                            <span class=\"n\">name</span><span class=\"p\">,</span>\n                            <span class=\"n\">item</span><span class=\"p\">,</span>\n                            <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span>\n                            <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n                        <span class=\"p\">)</span>\n\n                    <span class=\"k\">if</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">isasyncgenfunction</span><span class=\"p\">(</span><span class=\"n\">attr</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">is_async_gen</span><span class=\"p\">:</span>\n\n                        <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">async_gen</span><span class=\"p\">():</span>\n                            <span class=\"k\">for</span> <span class=\"n\">res</span> <span class=\"ow\">in</span> <span class=\"n\">call_wrapper</span><span class=\"p\">():</span>\n                                <span class=\"k\">yield</span> <span class=\"n\">res</span>\n\n                        <span class=\"k\">return</span> <span class=\"n\">async_gen</span><span class=\"p\">()</span>\n\n                    <span class=\"n\">_executor</span> <span class=\"o\">=</span> <span class=\"n\">ThreadPoolExecutor</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n                    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">async_call</span><span class=\"p\">():</span>\n                        <span class=\"k\">return</span> <span class=\"k\">await</span> <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_in_executor</span><span class=\"p\">(</span><span class=\"n\">_executor</span><span class=\"p\">,</span> <span class=\"n\">call_wrapper</span><span class=\"p\">)</span>\n\n                    <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n                    <span class=\"k\">return</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">create_task</span><span class=\"p\">(</span><span class=\"n\">async_call</span><span class=\"p\">())</span>\n\n                <span class=\"k\">return</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span>\n                    <span class=\"n\">name</span><span class=\"p\">,</span>\n                    <span class=\"n\">item</span><span class=\"p\">,</span>\n                    <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span>\n                    <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n\n            <span class=\"k\">def</span> <span class=\"nf\">remote</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">run_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"fm\">__call__</span><span class=\"p\">(</span>\n                    <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span>\n                    <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"n\">stream_logs</span><span class=\"p\">,</span>\n                    <span class=\"n\">run_name</span><span class=\"o\">=</span><span class=\"n\">run_name</span><span class=\"p\">,</span>\n                    <span class=\"n\">remote</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n\n            <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">run_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"fm\">__call__</span><span class=\"p\">(</span>\n                    <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span>\n                    <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"n\">stream_logs</span><span class=\"p\">,</span>\n                    <span class=\"n\">run_name</span><span class=\"o\">=</span><span class=\"n\">run_name</span><span class=\"p\">,</span>\n                    <span class=\"n\">run_async</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n\n            <span class=\"k\">def</span> <span class=\"nf\">local</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n<span class=\"w\">                </span><span class=\"sd\">&quot;&quot;&quot;Allows us to call a function with fn.local(*args) instead of fn(*args, local=True)&quot;&quot;&quot;</span>\n                <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"fm\">__call__</span><span class=\"p\">(</span>\n                    <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span>\n                    <span class=\"n\">local</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">RemoteMethodWrapper</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__setattr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Override to allow for remote execution if system is a remote cluster. If not, the subclass&#39;s own</span>\n<span class=\"sd\">        __setattr__ will be called.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">LOCAL_METHODS</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_system&quot;</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__setattr__</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_system</span>\n            <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_system</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">)</span>\n            <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_system</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">()</span>\n            <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span>\n        <span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__setattr__</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_system</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span>\n            <span class=\"n\">module_name</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">,</span>\n            <span class=\"n\">method_name</span><span class=\"o\">=</span><span class=\"n\">key</span><span class=\"p\">,</span>\n            <span class=\"n\">new_value</span><span class=\"o\">=</span><span class=\"n\">value</span><span class=\"p\">,</span>\n            <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"Module.refresh\"><a class=\"viewcode-back\" href=\"../../../../api/python/module/#runhouse.Module.refresh\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">refresh</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Update the resource in the object store.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_system</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_system</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_system</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">,</span> <span class=\"n\">remote</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span></div>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">remote</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Helper property to allow for access to remote properties, both public and private. Returning functions</span>\n<span class=\"sd\">        is not advised.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; my_module.remote.my_property</span>\n<span class=\"sd\">            &gt;&gt;&gt; my_module.remote._my_private_property</span>\n<span class=\"sd\">            &gt;&gt;&gt; my_module.remote.size = 14</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"s2\">&quot;_system&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"s2\">&quot;_name&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">outer_super_gettattr</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span>\n        <span class=\"n\">outer_super_setattr</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__setattr__</span>\n\n        <span class=\"k\">class</span> <span class=\"nc\">RemotePropertyWrapper</span><span class=\"p\">:</span>\n            <span class=\"nd\">@classmethod</span>\n            <span class=\"k\">def</span> <span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"n\">outer_super_gettattr</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n\n                <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">name</span> <span class=\"ow\">and</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">():</span>\n                    <span class=\"n\">obj_store_obj</span> <span class=\"o\">=</span> <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">check_other_envs</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"n\">obj_store_obj</span><span class=\"p\">:</span>\n                        <span class=\"k\">return</span> <span class=\"n\">obj_store_obj</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n\n                <span class=\"k\">return</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n            <span class=\"nd\">@classmethod</span>\n            <span class=\"k\">def</span> <span class=\"fm\">__setattr__</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span>\n                    <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">)</span>\n                    <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"n\">name</span>\n                    <span class=\"ow\">or</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">()</span>\n                <span class=\"p\">):</span>\n                    <span class=\"k\">return</span> <span class=\"n\">outer_super_setattr</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n\n                <span class=\"k\">return</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span>\n                    <span class=\"n\">module_name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span>\n                    <span class=\"n\">method_name</span><span class=\"o\">=</span><span class=\"n\">key</span><span class=\"p\">,</span>\n                    <span class=\"n\">new_value</span><span class=\"o\">=</span><span class=\"n\">value</span><span class=\"p\">,</span>\n                    <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n\n            <span class=\"nd\">@classmethod</span>\n            <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">RemotePropertyWrapper</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">local</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Helper property to allow for access to local properties, both public and private.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; my_module.local.my_property</span>\n<span class=\"sd\">            &gt;&gt;&gt; my_module.local._my_private_property</span>\n\n<span class=\"sd\">            &gt;&gt;&gt; my_module.local.size = 14</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">outer_super_gettattr</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span>\n        <span class=\"n\">outer_super_setattr</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__setattr__</span>\n\n        <span class=\"k\">class</span> <span class=\"nc\">LocalPropertyWrapper</span><span class=\"p\">:</span>\n            <span class=\"nd\">@classmethod</span>\n            <span class=\"k\">def</span> <span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span> <span class=\"n\">outer_super_gettattr</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n\n            <span class=\"nd\">@classmethod</span>\n            <span class=\"k\">def</span> <span class=\"fm\">__setattr__</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span> <span class=\"n\">outer_super_setattr</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">LocalPropertyWrapper</span><span class=\"p\">()</span>\n\n<div class=\"viewcode-block\" id=\"Module.fetch\"><a class=\"viewcode-back\" href=\"../../../../api/python/module/#runhouse.Module.fetch\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">fetch</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">stream_logs</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Helper method to allow for access to remote state, both public and private. Fetching functions</span>\n<span class=\"sd\">        is not advised. `system.get(module.name).resolved_state()` is roughly equivalent to `module.fetch()`.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; my_module.fetch(&quot;my_property&quot;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; my_module.fetch(&quot;my_private_property&quot;)</span>\n\n<span class=\"sd\">            &gt;&gt;&gt; MyRemoteClass = rh.module(my_class).to(system)</span>\n<span class=\"sd\">            &gt;&gt;&gt; MyRemoteClass(*args).fetch() # Returns a my_class instance, populated with the remote state</span>\n\n<span class=\"sd\">            &gt;&gt;&gt; my_blob.fetch() # Returns the data of the blob, due to overloaded ``resolved_state`` method</span>\n\n<span class=\"sd\">            &gt;&gt;&gt; class MyModule(rh.Module):</span>\n<span class=\"sd\">            &gt;&gt;&gt;     # ...</span>\n<span class=\"sd\">            &gt;&gt;&gt;</span>\n<span class=\"sd\">            &gt;&gt;&gt; MyModule(*args).to(system).fetch() # Returns the full remote module, including private and public state</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"s2\">&quot;_system&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"s2\">&quot;_name&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">item</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">name</span> <span class=\"ow\">and</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">():</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"n\">obj_store_obj</span> <span class=\"o\">=</span> <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span>\n                        <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">check_other_envs</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"ne\">KeyError</span>\n                    <span class=\"p\">)</span>\n                    <span class=\"k\">return</span> <span class=\"n\">obj_store_obj</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n                <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n\n            <span class=\"k\">return</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"n\">stream_logs</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">resolved_state</span><span class=\"p\">()</span>\n            <span class=\"k\">return</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"n\">stream_logs</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">resolved_state</span><span class=\"p\">()</span></div>\n\n<div class=\"viewcode-block\" id=\"Module.fetch_async\"><a class=\"viewcode-back\" href=\"../../../../api/python/module/#runhouse.Module.fetch_async\">[docs]</a>    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">fetch_async</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">remote</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">stream_logs</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Async version of fetch. Can&#39;t be a property like `fetch` because __getattr__ can&#39;t be awaited.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; await my_module.fetch_async(&quot;my_property&quot;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; await my_module.fetch_async(&quot;_my_private_property&quot;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"s2\">&quot;_system&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"s2\">&quot;_name&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">call_wrapper</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">key</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">remote</span><span class=\"o\">=</span><span class=\"n\">remote</span><span class=\"p\">,</span> <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"n\">stream_logs</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">name</span> <span class=\"ow\">and</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">():</span>\n                <span class=\"n\">obj_store_obj</span> <span class=\"o\">=</span> <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">check_other_envs</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">obj_store_obj</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"n\">obj_store_obj</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">remote</span><span class=\"o\">=</span><span class=\"n\">remote</span><span class=\"p\">,</span> <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"n\">stream_logs</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"n\">key</span>\n            <span class=\"ow\">and</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n            <span class=\"ow\">and</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">isasyncgenfunction</span><span class=\"p\">(</span><span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">))</span>\n        <span class=\"p\">):</span>\n\n            <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">async_gen</span><span class=\"p\">():</span>\n                <span class=\"k\">for</span> <span class=\"n\">res</span> <span class=\"ow\">in</span> <span class=\"n\">call_wrapper</span><span class=\"p\">():</span>\n                    <span class=\"k\">yield</span> <span class=\"n\">res</span>\n\n            <span class=\"k\">return</span> <span class=\"n\">async_gen</span><span class=\"p\">()</span>\n\n        <span class=\"n\">_executor</span> <span class=\"o\">=</span> <span class=\"n\">ThreadPoolExecutor</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n        <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">async_call</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"k\">await</span> <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_in_executor</span><span class=\"p\">(</span><span class=\"n\">_executor</span><span class=\"p\">,</span> <span class=\"n\">call_wrapper</span><span class=\"p\">)</span>\n\n        <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">create_task</span><span class=\"p\">(</span><span class=\"n\">async_call</span><span class=\"p\">())</span></div>\n\n<div class=\"viewcode-block\" id=\"Module.set_async\"><a class=\"viewcode-back\" href=\"../../../../api/python/module/#runhouse.Module.set_async\">[docs]</a>    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">set_async</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Async version of property setter.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; await my_module.set_async(&quot;my_property&quot;, my_value)</span>\n<span class=\"sd\">            &gt;&gt;&gt; await my_module.set_async(&quot;_my_private_property&quot;, my_value)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_system</span>\n            <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_system</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">)</span>\n            <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_system</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">()</span>\n            <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span>\n        <span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__setattr__</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">call_wrapper</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_system</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span>\n                <span class=\"n\">module_name</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">,</span>\n                <span class=\"n\">method_name</span><span class=\"o\">=</span><span class=\"n\">key</span><span class=\"p\">,</span>\n                <span class=\"n\">new_value</span><span class=\"o\">=</span><span class=\"n\">value</span><span class=\"p\">,</span>\n                <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"n\">_executor</span> <span class=\"o\">=</span> <span class=\"n\">ThreadPoolExecutor</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n        <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">async_call</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"k\">await</span> <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_in_executor</span><span class=\"p\">(</span><span class=\"n\">_executor</span><span class=\"p\">,</span> <span class=\"n\">call_wrapper</span><span class=\"p\">)</span>\n\n        <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">create_task</span><span class=\"p\">(</span><span class=\"n\">async_call</span><span class=\"p\">())</span></div>\n\n<div class=\"viewcode-block\" id=\"Module.resolve\"><a class=\"viewcode-back\" href=\"../../../../api/python/module/#runhouse.Module.resolve\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">resolve</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Specify that the module should resolve to a particular state when passed into a remote method. This is</span>\n<span class=\"sd\">        useful if you want to revert the module&#39;s state to some &quot;Runhouse-free&quot; state once it is passed into a</span>\n<span class=\"sd\">        Runhouse-unaware function. For example, if you call a Runhouse-unaware function with ``.remote()``,</span>\n<span class=\"sd\">        you will be returned a Blob which wraps your data. If you want to pass that Blob into another function</span>\n<span class=\"sd\">        that operates on the original data (e.g. a function that takes a numpy array), you can call</span>\n<span class=\"sd\">        ``my_second_fn(my_blob.resolve())``, and ``my_blob`` will be replaced with the contents of its ``.data`` on the</span>\n<span class=\"sd\">        cluster before being passed into ``my_second_fn``.</span>\n\n<span class=\"sd\">        Resolved state is defined by the ``resolved_state`` method. By default, modules created with the</span>\n<span class=\"sd\">        ``rh.module`` factory constructor will be resolved to their original non-module-wrapped class (or best attempt).</span>\n<span class=\"sd\">        Modules which are defined as a subclass of ``Module`` will be returned as-is, as they have no other</span>\n<span class=\"sd\">        &quot;original class.&quot;</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; my_module = rh.module(my_class)</span>\n<span class=\"sd\">            &gt;&gt;&gt; my_remote_fn(my_module.resolve()) # my_module will be replaced with the original class `my_class`</span>\n\n<span class=\"sd\">            &gt;&gt;&gt; my_result_blob = my_remote_fn.remote(args)</span>\n<span class=\"sd\">            &gt;&gt;&gt; my_other_remote_fn(my_result_blob.resolve()) # my_result_blob will be replaced with its data</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_resolve</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span></div>\n\n<div class=\"viewcode-block\" id=\"Module.resolved_state\"><a class=\"viewcode-back\" href=\"../../../../api/python/module/#runhouse.Module.resolved_state\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">resolved_state</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Return the resolved state of the module. By default, this is the original class of the module if it was</span>\n<span class=\"sd\">        created with the ``module`` factory constructor.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cls_pointers</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_resolve</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n        <span class=\"p\">(</span><span class=\"n\">module_path</span><span class=\"p\">,</span> <span class=\"n\">module_name</span><span class=\"p\">,</span> <span class=\"n\">class_name</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cls_pointers</span>\n        <span class=\"n\">original_class</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_obj_from_pointers</span><span class=\"p\">(</span>\n            <span class=\"n\">module_path</span><span class=\"p\">,</span> <span class=\"n\">module_name</span><span class=\"p\">,</span> <span class=\"n\">class_name</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">issubclass</span><span class=\"p\">(</span><span class=\"n\">original_class</span><span class=\"p\">,</span> <span class=\"n\">Module</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_resolve</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"p\">:</span>\n            <span class=\"c1\"># This is a non-instantiated Module, i.e. represents a class rather than an instance</span>\n            <span class=\"k\">return</span> <span class=\"n\">original_class</span>\n\n        <span class=\"n\">new_module</span> <span class=\"o\">=</span> <span class=\"n\">original_class</span><span class=\"o\">.</span><span class=\"fm\">__new__</span><span class=\"p\">(</span><span class=\"n\">original_class</span><span class=\"p\">)</span>\n        <span class=\"c1\"># TODO pop out any attributes that are not in the original class?</span>\n        <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span>\n        <span class=\"k\">return</span> <span class=\"n\">new_module</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_save_sub_resources</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">Resource</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"n\">Resource</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n<div class=\"viewcode-block\" id=\"Module.rename\"><a class=\"viewcode-back\" href=\"../../../../api/python/module/#runhouse.Module.rename\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">rename</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Rename the module.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n        <span class=\"n\">old_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>  <span class=\"c1\"># Goes through Resource setter to parse name properly (e.g. if rns path)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">():</span>\n            <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">rename</span><span class=\"p\">(</span><span class=\"n\">old_key</span><span class=\"o\">=</span><span class=\"n\">old_name</span><span class=\"p\">,</span> <span class=\"n\">new_key</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">rename</span><span class=\"p\">(</span><span class=\"n\">old_key</span><span class=\"o\">=</span><span class=\"n\">old_name</span><span class=\"p\">,</span> <span class=\"n\">new_key</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Module.save\"><a class=\"viewcode-back\" href=\"../../../../api/python/module/#runhouse.Module.save\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">save</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">overwrite</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Register the resource and save to local working_dir config and RNS config store.&quot;&quot;&quot;</span>\n        <span class=\"c1\"># Need to override Resource&#39;s save to handle key changes in the obj store</span>\n        <span class=\"c1\"># Also check that this is a Blob and not a File</span>\n        <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">overwrite</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rename</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n                <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">):</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">put_resource</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">overwrite</span><span class=\"o\">=</span><span class=\"n\">overwrite</span><span class=\"p\">)</span></div>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_extract_pointers</span><span class=\"p\">(</span><span class=\"n\">raw_cls_or_fn</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Type</span><span class=\"p\">,</span> <span class=\"n\">Callable</span><span class=\"p\">],</span> <span class=\"n\">reqs</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Get the path to the module, module name, and function name to be able to import it on the server&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">raw_cls_or_fn</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">raw_cls_or_fn</span><span class=\"p\">,</span> <span class=\"n\">Callable</span><span class=\"p\">)):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;Expected Type or Callable but received </span><span class=\"si\">{</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">raw_cls_or_fn</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"c1\"># Background on all these dunders: https://docs.python.org/3/reference/import.html</span>\n        <span class=\"n\">py_module</span> <span class=\"o\">=</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">getmodule</span><span class=\"p\">(</span><span class=\"n\">raw_cls_or_fn</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Need to resolve in case just filename is given</span>\n        <span class=\"n\">module_path</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">getfile</span><span class=\"p\">(</span><span class=\"n\">py_module</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">resolve</span><span class=\"p\">())</span>\n            <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">py_module</span><span class=\"p\">,</span> <span class=\"s2\">&quot;__file__&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span> <span class=\"kc\">None</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"c1\"># TODO better way of detecting if in a notebook or interactive Python env</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">module_path</span> <span class=\"ow\">or</span> <span class=\"n\">module_path</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;ipynb&quot;</span><span class=\"p\">):</span>\n            <span class=\"c1\"># The only time __file__ wouldn&#39;t be present is if the function is defined in an interactive</span>\n            <span class=\"c1\"># interpreter or a notebook. We can&#39;t import on the server in that case, so we need to cloudpickle</span>\n            <span class=\"c1\"># the fn to send it over. The __call__ function will serialize the function if we return it this way.</span>\n            <span class=\"c1\"># This is a short-term hack.</span>\n            <span class=\"c1\"># return None, &quot;notebook&quot;, raw_fn.__name__</span>\n            <span class=\"n\">root_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">()</span>\n            <span class=\"n\">module_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;notebook&quot;</span>\n            <span class=\"n\">cls_or_fn_name</span> <span class=\"o\">=</span> <span class=\"n\">raw_cls_or_fn</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">root_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">module_path</span><span class=\"p\">)</span>\n            <span class=\"n\">module_name</span> <span class=\"o\">=</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">getmodulename</span><span class=\"p\">(</span><span class=\"n\">module_path</span><span class=\"p\">)</span>\n            <span class=\"c1\"># TODO __qualname__ doesn&#39;t work when fn is aliased funnily, like torch.sum</span>\n            <span class=\"n\">cls_or_fn_name</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span>\n                <span class=\"n\">raw_cls_or_fn</span><span class=\"p\">,</span> <span class=\"s2\">&quot;__qualname__&quot;</span><span class=\"p\">,</span> <span class=\"n\">raw_cls_or_fn</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n            <span class=\"p\">)</span>\n\n            <span class=\"c1\"># Adapted from https://github.com/modal-labs/modal-client/blob/main/modal/_function_utils.py#L94</span>\n            <span class=\"k\">if</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">py_module</span><span class=\"p\">,</span> <span class=\"s2\">&quot;__package__&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n                <span class=\"n\">module_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"n\">py_module</span><span class=\"o\">.</span><span class=\"vm\">__file__</span><span class=\"p\">)</span>\n                <span class=\"n\">package_paths</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n                    <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"nb\">__import__</span><span class=\"p\">(</span><span class=\"n\">py_module</span><span class=\"o\">.</span><span class=\"n\">__package__</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">__path__</span>\n                <span class=\"p\">]</span>\n                <span class=\"n\">base_dirs</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                    <span class=\"n\">base_dir</span>\n                    <span class=\"k\">for</span> <span class=\"n\">base_dir</span> <span class=\"ow\">in</span> <span class=\"n\">package_paths</span>\n                    <span class=\"k\">if</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">commonpath</span><span class=\"p\">((</span><span class=\"n\">base_dir</span><span class=\"p\">,</span> <span class=\"n\">module_path</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"n\">base_dir</span>\n                <span class=\"p\">]</span>\n\n                <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">base_dirs</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Module files: </span><span class=\"si\">{</span><span class=\"n\">module_path</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n                    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Package paths: </span><span class=\"si\">{</span><span class=\"n\">package_paths</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n                    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Base dirs: </span><span class=\"si\">{</span><span class=\"n\">base_dirs</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n                    <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s2\">&quot;Wasn&#39;t able to find the package directory!&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">root_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">base_dirs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n                <span class=\"n\">module_name</span> <span class=\"o\">=</span> <span class=\"n\">py_module</span><span class=\"o\">.</span><span class=\"n\">__spec__</span><span class=\"o\">.</span><span class=\"n\">name</span>\n\n        <span class=\"n\">remote_import_path</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">for</span> <span class=\"n\">req</span> <span class=\"ow\">in</span> <span class=\"n\">reqs</span><span class=\"p\">:</span>\n            <span class=\"n\">local_path</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span>\n                <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"p\">,</span> <span class=\"n\">Package</span><span class=\"p\">)</span>\n                <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">install_target</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)</span>\n                <span class=\"ow\">and</span> <span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">install_target</span><span class=\"o\">.</span><span class=\"n\">is_local</span><span class=\"p\">()</span>\n            <span class=\"p\">):</span>\n                <span class=\"n\">local_path</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">install_target</span><span class=\"o\">.</span><span class=\"n\">local_path</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n                <span class=\"k\">if</span> <span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;:&quot;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;local&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;reqs&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;pip&quot;</span><span class=\"p\">]:</span>\n                    <span class=\"n\">req</span> <span class=\"o\">=</span> <span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;:&quot;</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n                <span class=\"k\">if</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">expanduser</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">resolve</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">():</span>\n                    <span class=\"c1\"># Relative paths are relative to the working directory in Folders/Packages!</span>\n                    <span class=\"n\">local_path</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                        <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">expanduser</span><span class=\"p\">()</span>\n                        <span class=\"k\">if</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">expanduser</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_absolute</span><span class=\"p\">()</span>\n                        <span class=\"k\">else</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">locate_working_dir</span><span class=\"p\">())</span> <span class=\"o\">/</span> <span class=\"n\">req</span>\n                    <span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">local_path</span><span class=\"p\">:</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># Module path relative to package</span>\n                    <span class=\"n\">remote_import_path</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span>\n                        <span class=\"n\">local_path</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">/</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">root_path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">relative_to</span><span class=\"p\">(</span><span class=\"n\">local_path</span><span class=\"p\">)</span>\n                    <span class=\"p\">)</span>\n                    <span class=\"k\">break</span>\n                <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>  <span class=\"c1\"># Not a subdirectory</span>\n                    <span class=\"k\">pass</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">remote_import_path</span><span class=\"p\">,</span> <span class=\"n\">module_name</span><span class=\"p\">,</span> <span class=\"n\">cls_or_fn_name</span></div>\n\n    <span class=\"c1\"># Found in python decorator logic, maybe use</span>\n    <span class=\"c1\"># func_name = getattr(f, &#39;__qualname__&#39;, f.__name__)</span>\n    <span class=\"c1\"># module_name = getattr(f, &#39;__module__&#39;, &#39;&#39;)</span>\n    <span class=\"c1\"># if module_name:</span>\n    <span class=\"c1\">#     full_name = f&#39;{module_name}.{func_name}&#39;</span>\n    <span class=\"c1\"># else:</span>\n    <span class=\"c1\">#     full_name = func_name</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_module_subclass_factory</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">pointers</span><span class=\"p\">,</span> <span class=\"n\">signature</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span>\n        <span class=\"n\">system</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">cls_pointers</span><span class=\"o\">=</span><span class=\"n\">pointers</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">provenance</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"c1\"># args and kwargs are passed to the cls&#39;s __init__ method if this is being called on a cluster. They</span>\n        <span class=\"c1\"># shouldn&#39;t be passed otherwise.</span>\n        <span class=\"n\">Module</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"p\">,</span>\n            <span class=\"n\">cls_pointers</span><span class=\"o\">=</span><span class=\"n\">cls_pointers</span><span class=\"p\">,</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span>\n            <span class=\"n\">system</span><span class=\"o\">=</span><span class=\"n\">system</span><span class=\"p\">,</span>\n            <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"n\">env</span><span class=\"p\">,</span>\n            <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">,</span>\n            <span class=\"n\">provenance</span><span class=\"o\">=</span><span class=\"n\">provenance</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"c1\"># This allows a class which is already on the cluster to construct an instance of itself with a factory</span>\n        <span class=\"c1\"># method, e.g. my_module = MyModuleCls.factory_constructor(*args, **kwargs)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">():</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_remote_init</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span>\n        <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"c1\"># TODO change setting logic to be &quot;mod.local.x = 5&quot; or &quot;mod.remote.x = 5&quot;, with properties being remote by</span>\n        <span class=\"c1\"># default and private methods being local by default for both setting and getting</span>\n        <span class=\"n\">new_module</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Create a copy of the item on the cluster under the new name</span>\n        <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">dryrun</span> <span class=\"o\">=</span> <span class=\"n\">dryrun</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">dryrun</span><span class=\"p\">:</span>\n            <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">put_resource</span><span class=\"p\">(</span><span class=\"n\">new_module</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">new_module</span>\n\n    <span class=\"n\">methods</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;__init__&quot;</span><span class=\"p\">:</span> <span class=\"fm\">__init__</span><span class=\"p\">,</span> <span class=\"s2\">&quot;__call__&quot;</span><span class=\"p\">:</span> <span class=\"fm\">__call__</span><span class=\"p\">}</span>\n    <span class=\"n\">new_type</span> <span class=\"o\">=</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">pointers</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"n\">Module</span><span class=\"p\">,</span> <span class=\"bp\">cls</span><span class=\"p\">),</span> <span class=\"n\">methods</span><span class=\"p\">)</span>\n    <span class=\"n\">new_type</span><span class=\"o\">.</span><span class=\"n\">__signature__</span> <span class=\"o\">=</span> <span class=\"n\">signature</span>\n    <span class=\"k\">return</span> <span class=\"n\">new_type</span>\n\n\n<div class=\"viewcode-block\" id=\"module\"><a class=\"viewcode-back\" href=\"../../../../api/python/module/#runhouse.module\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">module</span><span class=\"p\">(</span>\n    <span class=\"bp\">cls</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">Type</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">system</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Env</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">dryrun</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n<span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Returns a Module object, which can be used to instantiate and interact with the class remotely.</span>\n\n<span class=\"sd\">    The behavior of Modules (and subclasses thereof) is as follows:</span>\n<span class=\"sd\">        - Any callable public method of the module is intercepted and executed remotely over rpc, with exception of</span>\n<span class=\"sd\">          certain functions Python doesn&#39;t make interceptable (e.g. __call__, __init__), and methods of the Module</span>\n<span class=\"sd\">          class (e.g. ``to``, ``fetch``, etc.). Properties and private methods are not intercepted, and will be</span>\n<span class=\"sd\">          executed locally.</span>\n<span class=\"sd\">        - Any method which executes remotely may be called normally, e.g. ``model.forward(x)``, or asynchronously,</span>\n<span class=\"sd\">          e.g. ``key = model.forward.run(x)`` (which returns a key to retrieve the result with</span>\n<span class=\"sd\">          ``cluster.get(key)``), or with ``run_obj = model.train.remote(x)``, which runs synchronously but returns</span>\n<span class=\"sd\">          a remote object to avoid passing heavy results back over the network.</span>\n<span class=\"sd\">        - Setting attributes, both public and private, will be executed remotely, with the new values only being</span>\n<span class=\"sd\">          set in the remote module and not the local one. This excludes any methods or attribtes of the Module class</span>\n<span class=\"sd\">          proper (e.g. ``system`` or ``name``), which will be set locally.</span>\n<span class=\"sd\">        - Attributes, private properties can be fetched with the ``remote`` property, and the full resource can be</span>\n<span class=\"sd\">          fetched using ``.fetch()``, e.g. ``model.remote.weights``, ``model.remote.__dict__``, ``model.fetch()``.</span>\n<span class=\"sd\">        - When a module is sent to a cluster, it&#39;s public attribtes are serialized, sent over, and repopulated in the</span>\n<span class=\"sd\">          remote instance. This means that any changes to the module&#39;s attributes will not be reflected in the remote</span>\n\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        cls: The class to instantiate.</span>\n<span class=\"sd\">        name (Optional[str]): Name to give the module object, to be reused later on.</span>\n<span class=\"sd\">        system (Optional[str or Cluster]): File system or cluster name. If providing a file system this must be one of:</span>\n<span class=\"sd\">            [``file``, ``github``, ``sftp``, ``ssh``, ``s3``, ``gs``, ``azure``].</span>\n<span class=\"sd\">            We are working to add additional file system support. If providing a cluster, this must be a cluster object</span>\n<span class=\"sd\">            or name, and whether the data is saved to the object store or filesystem depends on whether a path is</span>\n<span class=\"sd\">            specified.</span>\n<span class=\"sd\">        env (Optional[str or Env]): Environment in which the module should live on the cluster, if system is cluster.</span>\n<span class=\"sd\">        dryrun (bool): Whether to create the Blob if it doesn&#39;t exist, or load a Blob object as a dryrun.</span>\n<span class=\"sd\">            (Default: ``False``)</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        Module: The resulting module.</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; import runhouse as rh</span>\n<span class=\"sd\">        &gt;&gt;&gt; import transformers</span>\n<span class=\"sd\">        &gt;&gt;&gt;</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Sample rh.Module class</span>\n<span class=\"sd\">        &gt;&gt;&gt; class Model(rh.Module):</span>\n<span class=\"sd\">        &gt;&gt;&gt;    def __init__(self, model_id, device=&quot;cpu&quot;, system=None, env=None):</span>\n<span class=\"sd\">        &gt;&gt;&gt;        # Note that the code here will be run in your local environment prior to being sent to</span>\n<span class=\"sd\">        &gt;&gt;&gt;        # to a cluster. For loading large models/datasets that are only meant to be used remotely,</span>\n<span class=\"sd\">        &gt;&gt;&gt;        # we recommend using lazy initialization (see tokenizer and model attributes below).</span>\n<span class=\"sd\">        &gt;&gt;&gt;        super().__init__(system=system, env=env)</span>\n<span class=\"sd\">        &gt;&gt;&gt;        self.model_id = model_id</span>\n<span class=\"sd\">        &gt;&gt;&gt;        self.device = device</span>\n<span class=\"sd\">        &gt;&gt;&gt;</span>\n<span class=\"sd\">        &gt;&gt;&gt;    @property</span>\n<span class=\"sd\">        &gt;&gt;&gt;    def tokenizer(self):</span>\n<span class=\"sd\">        &gt;&gt;&gt;        # Lazily initialize the tokenizer remotely only when it is needed</span>\n<span class=\"sd\">        &gt;&gt;&gt;        if not hasattr(self, &#39;_tokenizer&#39;):</span>\n<span class=\"sd\">        &gt;&gt;&gt;            self._tokenizer = transformers.AutoTokenizer.from_pretrained(self.model_id)</span>\n<span class=\"sd\">        &gt;&gt;&gt;        return self._tokenizer</span>\n<span class=\"sd\">        &gt;&gt;&gt;</span>\n<span class=\"sd\">        &gt;&gt;&gt;    @property</span>\n<span class=\"sd\">        &gt;&gt;&gt;    def model(self):</span>\n<span class=\"sd\">        &gt;&gt;&gt;        if not hasattr(self, &#39;_model&#39;):</span>\n<span class=\"sd\">        &gt;&gt;&gt;            self._model = transformers.AutoModel.from_pretrained(self.model_id).to(self.device)</span>\n<span class=\"sd\">        &gt;&gt;&gt;        return self._model</span>\n<span class=\"sd\">        &gt;&gt;&gt;</span>\n<span class=\"sd\">        &gt;&gt;&gt;    def predict(self, x):</span>\n<span class=\"sd\">        &gt;&gt;&gt;        x = self.tokenizer(x, return_tensors=&quot;pt&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt;        return self.model(x)</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; # Creating rh.Module instance</span>\n<span class=\"sd\">        &gt;&gt;&gt; model = Model(model_id=&quot;bert-base-uncased&quot;, device=&quot;cuda&quot;, system=&quot;my_gpu&quot;, env=&quot;my_env&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; model.predict(&quot;Hello world!&quot;)   # Runs on system in env</span>\n<span class=\"sd\">        &gt;&gt;&gt; tok = model.remote.tokenizer     # Returns remote tokenizer</span>\n<span class=\"sd\">        &gt;&gt;&gt; model_id = model.model_id       # Returns local model_id (not remote)</span>\n<span class=\"sd\">        &gt;&gt;&gt; model.fetch()                   # Returns full remote module, including model and tokenizer</span>\n<span class=\"sd\">        &gt;&gt;&gt;</span>\n<span class=\"sd\">        &gt;&gt;&gt; # You can also create a model locally and then send it to a cluster with .to</span>\n<span class=\"sd\">        &gt;&gt;&gt; other_model = Model(model_id=&quot;bert-base-uncased&quot;, device=&quot;cuda&quot;).to(&quot;my_gpu&quot;, &quot;my_env&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt;</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Another method: Create a module instance from an existing non-Module class using rh.module()</span>\n<span class=\"sd\">        &gt;&gt;&gt; RemoteModel = rh.module(cls=BERTModel, system=&quot;my_gpu&quot;, env=&quot;my_env&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; remote_model = RemoteModel(model_id=&quot;bert-base-uncased&quot;, device=&quot;cuda&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; remote_model.predict(&quot;Hello world!&quot;)  # Runs on system in env</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; # Loading a module</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_local_module = rh.module(name=&quot;~/my_module&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_s3_module = rh.module(name=&quot;@/my_module&quot;)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"nb\">any</span><span class=\"p\">([</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"p\">]):</span>\n        <span class=\"c1\"># Try reloading existing module</span>\n        <span class=\"k\">return</span> <span class=\"n\">Module</span><span class=\"o\">.</span><span class=\"n\">from_name</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"p\">)</span>\n\n    <span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"n\">_get_cluster_from</span><span class=\"p\">(</span><span class=\"n\">system</span> <span class=\"ow\">or</span> <span class=\"n\">_current_cluster</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s2\">&quot;config&quot;</span><span class=\"p\">),</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"n\">Env</span><span class=\"p\">):</span>\n        <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">_get_env_from</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">Env</span><span class=\"p\">()</span>\n        <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">working_dir</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">working_dir</span> <span class=\"ow\">or</span> <span class=\"s2\">&quot;./&quot;</span>\n\n    <span class=\"n\">pointers</span> <span class=\"o\">=</span> <span class=\"n\">Module</span><span class=\"o\">.</span><span class=\"n\">_extract_pointers</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">reqs</span><span class=\"p\">)</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span> <span class=\"ow\">or</span> <span class=\"p\">(</span>\n        <span class=\"n\">pointers</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"n\">pointers</span> <span class=\"k\">else</span> <span class=\"n\">_generate_default_name</span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s2\">&quot;module&quot;</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">signature</span> <span class=\"o\">=</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">signature</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># return _module_subclass_factory(cls, pointers, system, env, name, signature)</span>\n    <span class=\"n\">module_subclass</span> <span class=\"o\">=</span> <span class=\"n\">_module_subclass_factory</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">pointers</span><span class=\"p\">,</span> <span class=\"n\">signature</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">module_subclass</span><span class=\"p\">(</span>\n        <span class=\"n\">system</span><span class=\"o\">=</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">,</span> <span class=\"n\">cls_pointers</span><span class=\"o\">=</span><span class=\"n\">pointers</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span>\n    <span class=\"p\">)</span></div>\n</pre></div>", "current_page_name": "_modules/runhouse/rns/module", "sidebars": ["about.html", "navigation.html", "relations.html", "searchbox.html", "donate.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12"}