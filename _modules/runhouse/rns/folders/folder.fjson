{"parents": [{"link": "../../../../", "title": "Module code"}], "title": "runhouse.rns.folders.folder", "body": "<h1>Source code for runhouse.rns.folders.folder</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">copy</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">shutil</span>\n<span class=\"kn\">import</span> <span class=\"nn\">subprocess</span>\n<span class=\"kn\">import</span> <span class=\"nn\">tempfile</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">,</span> <span class=\"n\">Union</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">fsspec</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">sshfs</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.rh_config</span> <span class=\"kn\">import</span> <span class=\"n\">rns_client</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.rns.api_utils.utils</span> <span class=\"kn\">import</span> <span class=\"n\">generate_uuid</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.rns.resource</span> <span class=\"kn\">import</span> <span class=\"n\">Resource</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.rns.top_level_rns_fns</span> <span class=\"kn\">import</span> <span class=\"n\">exists</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.rns.utils.hardware</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">_current_cluster</span><span class=\"p\">,</span>\n    <span class=\"n\">_get_cluster_from</span><span class=\"p\">,</span>\n    <span class=\"n\">RESERVED_SYSTEM_NAMES</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">fsspec</span><span class=\"o\">.</span><span class=\"n\">register_implementation</span><span class=\"p\">(</span><span class=\"s2\">&quot;ssh&quot;</span><span class=\"p\">,</span> <span class=\"n\">sshfs</span><span class=\"o\">.</span><span class=\"n\">SSHFileSystem</span><span class=\"p\">)</span>\n<span class=\"c1\"># SSHFileSystem is not yet builtin.</span>\n<span class=\"c1\"># Line above suggested by fsspec devs: https://github.com/fsspec/filesystem_spec/issues/1071</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"n\">PROVIDER_FS_LOOKUP</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;aws&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;s3&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;gcp&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;gs&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;azure&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;abfs&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;oracle&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;ocifs&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;databricks&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;dbfs&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;github&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;github&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n\n<div class=\"viewcode-block\" id=\"Folder\"><a class=\"viewcode-back\" href=\"../../../../../api/python/folder/#runhouse.Folder\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Folder</span><span class=\"p\">(</span><span class=\"n\">Resource</span><span class=\"p\">):</span>\n    <span class=\"n\">RESOURCE_TYPE</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;folder&quot;</span>\n    <span class=\"n\">DEFAULT_FS</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;file&quot;</span>\n    <span class=\"n\">CLUSTER_FS</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;ssh&quot;</span>\n    <span class=\"n\">DEFAULT_FOLDER_PATH</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;/runhouse-folder&quot;</span>\n    <span class=\"n\">DEFAULT_CACHE_FOLDER</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;~/.cache/runhouse&quot;</span>\n\n<div class=\"viewcode-block\" id=\"Folder.__init__\"><a class=\"viewcode-back\" href=\"../../../../../api/python/folder/#runhouse.Folder.__init__\">[docs]</a>    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">system</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">dryrun</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">local_mount</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">data_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>  <span class=\"c1\"># We have this here to ignore extra arguments when calling from from_config</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Runhouse Folder object.</span>\n\n<span class=\"sd\">        .. note::</span>\n<span class=\"sd\">            To build a folder, please use the factory method :func:`folder`.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_system</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fsspec_fs</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fsspec_fs_str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"n\">current_cluster_config</span> <span class=\"o\">=</span> <span class=\"n\">_current_cluster</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s2\">&quot;config&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">current_cluster_config</span> <span class=\"ow\">and</span> <span class=\"n\">system</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"kn\">from</span> <span class=\"nn\">runhouse.rns.hardware.cluster</span> <span class=\"kn\">import</span> <span class=\"n\">Cluster</span>\n\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"n\">Cluster</span><span class=\"o\">.</span><span class=\"n\">from_config</span><span class=\"p\">(</span><span class=\"n\">current_cluster_config</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n            <span class=\"kn\">from</span> <span class=\"nn\">runhouse.rns.hardware.cluster</span> <span class=\"kn\">import</span> <span class=\"n\">Cluster</span>\n\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"n\">Cluster</span><span class=\"o\">.</span><span class=\"n\">from_config</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"n\">system</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_FS</span>\n\n        <span class=\"c1\"># TODO [DG] Should we ever be allowing this to be None?</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_path</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">default_path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rns_address</span><span class=\"p\">,</span> <span class=\"n\">system</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">path</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n            <span class=\"k\">else</span> <span class=\"n\">path</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">Resource</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span> <span class=\"n\">path</span>\n            <span class=\"k\">if</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">expanduser</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_absolute</span><span class=\"p\">()</span>\n            <span class=\"k\">else</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">locate_working_dir</span><span class=\"p\">())</span> <span class=\"o\">/</span> <span class=\"n\">path</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_config</span> <span class=\"o\">=</span> <span class=\"n\">data_config</span> <span class=\"ow\">or</span> <span class=\"p\">{}</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">local_mount</span> <span class=\"o\">=</span> <span class=\"n\">local_mount</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_local_mount_path</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"n\">local_mount</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mount</span><span class=\"p\">(</span><span class=\"n\">tmp</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dryrun</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mkdir</span><span class=\"p\">()</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__getstate__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Override the pickle method to clear _fsspec_fs before pickling.&quot;&quot;&quot;</span>\n        <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n        <span class=\"n\">state</span><span class=\"p\">[</span><span class=\"s2\">&quot;_fsspec_fs&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">return</span> <span class=\"n\">state</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">default_path</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">rns_address</span><span class=\"p\">,</span> <span class=\"n\">system</span><span class=\"p\">):</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">runhouse.rns.hardware</span> <span class=\"kn\">import</span> <span class=\"n\">Cluster</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">system</span> <span class=\"o\">==</span> <span class=\"n\">Folder</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_FS</span> <span class=\"ow\">or</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">rns_address</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span>\n                    <span class=\"n\">Path</span><span class=\"o\">.</span><span class=\"n\">cwd</span><span class=\"p\">()</span> <span class=\"o\">/</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">split_rns_name_and_path</span><span class=\"p\">(</span><span class=\"n\">rns_address</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"p\">)</span>  <span class=\"c1\"># saves to cwd / name</span>\n            <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">Folder</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_CACHE_FOLDER</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">{</span><span class=\"n\">generate_uuid</span><span class=\"p\">()</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># If no path provided for a remote file system default to its name if provided</span>\n            <span class=\"k\">if</span> <span class=\"n\">rns_address</span><span class=\"p\">:</span>\n                <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">rns_address</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;/&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_&quot;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;.</span><span class=\"si\">{</span><span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">RESOURCE_TYPE</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n                <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">Folder</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_FOLDER_PATH</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n            <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">Folder</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_FOLDER_PATH</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">{</span><span class=\"n\">generate_uuid</span><span class=\"p\">()</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n\n    <span class=\"c1\"># ----------------------------------</span>\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_config</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">_resolve_children</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">_resolve_children</span><span class=\"p\">:</span>\n            <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">Folder</span><span class=\"o\">.</span><span class=\"n\">_check_for_child_configs</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Load config values into the object.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;system&quot;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;s3&quot;</span><span class=\"p\">:</span>\n            <span class=\"kn\">from</span> <span class=\"nn\">.s3_folder</span> <span class=\"kn\">import</span> <span class=\"n\">S3Folder</span>\n\n            <span class=\"k\">return</span> <span class=\"n\">S3Folder</span><span class=\"o\">.</span><span class=\"n\">from_config</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;system&quot;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;gs&quot;</span><span class=\"p\">:</span>\n            <span class=\"kn\">from</span> <span class=\"nn\">.gcs_folder</span> <span class=\"kn\">import</span> <span class=\"n\">GCSFolder</span>\n\n            <span class=\"k\">return</span> <span class=\"n\">GCSFolder</span><span class=\"o\">.</span><span class=\"n\">from_config</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;system&quot;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;azure&quot;</span><span class=\"p\">:</span>\n            <span class=\"kn\">from</span> <span class=\"nn\">.azure_folder</span> <span class=\"kn\">import</span> <span class=\"n\">AzureFolder</span>\n\n            <span class=\"k\">return</span> <span class=\"n\">AzureFolder</span><span class=\"o\">.</span><span class=\"n\">from_config</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;system&quot;</span><span class=\"p\">],</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n            <span class=\"kn\">from</span> <span class=\"nn\">runhouse.rns.hardware</span> <span class=\"kn\">import</span> <span class=\"n\">Cluster</span>\n\n            <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;system&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Cluster</span><span class=\"o\">.</span><span class=\"n\">from_config</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;system&quot;</span><span class=\"p\">],</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">Folder</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_check_for_child_configs</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Overload by child resources to load any resources they hold internally.&quot;&quot;&quot;</span>\n        <span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;system&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)</span>\n            <span class=\"ow\">and</span> <span class=\"n\">system</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">RESERVED_SYSTEM_NAMES</span>\n            <span class=\"ow\">and</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">)</span>\n        <span class=\"p\">):</span>\n            <span class=\"c1\"># if the system is set to a cluster</span>\n            <span class=\"n\">cluster_config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">load_config</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">system</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">cluster_config</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;No cluster config saved for </span><span class=\"si\">{</span><span class=\"n\">system</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n            <span class=\"c1\"># set the cluster config as the system</span>\n            <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;system&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">cluster_config</span>\n        <span class=\"k\">return</span> <span class=\"n\">config</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_path</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span> <span class=\"o\">==</span> <span class=\"n\">Folder</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_FS</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">expanduser</span><span class=\"p\">())</span>\n            <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fs_str</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">CLUSTER_FS</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_path</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;~/&quot;</span><span class=\"p\">):</span>\n                <span class=\"c1\"># sftp takes relative paths to the home directory but doesn&#39;t understand &#39;~&#39;</span>\n                <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_path</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:])</span>\n            <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_path</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n    <span class=\"nd\">@path</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_path</span> <span class=\"o\">=</span> <span class=\"n\">path</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_local_mount_path</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">system</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_system</span>\n\n    <span class=\"nd\">@system</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">system</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data_source</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_system</span> <span class=\"o\">=</span> <span class=\"n\">data_source</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fsspec_fs</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"c1\"># Maybe figure out how to free sshfs properly (https://github.com/ronf/asyncssh/issues/112)</span>\n    <span class=\"c1\"># def __del__(self):</span>\n    <span class=\"c1\">#     if self.local_mount:</span>\n    <span class=\"c1\">#         self.unmount()</span>\n    <span class=\"c1\">#     if self._fsspec_fs and hasattr(self._fsspec_fs, &quot;close&quot;):</span>\n    <span class=\"c1\">#         self._fsspec_fs.close()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">data_config</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">Resource</span><span class=\"p\">):</span>  <span class=\"c1\"># if system is a cluster</span>\n            <span class=\"c1\"># handle case cluster is itself</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">():</span>\n                <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data_config</span>\n\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">_update_from_sky_status</span><span class=\"p\">(</span><span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"p\">:</span>\n                    <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                        <span class=\"s2\">&quot;Cluster must be started before copying data from it.&quot;</span>\n                    <span class=\"p\">)</span>\n            <span class=\"n\">creds</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">ssh_creds</span><span class=\"p\">()</span>\n            <span class=\"n\">config_creds</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                <span class=\"s2\">&quot;host&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;username&quot;</span><span class=\"p\">:</span> <span class=\"n\">creds</span><span class=\"p\">[</span><span class=\"s2\">&quot;ssh_user&quot;</span><span class=\"p\">],</span>\n                <span class=\"c1\"># &#39;key_filename&#39;: str(Path(creds[&#39;ssh_private_key&#39;]).expanduser())}  # For SFTP</span>\n                <span class=\"s2\">&quot;client_keys&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                    <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">creds</span><span class=\"p\">[</span><span class=\"s2\">&quot;ssh_private_key&quot;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">expanduser</span><span class=\"p\">())</span>\n                <span class=\"p\">],</span>  <span class=\"c1\"># For SSHFS</span>\n                <span class=\"s2\">&quot;connect_timeout&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;3s&quot;</span><span class=\"p\">,</span>\n            <span class=\"p\">}</span>\n            <span class=\"n\">ret_config</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data_config</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n            <span class=\"n\">ret_config</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">config_creds</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">ret_config</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data_config</span>\n\n    <span class=\"nd\">@data_config</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">data_config</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data_config</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data_config</span> <span class=\"o\">=</span> <span class=\"n\">data_config</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fsspec_fs</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_fs_str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">Resource</span><span class=\"p\">):</span>  <span class=\"c1\"># if system is a cluster</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">():</span>\n                <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_FS</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">CLUSTER_FS</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">fsspec_fs</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fsspec_fs_str</span> <span class=\"o\">!=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fs_str</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fsspec_fs</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fsspec_fs_str</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fs_str</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fsspec_fs</span> <span class=\"o\">=</span> <span class=\"n\">fsspec</span><span class=\"o\">.</span><span class=\"n\">filesystem</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fsspec_fs_str</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_config</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fsspec_fs</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">local_path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_local</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_local_mount_path</span> <span class=\"ow\">or</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">expanduser</span><span class=\"p\">())</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n<div class=\"viewcode-block\" id=\"Folder.is_writable\"><a class=\"viewcode-back\" href=\"../../../../../api/python/folder/#runhouse.Folder.is_writable\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">is_writable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Whether the folder is writable.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; if my_folder.is_writable():</span>\n<span class=\"sd\">            &gt;&gt;&gt;     ....</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># If the filesystem hasn&#39;t overridden mkdirs, it&#39;s a no-op and the filesystem is probably readonly</span>\n        <span class=\"c1\"># (e.g. https://filesystem-spec.readthedocs.io/en/latest/_modules/fsspec/implementations/github.html).</span>\n        <span class=\"c1\"># In that case, we should just create a new folder in the default</span>\n        <span class=\"c1\"># location and add it as a child to the parent folder.</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fsspec_fs</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"n\">mkdirs</span> <span class=\"o\">==</span> <span class=\"n\">fsspec</span><span class=\"o\">.</span><span class=\"n\">AbstractFileSystem</span><span class=\"o\">.</span><span class=\"n\">mkdirs</span></div>\n\n<div class=\"viewcode-block\" id=\"Folder.mv\"><a class=\"viewcode-back\" href=\"../../../../../api/python/folder/#runhouse.Folder.mv\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">mv</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">data_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Move the folder to a new filesystem or cluster.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; folder = rh.folder(path=&quot;local/path&quot;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; folder.mv(my_cluster)</span>\n<span class=\"sd\">            &gt;&gt;&gt; folder.mv(&quot;s3&quot;, &quot;s3_bucket/path&quot;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># TODO [DG] create get_default_path for system method to be shared</span>\n        <span class=\"k\">if</span> <span class=\"n\">path</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;rh/&quot;</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rns_address</span>\n        <span class=\"n\">data_config</span> <span class=\"o\">=</span> <span class=\"n\">data_config</span> <span class=\"ow\">or</span> <span class=\"p\">{}</span>\n        <span class=\"k\">with</span> <span class=\"n\">fsspec</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fsspec_url</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_config</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">src</span><span class=\"p\">:</span>\n            <span class=\"k\">with</span> <span class=\"n\">fsspec</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">system</span><span class=\"si\">}</span><span class=\"s2\">://</span><span class=\"si\">{</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">data_config</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">dest</span><span class=\"p\">:</span>\n                <span class=\"c1\"># NOTE For packages, maybe use the `ignore` param here to only copy python files.</span>\n                <span class=\"n\">new_path</span> <span class=\"o\">=</span> <span class=\"n\">shutil</span><span class=\"o\">.</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"n\">dest</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">new_path</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"n\">system</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_config</span> <span class=\"o\">=</span> <span class=\"n\">data_config</span> <span class=\"ow\">or</span> <span class=\"p\">{}</span></div>\n\n<div class=\"viewcode-block\" id=\"Folder.to\"><a class=\"viewcode-back\" href=\"../../../../../api/python/folder/#runhouse.Folder.to\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">to</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">system</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Cluster&quot;</span><span class=\"p\">],</span>\n        <span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Path</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">data_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Copy the folder to a new filesystem, and return a new Folder object pointing to the new location.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">system</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;here&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">current_cluster_config</span> <span class=\"o\">=</span> <span class=\"n\">_current_cluster</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s2\">&quot;config&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">current_cluster_config</span><span class=\"p\">:</span>\n                <span class=\"kn\">from</span> <span class=\"nn\">runhouse.rns.hardware.cluster</span> <span class=\"kn\">import</span> <span class=\"n\">Cluster</span>\n\n                <span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"n\">Cluster</span><span class=\"o\">.</span><span class=\"n\">from_config</span><span class=\"p\">(</span><span class=\"n\">current_cluster_config</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;file&quot;</span>\n            <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"o\">.</span><span class=\"n\">cwd</span><span class=\"p\">()</span> <span class=\"o\">/</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;/&quot;</span><span class=\"p\">)[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"k\">if</span> <span class=\"n\">path</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"k\">else</span> <span class=\"n\">path</span>\n\n        <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span>\n            <span class=\"n\">path</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">default_path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rns_address</span><span class=\"p\">,</span> <span class=\"n\">system</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>  <span class=\"c1\"># Make sure it&#39;s a string and not a Path</span>\n\n        <span class=\"n\">system_str</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span>\n            <span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">,</span> <span class=\"n\">system</span>\n        <span class=\"p\">)</span>  <span class=\"c1\"># Use system.name if available, i.e. system is a cluster</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n            <span class=\"sa\">f</span><span class=\"s2\">&quot;Copying folder from </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fsspec_url</span><span class=\"si\">}</span><span class=\"s2\"> to: </span><span class=\"si\">{</span><span class=\"n\">system_str</span><span class=\"si\">}</span><span class=\"s2\">, with path: </span><span class=\"si\">{</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"c1\"># to_local, to_cluster and to_data_store are also overridden by subclasses to dispatch</span>\n        <span class=\"c1\"># to more performant cloud-specific APIs</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">runhouse.rns.hardware</span> <span class=\"kn\">import</span> <span class=\"n\">Cluster</span>\n\n        <span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"n\">_get_cluster_from</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">system</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;file&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_to_local</span><span class=\"p\">(</span><span class=\"n\">dest_path</span><span class=\"o\">=</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">data_config</span><span class=\"o\">=</span><span class=\"n\">data_config</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">):</span>  <span class=\"c1\"># If system is a cluster</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_to_cluster</span><span class=\"p\">(</span><span class=\"n\">dest_cluster</span><span class=\"o\">=</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">path</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">system</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;s3&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;gs&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;azure&quot;</span><span class=\"p\">]:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_to_data_store</span><span class=\"p\">(</span>\n                <span class=\"n\">system</span><span class=\"o\">=</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">data_store_path</span><span class=\"o\">=</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">data_config</span><span class=\"o\">=</span><span class=\"n\">data_config</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fsspec_copy</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">data_config</span><span class=\"p\">)</span>\n            <span class=\"n\">new_folder</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n            <span class=\"n\">new_folder</span><span class=\"o\">.</span><span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">path</span>\n            <span class=\"n\">new_folder</span><span class=\"o\">.</span><span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"n\">system</span>\n            <span class=\"n\">new_folder</span><span class=\"o\">.</span><span class=\"n\">data_config</span> <span class=\"o\">=</span> <span class=\"n\">data_config</span> <span class=\"ow\">or</span> <span class=\"p\">{}</span>\n            <span class=\"k\">return</span> <span class=\"n\">new_folder</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_fsspec_copy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">system</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">data_config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Copy the fsspec filesystem to the given new filesystem and path.&quot;&quot;&quot;</span>\n        <span class=\"c1\"># Fallback for other fsspec filesystems, but very slow:</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_local</span><span class=\"p\">():</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fsspec_fs</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">system</span><span class=\"si\">}</span><span class=\"s2\">://</span><span class=\"si\">{</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">recursive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># This is really really slow, maybe use skyplane, as follows:</span>\n            <span class=\"c1\"># src_url = f&#39;local://{self.path}&#39; if self.is_local() else self.fsspec_url</span>\n            <span class=\"c1\"># subprocess.run([&#39;skyplane&#39;, &#39;sync&#39;, src_url, f&#39;{system}://{path}&#39;])</span>\n\n            <span class=\"c1\"># FYI: from https://github.com/fsspec/filesystem_spec/issues/909</span>\n            <span class=\"c1\"># Maybe copy chunks https://github.com/fsspec/filesystem_spec/issues/909#issuecomment-1204212507</span>\n            <span class=\"n\">src</span> <span class=\"o\">=</span> <span class=\"n\">fsspec</span><span class=\"o\">.</span><span class=\"n\">get_mapper</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fsspec_url</span><span class=\"p\">,</span> <span class=\"n\">create</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_config</span><span class=\"p\">)</span>\n            <span class=\"n\">dest</span> <span class=\"o\">=</span> <span class=\"n\">fsspec</span><span class=\"o\">.</span><span class=\"n\">get_mapper</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">system</span><span class=\"si\">}</span><span class=\"s2\">://</span><span class=\"si\">{</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">create</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">data_config</span><span class=\"p\">)</span>\n            <span class=\"c1\"># dest.system.mkdir(dest.root, create_parents=True)</span>\n            <span class=\"kn\">import</span> <span class=\"nn\">tqdm</span>\n\n            <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"n\">tqdm</span><span class=\"o\">.</span><span class=\"n\">tqdm</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">):</span>\n                <span class=\"c1\"># NOTE For packages, maybe use the `ignore` param here to only copy python files.</span>\n                <span class=\"n\">dest</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">src</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span>\n                <span class=\"c1\"># dst.write(src.read())</span>\n\n<div class=\"viewcode-block\" id=\"Folder.destination_folder\"><a class=\"viewcode-back\" href=\"../../../../../api/python/folder/#runhouse.Folder.destination_folder\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">destination_folder</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">dest_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n        <span class=\"n\">dest_system</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;file&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">data_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Returns a new Folder object pointing to the destination folder.&quot;&quot;&quot;</span>\n        <span class=\"n\">new_folder</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"n\">new_folder</span><span class=\"o\">.</span><span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">dest_path</span>\n        <span class=\"n\">new_folder</span><span class=\"o\">.</span><span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"n\">dest_system</span>\n        <span class=\"n\">new_folder</span><span class=\"o\">.</span><span class=\"n\">data_config</span> <span class=\"o\">=</span> <span class=\"n\">data_config</span> <span class=\"ow\">or</span> <span class=\"p\">{}</span>\n        <span class=\"k\">return</span> <span class=\"n\">new_folder</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_to_local</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">dest_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">data_config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Copies folder to local.&quot;&quot;&quot;</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">runhouse.rns.hardware</span> <span class=\"kn\">import</span> <span class=\"n\">Cluster</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fs_str</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;file&quot;</span>\n        <span class=\"p\">):</span>  <span class=\"c1\"># Also covers the case where we&#39;re on the cluster at system</span>\n            <span class=\"c1\"># Simply move the files within local system</span>\n            <span class=\"n\">shutil</span><span class=\"o\">.</span><span class=\"n\">copytree</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">dst</span><span class=\"o\">=</span><span class=\"n\">dest_path</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cluster_to_local</span><span class=\"p\">(</span><span class=\"n\">cluster</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">dest_path</span><span class=\"o\">=</span><span class=\"n\">dest_path</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fsspec_copy</span><span class=\"p\">(</span><span class=\"s2\">&quot;file&quot;</span><span class=\"p\">,</span> <span class=\"n\">dest_path</span><span class=\"p\">,</span> <span class=\"n\">data_config</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">destination_folder</span><span class=\"p\">(</span>\n            <span class=\"n\">dest_path</span><span class=\"o\">=</span><span class=\"n\">dest_path</span><span class=\"p\">,</span> <span class=\"n\">dest_system</span><span class=\"o\">=</span><span class=\"s2\">&quot;file&quot;</span><span class=\"p\">,</span> <span class=\"n\">data_config</span><span class=\"o\">=</span><span class=\"n\">data_config</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_to_data_store</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">system</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n        <span class=\"n\">data_store_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">data_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Local or cluster to blob storage.&quot;&quot;&quot;</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">runhouse.rns.hardware</span> <span class=\"kn\">import</span> <span class=\"n\">Cluster</span>\n\n        <span class=\"n\">local_folder_path</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span>\n\n        <span class=\"n\">folder_config</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config_for_rns</span>\n        <span class=\"n\">folder_config</span><span class=\"p\">[</span><span class=\"s2\">&quot;system&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">system</span>\n        <span class=\"n\">folder_config</span><span class=\"p\">[</span><span class=\"s2\">&quot;path&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">data_store_path</span>\n        <span class=\"n\">folder_config</span><span class=\"p\">[</span><span class=\"s2\">&quot;data_config&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">data_config</span>\n        <span class=\"n\">new_folder</span> <span class=\"o\">=</span> <span class=\"n\">Folder</span><span class=\"o\">.</span><span class=\"n\">from_config</span><span class=\"p\">(</span><span class=\"n\">folder_config</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fs_str</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;file&quot;</span>\n        <span class=\"p\">):</span>  <span class=\"c1\"># Also covers the case where we&#39;re on the cluster at system</span>\n            <span class=\"n\">new_folder</span><span class=\"o\">.</span><span class=\"n\">_upload</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"o\">=</span><span class=\"n\">local_folder_path</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span>\n                <span class=\"p\">[</span>\n                    <span class=\"n\">new_folder</span><span class=\"o\">.</span><span class=\"n\">_upload_command</span><span class=\"p\">(</span>\n                        <span class=\"n\">src</span><span class=\"o\">=</span><span class=\"n\">local_folder_path</span><span class=\"p\">,</span> <span class=\"n\">dest</span><span class=\"o\">=</span><span class=\"n\">new_folder</span><span class=\"o\">.</span><span class=\"n\">path</span>\n                    <span class=\"p\">)</span>\n                <span class=\"p\">]</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fsspec_copy</span><span class=\"p\">(</span><span class=\"s2\">&quot;file&quot;</span><span class=\"p\">,</span> <span class=\"n\">data_store_path</span><span class=\"p\">,</span> <span class=\"n\">data_config</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">new_folder</span>\n\n<div class=\"viewcode-block\" id=\"Folder.rsync\"><a class=\"viewcode-back\" href=\"../../../../../api/python/folder/#runhouse.Folder.rsync\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">rsync</span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">,</span> <span class=\"n\">remote</span><span class=\"p\">,</span> <span class=\"n\">data_config</span><span class=\"p\">,</span> <span class=\"n\">up</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Rsync local folder to remote.&quot;&quot;&quot;</span>\n        <span class=\"n\">dest_str</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s1\">&#39;</span><span class=\"si\">{</span><span class=\"n\">data_config</span><span class=\"p\">[</span><span class=\"s2\">&quot;username&quot;</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s1\">@</span><span class=\"si\">{</span><span class=\"n\">data_config</span><span class=\"p\">[</span><span class=\"s2\">&quot;host&quot;</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s1\">:</span><span class=\"si\">{</span><span class=\"n\">remote</span><span class=\"si\">}</span><span class=\"s1\">&#39;</span>\n        <span class=\"n\">src_str</span> <span class=\"o\">=</span> <span class=\"n\">local</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">up</span><span class=\"p\">:</span>\n            <span class=\"n\">src_str</span><span class=\"p\">,</span> <span class=\"n\">dest_str</span> <span class=\"o\">=</span> <span class=\"n\">dest_str</span><span class=\"p\">,</span> <span class=\"n\">src_str</span>\n        <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">check_call</span><span class=\"p\">(</span>\n            <span class=\"sa\">f</span><span class=\"s2\">&quot;rsync </span><span class=\"si\">{</span><span class=\"n\">src_str</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">{</span><span class=\"n\">dest_str</span><span class=\"si\">}</span><span class=\"s2\"> &quot;</span>\n            <span class=\"sa\">f</span><span class=\"s1\">&#39;--password_file </span><span class=\"si\">{</span><span class=\"n\">data_config</span><span class=\"p\">[</span><span class=\"s2\">&quot;key_filename&quot;</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s1\">&#39;</span>\n        <span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Folder.mkdir\"><a class=\"viewcode-back\" href=\"../../../../../api/python/folder/#runhouse.Folder.mkdir\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">mkdir</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Create the folder in specified file system if it doesn&#39;t already exist.&quot;&quot;&quot;</span>\n        <span class=\"n\">folder_path</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span>\n        <span class=\"k\">if</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">basename</span><span class=\"p\">(</span><span class=\"n\">folder_path</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">suffix</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">folder_path</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">folder_path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"p\">)</span>\n\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n            <span class=\"sa\">f</span><span class=\"s2\">&quot;Creating new </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fs_str</span><span class=\"si\">}</span><span class=\"s2\"> folder if it does not already exist in path: </span><span class=\"si\">{</span><span class=\"n\">folder_path</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fsspec_fs</span><span class=\"o\">.</span><span class=\"n\">mkdirs</span><span class=\"p\">(</span><span class=\"n\">folder_path</span><span class=\"p\">,</span> <span class=\"n\">exist_ok</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Folder.mount\"><a class=\"viewcode-back\" href=\"../../../../../api/python/folder/#runhouse.Folder.mount\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">mount</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">tmp</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Mount the folder locally.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            remote_folder = rh.folder(&quot;folder/path&quot;, system=&quot;s3&quot;)</span>\n<span class=\"sd\">            local_mount = remote_folder.mount()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># TODO check that fusepy and FUSE are installed</span>\n        <span class=\"k\">if</span> <span class=\"n\">tmp</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_local_mount_path</span> <span class=\"o\">=</span> <span class=\"n\">tempfile</span><span class=\"o\">.</span><span class=\"n\">mkdtemp</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_local_mount_path</span> <span class=\"o\">=</span> <span class=\"n\">path</span>\n        <span class=\"n\">remote_fs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fsspec_fs</span>\n        <span class=\"n\">fsspec</span><span class=\"o\">.</span><span class=\"n\">fuse</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span>\n            <span class=\"n\">fs</span><span class=\"o\">=</span><span class=\"n\">remote_fs</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">mount_point</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_local_mount_path</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_local_mount_path</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_to_cluster</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">dest_cluster</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mount</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Copy the folder from a file or cluster source onto a destination cluster.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">dest_cluster</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Cluster must be started before copying data to it.&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Create tmp_mount if needed</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_local</span><span class=\"p\">()</span> <span class=\"ow\">and</span> <span class=\"n\">mount</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mount</span><span class=\"p\">(</span><span class=\"n\">tmp</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n        <span class=\"n\">dest_path</span> <span class=\"o\">=</span> <span class=\"n\">path</span> <span class=\"ow\">or</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;~/</span><span class=\"si\">{</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n\n        <span class=\"c1\"># Need to add slash for rsync to copy the contents of the folder</span>\n        <span class=\"n\">dest_folder</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"n\">dest_folder</span><span class=\"o\">.</span><span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">dest_path</span>\n        <span class=\"n\">dest_folder</span><span class=\"o\">.</span><span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"n\">dest_cluster</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fs_str</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;file&quot;</span><span class=\"p\">:</span>  <span class=\"c1\"># Includes case where we&#39;re on the cluster</span>\n            <span class=\"n\">dest_cluster</span><span class=\"o\">.</span><span class=\"n\">_rsync</span><span class=\"p\">(</span>\n                <span class=\"n\">source</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">dest</span><span class=\"o\">=</span><span class=\"n\">dest_path</span><span class=\"p\">,</span> <span class=\"n\">up</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">contents</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">Resource</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">rns_address</span> <span class=\"o\">==</span> <span class=\"n\">dest_cluster</span><span class=\"o\">.</span><span class=\"n\">rns_address</span><span class=\"p\">:</span>\n                <span class=\"c1\"># We&#39;re on the same cluster, so we can just move the files</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">path</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># If user didn&#39;t specify a path, we can just return self</span>\n                    <span class=\"k\">return</span> <span class=\"bp\">self</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">dest_cluster</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span>\n                        <span class=\"p\">[</span><span class=\"sa\">f</span><span class=\"s2\">&quot;mkdir -p </span><span class=\"si\">{</span><span class=\"n\">dest_path</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;cp -r </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"s2\">/* </span><span class=\"si\">{</span><span class=\"n\">dest_path</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">],</span>\n                    <span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cluster_to_cluster</span><span class=\"p\">(</span><span class=\"n\">dest_cluster</span><span class=\"p\">,</span> <span class=\"n\">dest_path</span><span class=\"p\">)</span>\n\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># data store folders have their own specific _to_cluster functions</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;`Sending from filesystem type </span><span class=\"si\">{</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\"> is not supported&quot;</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">dest_folder</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_cluster_to_cluster</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">dest_cluster</span><span class=\"p\">,</span> <span class=\"n\">dest_path</span><span class=\"p\">):</span>\n        <span class=\"n\">src_path</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span>\n\n        <span class=\"n\">cluster_creds</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">ssh_creds</span><span class=\"p\">()</span>\n        <span class=\"n\">creds_file</span> <span class=\"o\">=</span> <span class=\"n\">cluster_creds</span><span class=\"p\">[</span><span class=\"s2\">&quot;ssh_private_key&quot;</span><span class=\"p\">]</span>\n\n        <span class=\"n\">dest_cluster</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">([</span><span class=\"sa\">f</span><span class=\"s2\">&quot;mkdir -p </span><span class=\"si\">{</span><span class=\"n\">dest_path</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">])</span>\n        <span class=\"n\">command</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"sa\">f</span><span class=\"s2\">&quot;rsync -Pavz --filter=&#39;dir-merge,- .gitignore&#39; -e </span><span class=\"se\">\\&quot;</span><span class=\"s2\">ssh -i &#39;</span><span class=\"si\">{</span><span class=\"n\">creds_file</span><span class=\"si\">}</span><span class=\"s2\">&#39; &quot;</span>\n            <span class=\"sa\">f</span><span class=\"s2\">&quot;-o StrictHostKeyChecking=no -o IdentitiesOnly=yes -o ExitOnForwardFailure=yes &quot;</span>\n            <span class=\"sa\">f</span><span class=\"s2\">&quot;-o ServerAliveInterval=5 -o ServerAliveCountMax=3 -o ConnectTimeout=30s -o ForwardAgent=yes &quot;</span>\n            <span class=\"sa\">f</span><span class=\"s1\">&#39;-o ControlMaster=auto -o ControlPersist=300s&quot; </span><span class=\"si\">{</span><span class=\"n\">src_path</span><span class=\"si\">}</span><span class=\"s1\">/ </span><span class=\"si\">{</span><span class=\"n\">dest_cluster</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"si\">}</span><span class=\"s1\">:</span><span class=\"si\">{</span><span class=\"n\">dest_path</span><span class=\"si\">}</span><span class=\"s1\">&#39;</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">status_codes</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">([</span><span class=\"n\">command</span><span class=\"p\">])</span>\n        <span class=\"k\">if</span> <span class=\"n\">status_codes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;Error syncing folder to destination cluster (</span><span class=\"si\">{</span><span class=\"n\">dest_cluster</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">). &quot;</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;Make sure the source cluster (</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">) has the necessary provider keys &quot;</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;loaded in path: </span><span class=\"si\">{</span><span class=\"n\">creds_file</span><span class=\"si\">}</span><span class=\"s2\">. &quot;</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;For example: `rh.Secrets.to(</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">, providers=[&#39;aws&#39;])`&quot;</span>\n            <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_cluster_to_local</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">cluster</span><span class=\"p\">,</span> <span class=\"n\">dest_path</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Create a local folder with dest_path from the cluster.</span>\n\n<span class=\"sd\">        This function rsyncs down the data and return a folder with system==&#39;file&#39;.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">cluster</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Cluster must be started before copying data from it.&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">dest_path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">expanduser</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">mkdir</span><span class=\"p\">(</span><span class=\"n\">parents</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">exist_ok</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">cluster</span><span class=\"o\">.</span><span class=\"n\">_rsync</span><span class=\"p\">(</span>\n            <span class=\"n\">source</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">,</span>\n            <span class=\"n\">dest</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">dest_path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">expanduser</span><span class=\"p\">()),</span>\n            <span class=\"n\">up</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"n\">contents</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">new_folder</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"n\">new_folder</span><span class=\"o\">.</span><span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">dest_path</span>\n        <span class=\"n\">new_folder</span><span class=\"o\">.</span><span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;file&quot;</span>\n        <span class=\"c1\"># Don&#39;t need to do anything with _data_config because cluster creds are injected virtually through the</span>\n        <span class=\"c1\"># data_config property</span>\n        <span class=\"k\">return</span> <span class=\"n\">new_folder</span>\n\n<div class=\"viewcode-block\" id=\"Folder.is_local\"><a class=\"viewcode-back\" href=\"../../../../../api/python/folder/#runhouse.Folder.is_local\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">is_local</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Whether the folder is on the local filesystem.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; is_local = my_folder.is_local()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fs_str</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;file&quot;</span>\n            <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n            <span class=\"ow\">and</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">expanduser</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">()</span>\n        <span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_local_mount_path</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_upload</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">src</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">region</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Upload a folder to a remote bucket.&quot;&quot;&quot;</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_upload_command</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">src</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">dest</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;CLI command for uploading folder to remote bucket. Needed when uploading a folder from a cluster.&quot;&quot;&quot;</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_run_upload_cli_cmd</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sync_dir_command</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">access_denied_message</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Uploads a folder to a remote bucket.</span>\n<span class=\"sd\">        Based on the CLI command skypilot uses to upload the folder&quot;&quot;&quot;</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">sky.data.data_utils</span> <span class=\"kn\">import</span> <span class=\"n\">run_upload_cli</span>\n\n        <span class=\"n\">run_upload_cli</span><span class=\"p\">(</span>\n            <span class=\"n\">command</span><span class=\"o\">=</span><span class=\"n\">sync_dir_command</span><span class=\"p\">,</span>\n            <span class=\"n\">access_denied_message</span><span class=\"o\">=</span><span class=\"n\">access_denied_message</span><span class=\"p\">,</span>\n            <span class=\"n\">bucket_name</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_bucket_name_from_path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">),</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_download</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">dest</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_download_command</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"n\">dest</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;CLI command for downloading folder from remote bucket. Needed when downloading a folder to a cluster.&quot;&quot;&quot;</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">config_for_rns</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">config_for_rns</span>\n        <span class=\"n\">config_attrs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;local_mount&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;data_config&quot;</span><span class=\"p\">]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">save_attrs_to_config</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">config_attrs</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span> <span class=\"o\">==</span> <span class=\"n\">Folder</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_FS</span><span class=\"p\">:</span>\n            <span class=\"c1\"># If folder is local check whether path is relative, and if so take it relative to the working director</span>\n            <span class=\"c1\"># rather than to the home directory. If absolute, it&#39;s left alone.</span>\n            <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;path&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_path_relative_to_rh_workdir</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span> <span class=\"k\">else</span> <span class=\"kc\">None</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># if not a local filesystem save path as is (e.g. bucket/path)</span>\n            <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;path&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">Resource</span><span class=\"p\">):</span>  <span class=\"c1\"># If system is a cluster</span>\n            <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;system&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_resource_string_for_subconfig</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;system&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">config</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_save_sub_resources</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">Resource</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_path_relative_to_rh_workdir</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">):</span>\n        <span class=\"n\">rh_workdir</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">locate_working_dir</span><span class=\"p\">())</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">relative_to</span><span class=\"p\">(</span><span class=\"n\">rh_workdir</span><span class=\"p\">))</span>\n        <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">path</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">fsspec_url</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Generate the FSSpec URL using the file system and path of the folder&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;/&quot;</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fs_str</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">[</span>\n            <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_FS</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">CLUSTER_FS</span><span class=\"p\">,</span>\n        <span class=\"p\">]:</span>\n            <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fs_str</span><span class=\"si\">}</span><span class=\"s2\">:/</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># For local, ssh / sftp filesystems we need both slashes</span>\n            <span class=\"c1\"># e.g.: &#39;ssh:///home/ubuntu/.cache/runhouse/tables/dede71ef83ce45ffa8cb27d746f97ee8&#39;</span>\n            <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fs_str</span><span class=\"si\">}</span><span class=\"s2\">://</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n\n<div class=\"viewcode-block\" id=\"Folder.ls\"><a class=\"viewcode-back\" href=\"../../../../../api/python/folder/#runhouse.Folder.ls\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">ls</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">full_paths</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">sort</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">list</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;List the contents of the folder.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            full_paths (Optional[bool]): Whether to list the full paths of the folder contents.</span>\n<span class=\"sd\">                Defaults to ``True``.</span>\n<span class=\"sd\">            sort (Optional[bool]): Whether to sort the folder contents by time modified.</span>\n<span class=\"sd\">                Defaults to ``False``.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">paths</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fsspec_fs</span><span class=\"o\">.</span><span class=\"n\">ls</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span> <span class=\"k\">else</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"n\">sort</span><span class=\"p\">:</span>\n            <span class=\"n\">paths</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span>\n                <span class=\"n\">paths</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fsspec_fs</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)[</span><span class=\"s2\">&quot;mtime&quot;</span><span class=\"p\">],</span> <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">full_paths</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">paths</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"k\">for</span> <span class=\"n\">path</span> <span class=\"ow\">in</span> <span class=\"n\">paths</span><span class=\"p\">]</span></div>\n\n<div class=\"viewcode-block\" id=\"Folder.resources\"><a class=\"viewcode-back\" href=\"../../../../../api/python/folder/#runhouse.Folder.resources\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">resources</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">full_paths</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;List the resources in the *RNS* folder.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; resources = my_folder.resources()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># TODO allow &#39;*&#39; wildcard for listing all resources (and maybe other wildcard things)</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">resources</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"n\">path</span> <span class=\"k\">for</span> <span class=\"n\">path</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ls</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"s2\">&quot;config.json&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">()</span>\n            <span class=\"p\">]</span>\n        <span class=\"k\">except</span> <span class=\"ne\">FileNotFoundError</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">[]</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">full_paths</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rns_address</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">stem</span> <span class=\"k\">for</span> <span class=\"n\">path</span> <span class=\"ow\">in</span> <span class=\"n\">resources</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">stem</span> <span class=\"k\">for</span> <span class=\"n\">path</span> <span class=\"ow\">in</span> <span class=\"n\">resources</span><span class=\"p\">]</span></div>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">rns_address</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Traverse up the filesystem until reaching one of the directories in rns_base_folders,</span>\n<span class=\"sd\">        then compute the relative path to that.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># TODO Maybe later, account for folders along the path with a different RNS name.</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>  <span class=\"c1\"># Anonymous folders have no rns address</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n        <span class=\"c1\"># Only should be necessary when a new base folder is being added (therefore isn&#39;t in rns_base_folders yet)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rns_folder</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rns_folder</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span> <span class=\"ow\">in</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">rns_base_folders</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rns_folder</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rns_folder</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">default_folder</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n\n        <span class=\"n\">segment</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">)</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span>\n            <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">segment</span><span class=\"p\">)</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">rns_base_folders</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()</span>\n            <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">segment</span> <span class=\"o\">==</span> <span class=\"n\">Path</span><span class=\"o\">.</span><span class=\"n\">home</span><span class=\"p\">()</span>\n            <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">segment</span> <span class=\"o\">==</span> <span class=\"n\">segment</span><span class=\"o\">.</span><span class=\"n\">parent</span>\n        <span class=\"p\">):</span>\n            <span class=\"n\">segment</span> <span class=\"o\">=</span> <span class=\"n\">segment</span><span class=\"o\">.</span><span class=\"n\">parent</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"n\">segment</span> <span class=\"o\">==</span> <span class=\"n\">Path</span><span class=\"o\">.</span><span class=\"n\">home</span><span class=\"p\">()</span> <span class=\"ow\">or</span> <span class=\"n\">segment</span> <span class=\"o\">==</span> <span class=\"n\">segment</span><span class=\"o\">.</span><span class=\"n\">parent</span>\n        <span class=\"p\">):</span>  <span class=\"c1\"># TODO throw an error instead?</span>\n            <span class=\"k\">return</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">default_folder</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">base_folder</span> <span class=\"o\">=</span> <span class=\"n\">Folder</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">segment</span><span class=\"p\">),</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"n\">base_folder_path</span> <span class=\"o\">=</span> <span class=\"n\">base_folder</span><span class=\"o\">.</span><span class=\"n\">rns_address</span>\n            <span class=\"n\">relative_path</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">relative_to</span><span class=\"p\">(</span><span class=\"n\">base_folder</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">))</span>\n            <span class=\"k\">return</span> <span class=\"n\">base_folder_path</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"n\">relative_path</span>\n\n<div class=\"viewcode-block\" id=\"Folder.contains\"><a class=\"viewcode-back\" href=\"../../../../../api/python/folder/#runhouse.Folder.contains\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">contains</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name_or_path</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Whether path of a Folder exists locally.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; my_folder = rh.folder(&quot;local/folder/path&quot;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; in_folder = my_folder.contains(&quot;filename&quot;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">locate</span><span class=\"p\">(</span><span class=\"n\">name_or_path</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">path</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span></div>\n\n<div class=\"viewcode-block\" id=\"Folder.locate\"><a class=\"viewcode-back\" href=\"../../../../../api/python/folder/#runhouse.Folder.locate\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">locate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name_or_path</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Locate the local path of a Folder given an rns path.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; my_folder = rh.folder(&quot;local/folder/path&quot;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; local_path = my_folder.locate(&quot;file_name&quot;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># Note: Keep in mind we&#39;re using both _rns_ path and physical path logic below. Be careful!</span>\n\n        <span class=\"c1\"># If the path is already given relative to the current folder:</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">name_or_path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">name_or_path</span><span class=\"p\">),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span>\n\n        <span class=\"c1\"># If name or path uses ~/ or ./, need to resolve with folder path</span>\n        <span class=\"n\">abs_path</span> <span class=\"o\">=</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">resolve_rns_path</span><span class=\"p\">(</span><span class=\"n\">name_or_path</span><span class=\"p\">)</span>\n        <span class=\"n\">rns_path</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rns_address</span>\n\n        <span class=\"c1\"># If this folder is anonymous, it has no rns contents</span>\n        <span class=\"k\">if</span> <span class=\"n\">rns_path</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">abs_path</span> <span class=\"o\">==</span> <span class=\"n\">rns_path</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">child_path</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">abs_path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">relative_to</span><span class=\"p\">(</span><span class=\"n\">rns_path</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">child_path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">():</span>\n                <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">child_path</span><span class=\"p\">),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span>\n        <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n            <span class=\"k\">pass</span>\n\n        <span class=\"c1\"># Last resort, recursively search inside sub-folders and children.</span>\n\n        <span class=\"n\">segments</span> <span class=\"o\">=</span> <span class=\"n\">abs_path</span><span class=\"o\">.</span><span class=\"n\">lstrip</span><span class=\"p\">(</span><span class=\"s2\">&quot;/&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;/&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">segments</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">(</span>\n                <span class=\"kc\">None</span><span class=\"p\">,</span>\n                <span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>  <span class=\"c1\"># If only a single element, would have been found in ls above.</span>\n\n        <span class=\"c1\"># Look for lowest folder in the path that exists in filesystem, and recurse from that folder</span>\n        <span class=\"n\">greatest_common_folder</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">)</span>\n        <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">seg</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">segments</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"n\">greatest_common_folder</span> <span class=\"o\">/</span> <span class=\"n\">seg</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">():</span>\n                <span class=\"k\">break</span>\n            <span class=\"n\">greatest_common_folder</span> <span class=\"o\">=</span> <span class=\"n\">greatest_common_folder</span> <span class=\"o\">/</span> <span class=\"n\">seg</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">greatest_common_folder</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">Folder</span><span class=\"p\">(</span>\n                <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">greatest_common_folder</span><span class=\"p\">),</span> <span class=\"n\">system</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n            <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">locate</span><span class=\"p\">(</span><span class=\"s2\">&quot;/&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">segments</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"p\">:]))</span>\n\n        <span class=\"k\">return</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span></div>\n\n<div class=\"viewcode-block\" id=\"Folder.open\"><a class=\"viewcode-back\" href=\"../../../../../api/python/folder/#runhouse.Folder.open\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s2\">&quot;rb&quot;</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Returns an fsspec file, which must be used as a content manager to be opened.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; with my_folder.open(&#39;obj_name&#39;) as my_file:</span>\n<span class=\"sd\">            &gt;&gt;&gt;        pickle.load(my_file)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fsspec_fs</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"n\">mode</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"n\">encoding</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Folder.get\"><a class=\"viewcode-back\" href=\"../../../../../api/python/folder/#runhouse.Folder.get\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s2\">&quot;rb&quot;</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Returns the contents of a file as a string or bytes.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; contents = my_folder.get(file_name)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"n\">mode</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"n\">encoding</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span></div>\n\n    <span class=\"c1\"># TODO [DG] fix this to follow the correct convention above</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_all</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># TODO add docs for this</span>\n        <span class=\"c1\"># TODO we&#39;re not closing these, do we need to extract file-like objects so we can close them?</span>\n        <span class=\"k\">return</span> <span class=\"n\">fsspec</span><span class=\"o\">.</span><span class=\"n\">open_files</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fsspec_url</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s2\">&quot;rb&quot;</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_config</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"Folder.exists_in_system\"><a class=\"viewcode-back\" href=\"../../../../../api/python/folder/#runhouse.Folder.exists_in_system\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">exists_in_system</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Whether the folder exists in the filesystem.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; exists_on_system = my_folder.exists_in_system()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fsspec_fs</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Folder.rm\"><a class=\"viewcode-back\" href=\"../../../../../api/python/folder/#runhouse.Folder.rm\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">rm</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">contents</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">recursive</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Delete a folder from the file system. Optionally provide a list of folder contents to delete.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            contents (Optional[List]): Specific contents to delete in the folder.</span>\n<span class=\"sd\">            recursive (bool): Delete the folder itself (including all its contents).</span>\n<span class=\"sd\">                Defaults to ``True``.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; my_folder.rm()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">contents</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fsspec_fs</span><span class=\"o\">.</span><span class=\"n\">rm</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">recursive</span><span class=\"o\">=</span><span class=\"n\">recursive</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"ne\">FileNotFoundError</span><span class=\"p\">:</span>\n                <span class=\"k\">pass</span>\n\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">file_name</span> <span class=\"ow\">in</span> <span class=\"n\">contents</span><span class=\"p\">:</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fsspec_fs</span><span class=\"o\">.</span><span class=\"n\">rm</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">{</span><span class=\"n\">file_name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">except</span> <span class=\"ne\">FileNotFoundError</span><span class=\"p\">:</span>\n                    <span class=\"k\">pass</span></div>\n\n<div class=\"viewcode-block\" id=\"Folder.put\"><a class=\"viewcode-back\" href=\"../../../../../api/python/folder/#runhouse.Folder.put\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">put</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">contents</span><span class=\"p\">,</span> <span class=\"n\">overwrite</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;wb&quot;</span><span class=\"p\">,</span> <span class=\"n\">write_fn</span><span class=\"p\">:</span> <span class=\"n\">Callable</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Put given contents in folder.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            contents (Dict[str, Any] or Resource or List[Resource]): Contents to put in folder.</span>\n<span class=\"sd\">                Must be a dict with keys being the file names (without full paths) and values being the file-like</span>\n<span class=\"sd\">                objects to write, or a Resource object, or a list of Resources.</span>\n<span class=\"sd\">            overwrite (bool): Whether to dump the file contents as json. By default expects data to be encoded.</span>\n<span class=\"sd\">                Defaults to ``False``.</span>\n<span class=\"sd\">            mode (Optional(str)): Write mode to use for fsspec. Defaults to ``wb``.</span>\n<span class=\"sd\">            write_fn (Optional(Callable)): Function to use for writing file contents.</span>\n<span class=\"sd\">                Example: ``write_fn = lambda f, data: json.dump(data, f)</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; my_folder.put(contents={&quot;filename.txt&quot;: data})</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># TODO create the bucket if it doesn&#39;t already exist</span>\n        <span class=\"c1\"># Handle lists of resources just for convenience</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">contents</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n            <span class=\"k\">for</span> <span class=\"n\">resource</span> <span class=\"ow\">in</span> <span class=\"n\">contents</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">resource</span><span class=\"p\">,</span> <span class=\"n\">overwrite</span><span class=\"o\">=</span><span class=\"n\">overwrite</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">contents</span><span class=\"p\">,</span> <span class=\"n\">Folder</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_writable</span><span class=\"p\">():</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;Cannot put files into non-writable folder </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"ow\">or</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">contents</span><span class=\"o\">.</span><span class=\"n\">path</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>  <span class=\"c1\"># Should only be the case when Folder is created</span>\n                <span class=\"n\">contents</span><span class=\"o\">.</span><span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"n\">contents</span><span class=\"o\">.</span><span class=\"n\">name</span>\n                <span class=\"n\">contents</span><span class=\"o\">.</span><span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span>\n                <span class=\"c1\"># The parent can be anonymous, e.g. the &#39;rh&#39; folder.</span>\n                <span class=\"c1\"># TODO not sure if this should be allowed - if parent folder has no rns address, why would child</span>\n                <span class=\"c1\"># just be put into the default rns folder?</span>\n                <span class=\"c1\"># TODO If the base is named later, figure out what to do with the contents (rename, resave, etc.).</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rns_address</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                    <span class=\"n\">contents</span><span class=\"o\">.</span><span class=\"n\">rns_path</span> <span class=\"o\">=</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">default_folder</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"n\">contents</span><span class=\"o\">.</span><span class=\"n\">name</span>\n                    <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">rns_base_folders</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span>\n                        <span class=\"p\">{</span><span class=\"n\">contents</span><span class=\"o\">.</span><span class=\"n\">rns_address</span><span class=\"p\">:</span> <span class=\"n\">contents</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">}</span>\n                    <span class=\"p\">)</span>\n                <span class=\"c1\"># We don&#39;t need to call .save here to write down because it will be called at the end of the</span>\n                <span class=\"c1\"># folder or resource constructor</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">contents</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>  <span class=\"c1\"># Anonymous resource</span>\n                    <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n                    <span class=\"n\">new_name</span> <span class=\"o\">=</span> <span class=\"n\">contents</span><span class=\"o\">.</span><span class=\"n\">RESOURCE_TYPE</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n                    <span class=\"c1\"># Resolve naming conflicts if necessary</span>\n                    <span class=\"k\">while</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"n\">new_name</span><span class=\"p\">):</span>\n                        <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                        <span class=\"n\">new_name</span> <span class=\"o\">=</span> <span class=\"n\">contents</span><span class=\"o\">.</span><span class=\"n\">RESOURCE_TYPE</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">new_name</span> <span class=\"o\">=</span> <span class=\"n\">contents</span><span class=\"o\">.</span><span class=\"n\">name</span>\n\n                <span class=\"c1\"># NOTE For intercloud transfer, we should use Skyplane</span>\n                <span class=\"k\">with</span> <span class=\"n\">fsspec</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fsspec_url</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"n\">new_name</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_config</span>\n                <span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">dest</span><span class=\"p\">:</span>\n                    <span class=\"k\">with</span> <span class=\"n\">fsspec</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span>\n                        <span class=\"n\">contents</span><span class=\"o\">.</span><span class=\"n\">fsspec_url</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">contents</span><span class=\"o\">.</span><span class=\"n\">data_config</span>\n                    <span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">src</span><span class=\"p\">:</span>\n                        <span class=\"c1\"># NOTE For packages, maybe use the `ignore` param here to only copy python files.</span>\n                        <span class=\"n\">shutil</span><span class=\"o\">.</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"n\">dest</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">contents</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;`files` argument to `.put` must be Resource, list of Resources, or dict mapping &quot;</span>\n                <span class=\"s2\">&quot;filenames to file-like-objects&quot;</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">overwrite</span> <span class=\"ow\">is</span> <span class=\"kc\">False</span><span class=\"p\">:</span>\n            <span class=\"n\">folder_contents</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">resources</span><span class=\"p\">()</span>\n            <span class=\"n\">intersection</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">folder_contents</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">intersection</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">contents</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()))</span>\n            <span class=\"k\">if</span> <span class=\"n\">intersection</span> <span class=\"o\">!=</span> <span class=\"nb\">set</span><span class=\"p\">():</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">FileExistsError</span><span class=\"p\">(</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;File(s) </span><span class=\"si\">{</span><span class=\"n\">intersection</span><span class=\"si\">}</span><span class=\"s2\"> already exist(s) at path&quot;</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"s2\">, cannot save them without overwriting.&quot;</span>\n                <span class=\"p\">)</span>\n        <span class=\"c1\"># TODO figure out default behavior for not overwriting but still saving</span>\n        <span class=\"c1\"># if not overwrite:</span>\n        <span class=\"c1\">#     time = datetime.today().strftime(&#39;%Y-%m-%d_%H:%M:%S&#39;)</span>\n        <span class=\"c1\">#     self.data_url = self.data_url + time or time</span>\n        <span class=\"n\">filenames</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">contents</span><span class=\"p\">)</span>\n        <span class=\"n\">fss_files</span> <span class=\"o\">=</span> <span class=\"n\">fsspec</span><span class=\"o\">.</span><span class=\"n\">open_files</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fsspec_url</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/*&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"n\">mode</span><span class=\"p\">,</span>\n            <span class=\"o\">**</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_config</span><span class=\"p\">,</span>\n            <span class=\"n\">num</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">contents</span><span class=\"p\">),</span>\n            <span class=\"n\">name_function</span><span class=\"o\">=</span><span class=\"n\">filenames</span><span class=\"o\">.</span><span class=\"fm\">__getitem__</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">fss_file</span><span class=\"p\">,</span> <span class=\"n\">raw_file</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">fss_files</span><span class=\"p\">,</span> <span class=\"n\">contents</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()):</span>\n            <span class=\"k\">with</span> <span class=\"n\">fss_file</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">write_fn</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                    <span class=\"n\">write_fn</span><span class=\"p\">(</span><span class=\"n\">raw_file</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">raw_file</span><span class=\"p\">)</span></div>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_bucket_name_from_path</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Extract the bucket name from a path (e.g. &#39;/my-bucket/my-folder/my-file.txt&#39; -&gt; &#39;my-bucket&#39;)&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">parts</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span></div>\n</pre></div>", "current_page_name": "_modules/runhouse/rns/folders/folder", "sidebars": ["sidebar-logo.html", "search-field.html", "sbt-sidebar-nav.html", "sbt-sidebar-footer.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "author": "the Runhouse team \ud83c\udfc3\u200d\u2640\ufe0f\ud83c\udfe0", "theme_use_edit_page_button": false, "theme_search_bar_text": "Search the docs ...", "theme_show_toc_level": 1}