{"parents": [{"link": "../../../", "title": "Module code"}], "title": "runhouse.rns.resource", "body": "<h1>Source code for runhouse.rns.resource</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">pprint</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">,</span> <span class=\"n\">Union</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.rh_config</span> <span class=\"kn\">import</span> <span class=\"n\">rns_client</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.rns.api_utils.resource_access</span> <span class=\"kn\">import</span> <span class=\"n\">ResourceAccess</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.rns.api_utils.utils</span> <span class=\"kn\">import</span> <span class=\"n\">load_resp_content</span><span class=\"p\">,</span> <span class=\"n\">read_resp_data</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.rns.top_level_rns_fns</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">resolve_rns_path</span><span class=\"p\">,</span>\n    <span class=\"n\">save</span><span class=\"p\">,</span>\n    <span class=\"n\">split_rns_name_and_path</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"Resource\"><a class=\"viewcode-back\" href=\"../../../../rh_primitives/resource/#runhouse.rns.resource.Resource\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Resource</span><span class=\"p\">:</span>\n    <span class=\"n\">RESOURCE_TYPE</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n<div class=\"viewcode-block\" id=\"Resource.__init__\"><a class=\"viewcode-back\" href=\"../../../../rh_primitives/resource/#runhouse.rns.resource.Resource.__init__\">[docs]</a>    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">dryrun</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Runhouse abstraction for objects that can be saved, shared, and reused.</span>\n\n<span class=\"sd\">        Runhouse currently supports the following builtin Resource types:</span>\n\n<span class=\"sd\">        - Compute Abstractions</span>\n<span class=\"sd\">            - Cluster :py:class:`.hardware.cluster.Cluster`</span>\n<span class=\"sd\">            - Function :py:class:`.function.Function`</span>\n<span class=\"sd\">            - Package :py:class:`.packages.package.Package`</span>\n\n\n<span class=\"sd\">        - Data Abstractions</span>\n<span class=\"sd\">            - Blob :py:class:`.blob.Blob`</span>\n<span class=\"sd\">            - Folder :py:class:`.folders.folder.Folder`</span>\n<span class=\"sd\">            - Table :py:class:`.tables.table.Table`</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rns_folder</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"c1\"># TODO validate that name complies with a simple regex</span>\n            <span class=\"k\">if</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;/builtins/&quot;</span><span class=\"p\">):</span>\n                <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">:]</span>\n            <span class=\"k\">if</span> <span class=\"n\">name</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;^&quot;</span> <span class=\"ow\">and</span> <span class=\"n\">name</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;^&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rns_folder</span> <span class=\"o\">=</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">split_rns_name_and_path</span><span class=\"p\">(</span>\n                <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">resolve_rns_path</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dryrun</span> <span class=\"o\">=</span> <span class=\"n\">dryrun</span></div>\n\n    <span class=\"c1\"># TODO add a utility to allow a parameter to be specified as &quot;default&quot; and then use the default value</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">config_for_rns</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rns_address</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;resource_type&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">RESOURCE_TYPE</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;resource_subtype&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">config</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_resource_string_for_subconfig</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">resource</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Returns a string representation of a sub-resource for use in a config.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">resource</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">resource</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">resource</span>\n        <span class=\"k\">if</span> <span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"n\">rns_address</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;^&quot;</span><span class=\"p\">):</span>\n                <span class=\"c1\"># Calls save internally and puts the resource in the current folder</span>\n                <span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">resolve_rns_path</span><span class=\"p\">(</span><span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"n\">rns_address</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:])</span>\n            <span class=\"k\">return</span> <span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"n\">rns_address</span>\n        <span class=\"k\">return</span> <span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"n\">config_for_rns</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">rns_address</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Traverse up the filesystem until reaching one of the directories in rns_base_folders,</span>\n<span class=\"sd\">        then compute the relative path to that.</span>\n\n<span class=\"sd\">        Maybe later, account for folders along the path with a differnt RNS name.&quot;&quot;&quot;</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rns_folder</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n        <span class=\"p\">):</span>  <span class=\"c1\"># Anonymous folders have no rns address</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n        <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rns_folder</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span>\n\n    <span class=\"nd\">@name</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Split the name and rns path if path is given (concat with current_folder if just stem is given)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rns_folder</span> <span class=\"o\">=</span> <span class=\"n\">split_rns_name_and_path</span><span class=\"p\">(</span><span class=\"n\">resolve_rns_path</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">))</span>\n\n    <span class=\"nd\">@rns_address</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">rns_address</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">new_address</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">new_address</span>  <span class=\"c1\"># Note, this saves the resource to the new address!</span>\n\n<div class=\"viewcode-block\" id=\"Resource.save\"><a class=\"viewcode-back\" href=\"../../../../rh_primitives/resource/#runhouse.rns.resource.Resource.save\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">save</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">overwrite</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Register the resource, saving it to local working_dir config and RNS config store. Uses the resource&#39;s</span>\n<span class=\"sd\">        `self.config_for_rns` to generate the dict to save.&quot;&quot;&quot;</span>\n\n        <span class=\"c1\"># TODO deal with logic of saving anonymous folder for the first time after naming, i.e.</span>\n        <span class=\"c1\"># Path(tempfile.gettempdir()).relative_to(self.path) ...</span>\n        <span class=\"k\">if</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"s2\">&quot;/&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">name</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rns_folder</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rns_folder</span> <span class=\"o\">=</span> <span class=\"n\">split_rns_name_and_path</span><span class=\"p\">(</span>\n                    <span class=\"n\">resolve_rns_path</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n\n        <span class=\"c1\"># TODO handle self.access == &#39;read&#39; instead of this weird overwrite argument</span>\n        <span class=\"n\">save</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">overwrite</span><span class=\"o\">=</span><span class=\"n\">overwrite</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">self</span></div>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">pprint</span><span class=\"o\">.</span><span class=\"n\">pformat</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config_for_rns</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_name</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">load_config</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">config</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Resource </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\"> not found.&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"c1\"># Uses child class&#39;s from_config</span>\n        <span class=\"k\">return</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">from_config</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"Resource.unname\"><a class=\"viewcode-back\" href=\"../../../../rh_primitives/resource/#runhouse.rns.resource.Resource.unname\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">unname</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Remove the name of the resource. This changes the resource name to anonymous and deletes any local</span>\n<span class=\"sd\">        or RNS configs for the resource.&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">delete_configs</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></div>\n\n<div class=\"viewcode-block\" id=\"Resource.history\"><a class=\"viewcode-back\" href=\"../../../../rh_primitives/resource/#runhouse.rns.resource.Resource.history\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">history</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">entries</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Return the history of the resource, including specific config fields (e.g. blob path) and which runs</span>\n<span class=\"sd\">        have overwritten it.&quot;&quot;&quot;</span>\n        <span class=\"n\">resource_uri</span> <span class=\"o\">=</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">resource_uri</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span>\n            <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">api_server_url</span><span class=\"si\">}</span><span class=\"s2\">/resource/history/</span><span class=\"si\">{</span><span class=\"n\">resource_uri</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">request_headers</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">status_code</span> <span class=\"o\">!=</span> <span class=\"mi\">200</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;Failed to load resource history: </span><span class=\"si\">{</span><span class=\"n\">load_resp_content</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"n\">resource_history</span> <span class=\"o\">=</span> <span class=\"n\">read_resp_data</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">resource_history</span></div>\n\n    <span class=\"c1\"># TODO delete sub-resources</span>\n<div class=\"viewcode-block\" id=\"Resource.delete_configs\"><a class=\"viewcode-back\" href=\"../../../../rh_primitives/resource/#runhouse.rns.resource.Resource.delete_configs\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">delete_configs</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Delete the resource&#39;s config from local working_dir and RNS config store.&quot;&quot;&quot;</span>\n        <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">delete_configs</span><span class=\"p\">(</span><span class=\"n\">resource</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Resource.save_attrs_to_config\"><a class=\"viewcode-back\" href=\"../../../../rh_primitives/resource/#runhouse.rns.resource.Resource.save_attrs_to_config\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">save_attrs_to_config</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">attrs</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Save the given attributes to the config&quot;&quot;&quot;</span>\n        <span class=\"k\">for</span> <span class=\"n\">attr</span> <span class=\"ow\">in</span> <span class=\"n\">attrs</span><span class=\"p\">:</span>\n            <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"n\">attr</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">val</span><span class=\"p\">:</span>\n                <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"n\">attr</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">val</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">is_local</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span>\n            <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s2\">&quot;install_target&quot;</span><span class=\"p\">)</span>\n            <span class=\"ow\">and</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">install_target</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)</span>\n            <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">install_target</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;~&quot;</span><span class=\"p\">)</span>\n            <span class=\"ow\">or</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s2\">&quot;system&quot;</span><span class=\"p\">)</span>\n            <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;file&quot;</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"c1\"># TODO [DG] Implement proper sharing of subresources (with an overload of some kind)</span>\n<div class=\"viewcode-block\" id=\"Resource.share\"><a class=\"viewcode-back\" href=\"../../../../rh_primitives/resource/#runhouse.rns.resource.Resource.share\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">share</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">users</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">,</span>\n        <span class=\"n\">access_type</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">ResourceAccess</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ResourceAccess</span><span class=\"o\">.</span><span class=\"n\">READ</span><span class=\"p\">,</span>\n        <span class=\"n\">notify_users</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ResourceAccess</span><span class=\"p\">],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ResourceAccess</span><span class=\"p\">]]:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Grant access to the resource for the list of users. If a user has a Runhouse account they</span>\n<span class=\"sd\">        will receive an email notifying them of their new access. If the user does not have a Runhouse account they will</span>\n<span class=\"sd\">        also receive instructions on creating one, after which they will be able to have access to the Resource.</span>\n\n<span class=\"sd\">        .. note::</span>\n<span class=\"sd\">            You can only grant resource access to other users if you have Write / Read privileges for the Resource.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            users (list): list of user emails and / or runhouse account usernames.</span>\n<span class=\"sd\">            access_type (:obj:`ResourceAccess`, optional): access type to provide for the resource.</span>\n<span class=\"sd\">            notify_users (bool): Send email notification to users who have been given access. Defaults to `False`.</span>\n\n<span class=\"sd\">        Returns:</span>\n<span class=\"sd\">            `added_users`: users who already have an account and have been granted access to the resource.</span>\n<span class=\"sd\">            `new_users`: users who do not have Runhouse accounts.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; added_users, new_users = my_resource.share(users=[&quot;username1&quot;, &quot;user2@gmail.com&quot;], access_type=&#39;write&#39;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Resource must have a name in order to share&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s2\">&quot;system&quot;</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;ssh&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;sftp&quot;</span><span class=\"p\">]:</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Sharing a resource located on a cluster is not recommended. For persistence, we suggest&quot;</span>\n                <span class=\"s2\">&quot;saving to a cloud storage system (ex: `s3` or `gs`). You can copy your cluster based &quot;</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">RESOURCE_TYPE</span><span class=\"si\">}</span><span class=\"s2\"> to your desired storage provider using the `.to()` method. &quot;</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;For example: `</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">RESOURCE_TYPE</span><span class=\"si\">}</span><span class=\"s2\">.to(system=&#39;rh-cpu&#39;)`&quot;</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_local</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">RESOURCE_TYPE</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;package&quot;</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;Unable to share a local </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">RESOURCE_TYPE</span><span class=\"si\">}</span><span class=\"s2\">. Please make sure the </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">RESOURCE_TYPE</span><span class=\"si\">}</span><span class=\"s2\"> is &quot;</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;located on a cluster. You can use the `.to_cluster()` method to do so. &quot;</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;For example: `</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">.to_cluster(system=&#39;rh-cpu&#39;)`&quot;</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;Unable to share a local </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">RESOURCE_TYPE</span><span class=\"si\">}</span><span class=\"s2\">. Please make sure the </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">RESOURCE_TYPE</span><span class=\"si\">}</span><span class=\"s2\"> is &quot;</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;located on a cluster or a remote system. You can use the `.to()` method to do so. &quot;</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;For example: `</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">.to(system=&#39;s3&#39;)`&quot;</span>\n                <span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">access_type</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">access_type</span> <span class=\"o\">=</span> <span class=\"n\">ResourceAccess</span><span class=\"p\">(</span><span class=\"n\">access_type</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rns_address</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">local_to_remote_address</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rns_address</span><span class=\"p\">))</span>\n\n        <span class=\"n\">added_users</span><span class=\"p\">,</span> <span class=\"n\">new_users</span> <span class=\"o\">=</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">grant_resource_access</span><span class=\"p\">(</span>\n            <span class=\"n\">rns_address</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rns_address</span><span class=\"p\">,</span>\n            <span class=\"n\">user_emails</span><span class=\"o\">=</span><span class=\"n\">users</span><span class=\"p\">,</span>\n            <span class=\"n\">access_type</span><span class=\"o\">=</span><span class=\"n\">access_type</span><span class=\"p\">,</span>\n            <span class=\"n\">notify_users</span><span class=\"o\">=</span><span class=\"n\">notify_users</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">added_users</span><span class=\"p\">,</span> <span class=\"n\">new_users</span></div></div>\n</pre></div>", "current_page_name": "_modules/runhouse/rns/resource", "sidebars": ["sidebar-logo.html", "search-field.html", "sbt-sidebar-nav.html", "sbt-sidebar-footer.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "author": "the Runhouse team \ud83c\udfc3\u200d\u2640\ufe0f\ud83c\udfe0", "theme_use_edit_page_button": false, "theme_search_bar_text": "Search the docs ...", "theme_show_toc_level": 1}