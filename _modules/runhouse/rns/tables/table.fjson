{"parents": [{"link": "../../../../", "title": "Module code"}], "title": "runhouse.rns.tables.table", "body": "<h1>Source code for runhouse.rns.tables.table</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">copy</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Optional</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">fsspec</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pyarrow</span> <span class=\"k\">as</span> <span class=\"nn\">pa</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pyarrow.parquet</span> <span class=\"k\">as</span> <span class=\"nn\">pq</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">ray</span>\n<span class=\"kn\">import</span> <span class=\"nn\">ray.data</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse</span> <span class=\"kn\">import</span> <span class=\"n\">Folder</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.rh_config</span> <span class=\"kn\">import</span> <span class=\"n\">rns_client</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.rns.folders</span> <span class=\"kn\">import</span> <span class=\"n\">folder</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.rns.resource</span> <span class=\"kn\">import</span> <span class=\"n\">Resource</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.rns.utils.hardware</span> <span class=\"kn\">import</span> <span class=\"n\">_current_cluster</span><span class=\"p\">,</span> <span class=\"n\">_get_cluster_from</span>\n\n<span class=\"n\">PREFETCH_KWARG</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;prefetch_batches&quot;</span> <span class=\"k\">if</span> <span class=\"n\">ray</span><span class=\"o\">.</span><span class=\"n\">__version__</span> <span class=\"o\">&gt;=</span> <span class=\"s2\">&quot;2.4.0&quot;</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;prefetch_blocks&quot;</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"Table\"><a class=\"viewcode-back\" href=\"../../../../../api/python/table/#runhouse.Table\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Table</span><span class=\"p\">(</span><span class=\"n\">Resource</span><span class=\"p\">):</span>\n    <span class=\"n\">RESOURCE_TYPE</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;table&quot;</span>\n    <span class=\"n\">DEFAULT_FOLDER_PATH</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;/runhouse-table&quot;</span>\n    <span class=\"n\">DEFAULT_CACHE_FOLDER</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;.cache/runhouse/tables&quot;</span>\n    <span class=\"n\">DEFAULT_STREAM_FORMAT</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;pyarrow&quot;</span>\n    <span class=\"n\">DEFAULT_BATCH_SIZE</span> <span class=\"o\">=</span> <span class=\"mi\">256</span>\n    <span class=\"n\">DEFAULT_PREFETCH_BATCHES</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\n<div class=\"viewcode-block\" id=\"Table.__init__\"><a class=\"viewcode-back\" href=\"../../../../../api/python/table/#runhouse.Table.__init__\">[docs]</a>    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">file_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">system</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">data_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">dryrun</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">partition_cols</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">stream_format</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">metadata</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        The Runhouse Table object.</span>\n\n<span class=\"sd\">        .. note::</span>\n<span class=\"sd\">            To build a Table, please use the factory method :func:`table`.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file_name</span> <span class=\"o\">=</span> <span class=\"n\">file_name</span>\n\n        <span class=\"c1\"># Use factory method so correct subclass for system is returned</span>\n        <span class=\"c1\"># strip filename from path if provided</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_folder</span> <span class=\"o\">=</span> <span class=\"n\">folder</span><span class=\"p\">(</span>\n            <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">parents</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"k\">if</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">suffix</span> <span class=\"k\">else</span> <span class=\"n\">path</span><span class=\"p\">,</span>\n            <span class=\"n\">system</span><span class=\"o\">=</span><span class=\"n\">system</span><span class=\"p\">,</span>\n            <span class=\"n\">data_config</span><span class=\"o\">=</span><span class=\"n\">data_config</span><span class=\"p\">,</span>\n            <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cached_data</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">partition_cols</span> <span class=\"o\">=</span> <span class=\"n\">partition_cols</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stream_format</span> <span class=\"o\">=</span> <span class=\"n\">stream_format</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_STREAM_FORMAT</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">metadata</span> <span class=\"o\">=</span> <span class=\"n\">metadata</span> <span class=\"ow\">or</span> <span class=\"p\">{}</span></div>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_config</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;system&quot;</span><span class=\"p\">],</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n            <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;system&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">_get_cluster_from</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;system&quot;</span><span class=\"p\">],</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">_load_table_subclass</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">config_for_rns</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">config_for_rns</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_folder</span><span class=\"p\">,</span> <span class=\"n\">Resource</span><span class=\"p\">):</span>\n            <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;system&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_resource_string_for_subconfig</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">)</span>\n            <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;data_config&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_folder</span><span class=\"o\">.</span><span class=\"n\">_data_config</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;system&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">save_attrs_to_config</span><span class=\"p\">(</span>\n            <span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;path&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;partition_cols&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;metadata&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;file_name&quot;</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">config</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ray</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">Dataset</span><span class=\"p\">:</span>\n        <span class=\"sd\">&quot;&quot;&quot;Get the table data. If data is not already cached, return a Ray dataset.</span>\n\n<span class=\"sd\">        With the dataset object we can stream or convert to other types, for example:</span>\n\n<span class=\"sd\">        .. code-block:: python</span>\n\n<span class=\"sd\">            data.iter_batches()</span>\n<span class=\"sd\">            data.to_pandas()</span>\n<span class=\"sd\">            data.to_dask()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cached_data</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cached_data</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_read_ray_dataset</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@data</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">new_data</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Update the data blob to new data&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cached_data</span> <span class=\"o\">=</span> <span class=\"n\">new_data</span>\n        <span class=\"c1\"># TODO should we save here?</span>\n        <span class=\"c1\"># self.save(overwrite=True)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">system</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_folder</span><span class=\"o\">.</span><span class=\"n\">system</span>\n\n    <span class=\"nd\">@system</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">system</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">new_system</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_folder</span><span class=\"o\">.</span><span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"n\">new_system</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file_name</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_folder</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file_name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_folder</span><span class=\"o\">.</span><span class=\"n\">path</span>\n\n    <span class=\"nd\">@path</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">new_path</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_folder</span><span class=\"o\">.</span><span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">new_path</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">set_metadata</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_metadata</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">fsspec_url</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file_name</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_folder</span><span class=\"o\">.</span><span class=\"n\">fsspec_url</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file_name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_folder</span><span class=\"o\">.</span><span class=\"n\">fsspec_url</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">data_config</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_folder</span><span class=\"o\">.</span><span class=\"n\">data_config</span>\n\n    <span class=\"nd\">@data_config</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">data_config</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">new_data_config</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_folder</span><span class=\"o\">.</span><span class=\"n\">data_config</span> <span class=\"o\">=</span> <span class=\"n\">new_data_config</span>\n\n    <span class=\"c1\"># @classmethod</span>\n    <span class=\"c1\"># def from_name(cls, name, dryrun=False):</span>\n    <span class=\"c1\">#     &quot;&quot;&quot;Load existing Table via its name.&quot;&quot;&quot;</span>\n    <span class=\"c1\">#     config = rns_client.load_config(name=name)</span>\n    <span class=\"c1\">#     if not config:</span>\n    <span class=\"c1\">#         raise ValueError(f&quot;Table {name} not found.&quot;)</span>\n    <span class=\"c1\">#</span>\n    <span class=\"c1\">#     # We don&#39;t need to load the cluster dict here (if system is a cluster) because the table init</span>\n    <span class=\"c1\">#     # goes through the Folder factory method, which handles that.</span>\n    <span class=\"c1\">#</span>\n    <span class=\"c1\">#     # Add this table&#39;s name to the resource artifact registry if part of a run</span>\n    <span class=\"c1\">#     rns_client.add_upstream_resource(name)</span>\n    <span class=\"c1\">#</span>\n    <span class=\"c1\">#     # Uses the table subclass associated with the `resource_subtype`</span>\n    <span class=\"c1\">#     table_cls = _load_table_subclass(config=config, dryrun=dryrun)</span>\n    <span class=\"c1\">#     return table_cls.from_config(config=config, dryrun=dryrun)</span>\n\n<div class=\"viewcode-block\" id=\"Table.to\"><a class=\"viewcode-back\" href=\"../../../../../api/python/table/#runhouse.Table.to\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">to</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">data_config</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Copy and return the table on the given filesystem and path.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; local_table = rh.table(data, path=&quot;local/path&quot;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; s3_table = local_table.to(&quot;s3&quot;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; cluster_table = local_table.to(my_cluster)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">new_table</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"n\">new_table</span><span class=\"o\">.</span><span class=\"n\">_folder</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_folder</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span>\n            <span class=\"n\">system</span><span class=\"o\">=</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">data_config</span><span class=\"o\">=</span><span class=\"n\">data_config</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">new_table</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_save_sub_resources</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">Resource</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n<div class=\"viewcode-block\" id=\"Table.write\"><a class=\"viewcode-back\" href=\"../../../../../api/python/table/#runhouse.Table.write\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Write underlying table data to fsspec URL.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; rh.table(data, path=&quot;path/to/write&quot;).write()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cached_data</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">data_to_write</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span>\n\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">data_to_write</span><span class=\"p\">,</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">):</span>\n                <span class=\"n\">data_to_write</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ray_dataset_from_pandas</span><span class=\"p\">(</span><span class=\"n\">data_to_write</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">data_to_write</span><span class=\"p\">,</span> <span class=\"n\">pa</span><span class=\"o\">.</span><span class=\"n\">Table</span><span class=\"p\">):</span>\n                <span class=\"n\">data_to_write</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ray_dataset_from_arrow</span><span class=\"p\">(</span><span class=\"n\">data_to_write</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">data_to_write</span><span class=\"p\">,</span> <span class=\"n\">ray</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">Dataset</span><span class=\"p\">):</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Invalid Table format </span><span class=\"si\">{</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">data_to_write</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_write_ray_dataset</span><span class=\"p\">(</span><span class=\"n\">data_to_write</span><span class=\"p\">)</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Saved </span><span class=\"si\">{</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\"> to: </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fsspec_url</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">self</span></div>\n\n<div class=\"viewcode-block\" id=\"Table.fetch\"><a class=\"viewcode-back\" href=\"../../../../../api/python/table/#runhouse.Table.fetch\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">fetch</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">pa</span><span class=\"o\">.</span><span class=\"n\">Table</span><span class=\"p\">:</span>\n        <span class=\"sd\">&quot;&quot;&quot;Returns the complete table contents.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; table = rh.table(data)</span>\n<span class=\"sd\">            &gt;&gt;&gt; fomratted_data = table.fetch()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># https://arrow.apache.org/docs/python/generated/pyarrow.parquet.read_table.html</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cached_data</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">read_table_from_file</span><span class=\"p\">(</span><span class=\"n\">columns</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cached_data</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cached_data</span>\n\n        <span class=\"c1\"># When trying to read a file like object could lead to IsADirectoryError if the folder path is actually a</span>\n        <span class=\"c1\"># directory and the file has been automatically generated for us inside the folder</span>\n        <span class=\"c1\"># (ex: with pyarrow table or with partitioned data that saves multiple files within the directory)</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">table_data</span> <span class=\"o\">=</span> <span class=\"n\">pq</span><span class=\"o\">.</span><span class=\"n\">read_table</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"n\">columns</span><span class=\"p\">,</span> <span class=\"n\">filesystem</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_folder</span><span class=\"o\">.</span><span class=\"n\">fsspec_fs</span>\n            <span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">table_data</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;No table data found in path: </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cached_data</span> <span class=\"o\">=</span> <span class=\"n\">table_data</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cached_data</span>\n\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Failed to read table in path: </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__getstate__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Override the pickle method to clear _cached_data before pickling.&quot;&quot;&quot;</span>\n        <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n        <span class=\"n\">state</span><span class=\"p\">[</span><span class=\"s2\">&quot;_cached_data&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">return</span> <span class=\"n\">state</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__iter__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">block</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stream</span><span class=\"p\">(</span><span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_BATCH_SIZE</span><span class=\"p\">):</span>\n            <span class=\"k\">for</span> <span class=\"n\">sample</span> <span class=\"ow\">in</span> <span class=\"n\">block</span><span class=\"p\">:</span>\n                <span class=\"k\">yield</span> <span class=\"n\">sample</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__len__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">):</span>\n            <span class=\"n\">len_dataset</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">ray</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">Dataset</span><span class=\"p\">):</span>\n            <span class=\"n\">len_dataset</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"s2\">&quot;__len__&quot;</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Cannot get len for dataset.&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">len_dataset</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">len_dataset</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n\n<div class=\"viewcode-block\" id=\"Table.stream\"><a class=\"viewcode-back\" href=\"../../../../../api/python/table/#runhouse.Table.stream\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">stream</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">batch_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span>\n        <span class=\"n\">drop_last</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">shuffle_seed</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">shuffle_buffer_size</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">prefetch_batches</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Return a local batched iterator over the ray dataset.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; table = rh.table(data)</span>\n<span class=\"sd\">            &gt;&gt;&gt; batches = table.stream(batch_size=4)</span>\n<span class=\"sd\">            &gt;&gt;&gt; for _, batch in batches:</span>\n<span class=\"sd\">            &gt;&gt;&gt;     print(batch)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">ray_data</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stream_format</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;torch&quot;</span><span class=\"p\">:</span>\n            <span class=\"c1\"># https://docs.ray.io/en/master/data/api/doc/ray.data.Dataset.iter_torch_batches.html#ray.data.Dataset.iter_torch_batches</span>\n            <span class=\"k\">return</span> <span class=\"n\">ray_data</span><span class=\"o\">.</span><span class=\"n\">iter_torch_batches</span><span class=\"p\">(</span>\n                <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"n\">batch_size</span><span class=\"p\">,</span>\n                <span class=\"n\">drop_last</span><span class=\"o\">=</span><span class=\"n\">drop_last</span><span class=\"p\">,</span>\n                <span class=\"n\">local_shuffle_buffer_size</span><span class=\"o\">=</span><span class=\"n\">shuffle_buffer_size</span><span class=\"p\">,</span>\n                <span class=\"n\">local_shuffle_seed</span><span class=\"o\">=</span><span class=\"n\">shuffle_seed</span><span class=\"p\">,</span>\n                <span class=\"c1\"># We need to do this to handle the name change of the prefetch_batches argument in ray 2.4.0</span>\n                <span class=\"o\">**</span><span class=\"p\">{</span><span class=\"n\">PREFETCH_KWARG</span><span class=\"p\">:</span> <span class=\"n\">prefetch_batches</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_PREFETCH_BATCHES</span><span class=\"p\">},</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stream_format</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;tf&quot;</span><span class=\"p\">:</span>\n            <span class=\"c1\"># https://docs.ray.io/en/master/data/api/doc/ray.data.Dataset.iter_tf_batches.html</span>\n            <span class=\"k\">return</span> <span class=\"n\">ray_data</span><span class=\"o\">.</span><span class=\"n\">iter_tf_batches</span><span class=\"p\">(</span>\n                <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"n\">batch_size</span><span class=\"p\">,</span>\n                <span class=\"n\">drop_last</span><span class=\"o\">=</span><span class=\"n\">drop_last</span><span class=\"p\">,</span>\n                <span class=\"n\">local_shuffle_buffer_size</span><span class=\"o\">=</span><span class=\"n\">shuffle_buffer_size</span><span class=\"p\">,</span>\n                <span class=\"n\">local_shuffle_seed</span><span class=\"o\">=</span><span class=\"n\">shuffle_seed</span><span class=\"p\">,</span>\n                <span class=\"c1\"># We need to do this to handle the name change of the prefetch_batches argument in ray 2.4.0</span>\n                <span class=\"o\">**</span><span class=\"p\">{</span><span class=\"n\">PREFETCH_KWARG</span><span class=\"p\">:</span> <span class=\"n\">prefetch_batches</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_PREFETCH_BATCHES</span><span class=\"p\">},</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># https://docs.ray.io/en/latest/data/api/dataset.html#ray.data.Dataset.iter_batches</span>\n            <span class=\"k\">return</span> <span class=\"n\">ray_data</span><span class=\"o\">.</span><span class=\"n\">iter_batches</span><span class=\"p\">(</span>\n                <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"n\">batch_size</span><span class=\"p\">,</span>\n                <span class=\"n\">batch_format</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stream_format</span><span class=\"p\">,</span>\n                <span class=\"n\">drop_last</span><span class=\"o\">=</span><span class=\"n\">drop_last</span><span class=\"p\">,</span>\n                <span class=\"n\">local_shuffle_buffer_size</span><span class=\"o\">=</span><span class=\"n\">shuffle_buffer_size</span><span class=\"p\">,</span>\n                <span class=\"n\">local_shuffle_seed</span><span class=\"o\">=</span><span class=\"n\">shuffle_seed</span><span class=\"p\">,</span>\n                <span class=\"c1\"># We need to do this to handle the name change of the prefetch_batches argument in ray 2.4.0</span>\n                <span class=\"o\">**</span><span class=\"p\">{</span><span class=\"n\">PREFETCH_KWARG</span><span class=\"p\">:</span> <span class=\"n\">prefetch_batches</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_PREFETCH_BATCHES</span><span class=\"p\">},</span>\n            <span class=\"p\">)</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_read_ray_dataset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Read parquet data as a ray dataset object.&quot;&quot;&quot;</span>\n        <span class=\"c1\"># https://docs.ray.io/en/latest/data/api/input_output.html#parquet</span>\n        <span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"n\">ray</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">read_parquet</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fsspec_url</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"n\">columns</span><span class=\"p\">,</span> <span class=\"n\">filesystem</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_folder</span><span class=\"o\">.</span><span class=\"n\">fsspec_fs</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">dataset</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_write_ray_dataset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data_to_write</span><span class=\"p\">:</span> <span class=\"n\">ray</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">Dataset</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Write a ray dataset to a fsspec filesystem&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">partition_cols</span><span class=\"p\">:</span>\n            <span class=\"c1\"># TODO [JL]: https://arrow.apache.org/docs/python/generated/pyarrow.parquet.write_to_dataset.html</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;Partitioning by column not currently supported.&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">pass</span>\n\n        <span class=\"c1\"># delete existing contents or they&#39;ll just be appended to</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rm</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># https://docs.ray.io/en/master/data/api/doc/ray.data.Dataset.write_parquet.html</span>\n        <span class=\"c1\"># data_to_write.repartition(os.cpu_count() * 2).write_parquet(</span>\n        <span class=\"n\">data_to_write</span><span class=\"o\">.</span><span class=\"n\">write_parquet</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fsspec_url</span><span class=\"p\">,</span> <span class=\"n\">filesystem</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_folder</span><span class=\"o\">.</span><span class=\"n\">fsspec_fs</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_ray_dataset_from_arrow</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">pa</span><span class=\"o\">.</span><span class=\"n\">Table</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Convert an Arrow Table to a Ray Dataset&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">ray</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">from_arrow</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_ray_dataset_from_pandas</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Convert an Pandas DataFrame to a Ray Dataset&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">ray</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">from_pandas</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"Table.read_table_from_file\"><a class=\"viewcode-back\" href=\"../../../../../api/python/table/#runhouse.Table.read_table_from_file\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">read_table_from_file</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Read a table from it&#39;s path.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; table = rh.table(path=&quot;path/to/table&quot;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; table_data = table.read_table_from_file()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">with</span> <span class=\"n\">fsspec</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fsspec_url</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s2\">&quot;rb&quot;</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_config</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">t</span><span class=\"p\">:</span>\n                <span class=\"n\">table_data</span> <span class=\"o\">=</span> <span class=\"n\">pq</span><span class=\"o\">.</span><span class=\"n\">read_table</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">full_name</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"n\">columns</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">table_data</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span></div>\n\n<div class=\"viewcode-block\" id=\"Table.rm\"><a class=\"viewcode-back\" href=\"../../../../../api/python/table/#runhouse.Table.rm\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">rm</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">recursive</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Delete table, including its partitioned files where relevant.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; table = rh.table(path=&quot;path/to/table&quot;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; table.rm()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># https://filesystem-spec.readthedocs.io/en/latest/api.html#fsspec.spec.AbstractFileSystem.rm</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_folder</span><span class=\"o\">.</span><span class=\"n\">rm</span><span class=\"p\">(</span><span class=\"n\">recursive</span><span class=\"o\">=</span><span class=\"n\">recursive</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Table.exists_in_system\"><a class=\"viewcode-back\" href=\"../../../../../api/python/table/#runhouse.Table.exists_in_system\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">exists_in_system</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Whether the table exists in file system.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; table.exists_in_system()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_folder</span><span class=\"o\">.</span><span class=\"n\">exists_in_system</span><span class=\"p\">()</span>\n            <span class=\"ow\">and</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_folder</span><span class=\"o\">.</span><span class=\"n\">ls</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fsspec_url</span><span class=\"p\">))</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">1</span>\n        <span class=\"p\">)</span></div></div>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_load_table_subclass</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Load the relevant Table subclass based on the config or data type provided&quot;&quot;&quot;</span>\n    <span class=\"n\">resource_subtype</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;resource_subtype&quot;</span><span class=\"p\">,</span> <span class=\"n\">Table</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">datasets</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">resource_subtype</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;HuggingFaceTable&quot;</span> <span class=\"ow\">or</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">Dataset</span><span class=\"p\">):</span>\n            <span class=\"kn\">from</span> <span class=\"nn\">.huggingface_table</span> <span class=\"kn\">import</span> <span class=\"n\">HuggingFaceTable</span>\n\n            <span class=\"k\">return</span> <span class=\"n\">HuggingFaceTable</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ModuleNotFoundError</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">e</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">resource_subtype</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;PandasTable&quot;</span> <span class=\"ow\">or</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">):</span>\n            <span class=\"kn\">from</span> <span class=\"nn\">.pandas_table</span> <span class=\"kn\">import</span> <span class=\"n\">PandasTable</span>\n\n            <span class=\"k\">return</span> <span class=\"n\">PandasTable</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ModuleNotFoundError</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">e</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">dask.dataframe</span> <span class=\"k\">as</span> <span class=\"nn\">dd</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">resource_subtype</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;DaskTable&quot;</span> <span class=\"ow\">or</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">dd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">):</span>\n            <span class=\"kn\">from</span> <span class=\"nn\">.dask_table</span> <span class=\"kn\">import</span> <span class=\"n\">DaskTable</span>\n\n            <span class=\"k\">return</span> <span class=\"n\">DaskTable</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ModuleNotFoundError</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">e</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">ray</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">resource_subtype</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;RayTable&quot;</span> <span class=\"ow\">or</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">ray</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">Dataset</span><span class=\"p\">):</span>\n            <span class=\"kn\">from</span> <span class=\"nn\">.ray_table</span> <span class=\"kn\">import</span> <span class=\"n\">RayTable</span>\n\n            <span class=\"k\">return</span> <span class=\"n\">RayTable</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ModuleNotFoundError</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">e</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">cudf</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">resource_subtype</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;CudfTable&quot;</span> <span class=\"ow\">or</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">cudf</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Cudf not currently supported&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ModuleNotFoundError</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">e</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">resource_subtype</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Table&quot;</span> <span class=\"ow\">or</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">pa</span><span class=\"o\">.</span><span class=\"n\">Table</span><span class=\"p\">):</span>\n        <span class=\"n\">new_table</span> <span class=\"o\">=</span> <span class=\"n\">Table</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">new_table</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span>\n            <span class=\"sa\">f</span><span class=\"s2\">&quot;Unsupported data type </span><span class=\"si\">{</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\"> for Table construction. &quot;</span>\n            <span class=\"sa\">f</span><span class=\"s2\">&quot;For converting data to pyarrow see: &quot;</span>\n            <span class=\"sa\">f</span><span class=\"s2\">&quot;https://arrow.apache.org/docs/7.0/python/generated/pyarrow.Table.html&quot;</span>\n        <span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"table\"><a class=\"viewcode-back\" href=\"../../../../../api/python/table/#runhouse.table\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">table</span><span class=\"p\">(</span>\n    <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">system</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">data_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">partition_cols</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">mkdir</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">dryrun</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">stream_format</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">metadata</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Table</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;Constructs a Table object, which can be used to interact with the table at the given path.</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        data: Data to be stored in the table.</span>\n<span class=\"sd\">        name (Optional[str]): Name for the table, to reuse it later on.</span>\n<span class=\"sd\">        path (Optional[str]): Full path to the data file.</span>\n<span class=\"sd\">        system (Optional[str]): File system. Currently this must be one of:</span>\n<span class=\"sd\">            [``file``, ``github``, ``sftp``, ``ssh``, ``s3``, ``gs``, ``azure``].</span>\n<span class=\"sd\">        data_config (Optional[dict]): The data config to pass to the underlying fsspec handler.</span>\n<span class=\"sd\">        partition_cols (Optional[list]): List of columns to partition the table by.</span>\n<span class=\"sd\">        mkdir (bool): Whether to create a remote folder for the table. (Default: ``False``)</span>\n<span class=\"sd\">        dryrun (bool): Whether to create the Table if it doesn&#39;t exist, or load a Table object as a dryrun.</span>\n<span class=\"sd\">            (Default: ``False``)</span>\n<span class=\"sd\">        stream_format (Optional[str]): Format to stream the Table as.</span>\n<span class=\"sd\">            Currently this must be one of: [``pyarrow``, ``torch``, ``tf``, ``pandas``]</span>\n<span class=\"sd\">        metadata (Optional[dict]): Metadata to store for the table.</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        Table: The resulting Table object.</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; import runhouse as rh</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Create and save (pandas) table</span>\n<span class=\"sd\">        &gt;&gt;&gt; rh.table(</span>\n<span class=\"sd\">        &gt;&gt;&gt;    data=data,</span>\n<span class=\"sd\">        &gt;&gt;&gt;    name=&quot;~/my_test_pandas_table&quot;,</span>\n<span class=\"sd\">        &gt;&gt;&gt;    path=&quot;table_tests/test_pandas_table.parquet&quot;,</span>\n<span class=\"sd\">        &gt;&gt;&gt;    system=&quot;file&quot;,</span>\n<span class=\"sd\">        &gt;&gt;&gt;    mkdir=True,</span>\n<span class=\"sd\">        &gt;&gt;&gt; ).save()</span>\n<span class=\"sd\">        &gt;&gt;&gt;</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Load table from above</span>\n<span class=\"sd\">        &gt;&gt;&gt; reloaded_table = rh.table(name=&quot;~/my_test_pandas_table&quot;)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"nb\">any</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span>\n            <span class=\"n\">data</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"n\">path</span><span class=\"p\">,</span>\n            <span class=\"n\">system</span><span class=\"p\">,</span>\n            <span class=\"n\">data_config</span><span class=\"p\">,</span>\n            <span class=\"n\">partition_cols</span><span class=\"p\">,</span>\n            <span class=\"n\">stream_format</span><span class=\"p\">,</span>\n            <span class=\"n\">metadata</span><span class=\"p\">,</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">):</span>\n        <span class=\"c1\"># Try reloading existing table</span>\n        <span class=\"k\">return</span> <span class=\"n\">Table</span><span class=\"o\">.</span><span class=\"n\">from_name</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"p\">)</span>\n\n    <span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"n\">_get_cluster_from</span><span class=\"p\">(</span>\n        <span class=\"n\">system</span> <span class=\"ow\">or</span> <span class=\"n\">_current_cluster</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s2\">&quot;config&quot;</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">Folder</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_FS</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">file_name</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"k\">if</span> <span class=\"n\">path</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Extract the file name from the path if provided</span>\n        <span class=\"n\">full_path</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n        <span class=\"n\">file_suffix</span> <span class=\"o\">=</span> <span class=\"n\">full_path</span><span class=\"o\">.</span><span class=\"n\">suffix</span>\n        <span class=\"k\">if</span> <span class=\"n\">file_suffix</span><span class=\"p\">:</span>\n            <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">full_path</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"p\">)</span>\n            <span class=\"n\">file_name</span> <span class=\"o\">=</span> <span class=\"n\">full_path</span><span class=\"o\">.</span><span class=\"n\">name</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">path</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"c1\"># If no path is provided we need to create one based on the name of the table</span>\n        <span class=\"n\">table_name_in_path</span> <span class=\"o\">=</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">resolve_rns_data_resource_name</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">system</span> <span class=\"o\">==</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_FS</span> <span class=\"ow\">or</span> <span class=\"p\">(</span>\n            <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">Resource</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">()</span>\n        <span class=\"p\">):</span>\n            <span class=\"c1\"># create random path to store in .cache folder of local filesystem</span>\n            <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span>\n                <span class=\"n\">Path</span><span class=\"p\">(</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;~/</span><span class=\"si\">{</span><span class=\"n\">Table</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_CACHE_FOLDER</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">{</span><span class=\"n\">table_name_in_path</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n                <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">expanduser</span><span class=\"p\">()</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># save to the default bucket</span>\n            <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">Table</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_FOLDER_PATH</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">{</span><span class=\"n\">table_name_in_path</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n\n    <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;system&quot;</span><span class=\"p\">:</span> <span class=\"n\">system</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"n\">name</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;path&quot;</span><span class=\"p\">:</span> <span class=\"n\">path</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;file_name&quot;</span><span class=\"p\">:</span> <span class=\"n\">file_name</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;data_config&quot;</span><span class=\"p\">:</span> <span class=\"n\">data_config</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;partition_cols&quot;</span><span class=\"p\">:</span> <span class=\"n\">partition_cols</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;stream_format&quot;</span><span class=\"p\">:</span> <span class=\"n\">stream_format</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;metadata&quot;</span><span class=\"p\">:</span> <span class=\"n\">metadata</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">new_table</span> <span class=\"o\">=</span> <span class=\"n\">_load_table_subclass</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">data</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">new_table</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">data</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">new_table</span></div>\n</pre></div>", "current_page_name": "_modules/runhouse/rns/tables/table", "sidebars": ["about.html", "navigation.html", "relations.html", "searchbox.html", "donate.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12"}