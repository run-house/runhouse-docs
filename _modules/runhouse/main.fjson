{"parents": [{"link": "../../", "title": "Module code"}], "title": "runhouse.main", "body": "<h1>Source code for runhouse.main</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">shlex</span>\n<span class=\"kn\">import</span> <span class=\"nn\">subprocess</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">webbrowser</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Optional</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">ray</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">typer</span>\n<span class=\"kn\">import</span> <span class=\"nn\">yaml</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rich.console</span> <span class=\"kn\">import</span> <span class=\"n\">Console</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">runhouse</span> <span class=\"k\">as</span> <span class=\"nn\">rh</span>\n<span class=\"kn\">import</span> <span class=\"nn\">runhouse.rns.login</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse</span> <span class=\"kn\">import</span> <span class=\"n\">__version__</span><span class=\"p\">,</span> <span class=\"n\">cluster</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">,</span> <span class=\"n\">configs</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.cli_utils</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">add_clusters_to_output_table</span><span class=\"p\">,</span>\n    <span class=\"n\">cluster_status_callback</span><span class=\"p\">,</span>\n    <span class=\"n\">create_output_table</span><span class=\"p\">,</span>\n    <span class=\"n\">get_cluster_or_local</span><span class=\"p\">,</span>\n    <span class=\"n\">get_wrapped_server_start_cmd</span><span class=\"p\">,</span>\n    <span class=\"n\">is_command_available</span><span class=\"p\">,</span>\n    <span class=\"n\">LogsSince</span><span class=\"p\">,</span>\n    <span class=\"n\">print_bring_cluster_up_msg</span><span class=\"p\">,</span>\n    <span class=\"n\">print_cluster_config</span><span class=\"p\">,</span>\n    <span class=\"n\">print_status</span><span class=\"p\">,</span>\n    <span class=\"n\">StatusType</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.constants</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">BULLET_UNICODE</span><span class=\"p\">,</span>\n    <span class=\"n\">ITALIC_BOLD</span><span class=\"p\">,</span>\n    <span class=\"n\">MAX_CLUSTERS_DISPLAY</span><span class=\"p\">,</span>\n    <span class=\"n\">RAY_KILL_CMD</span><span class=\"p\">,</span>\n    <span class=\"n\">RAY_START_CMD</span><span class=\"p\">,</span>\n    <span class=\"n\">RESET_FORMAT</span><span class=\"p\">,</span>\n    <span class=\"n\">SERVER_LOGFILE</span><span class=\"p\">,</span>\n    <span class=\"n\">SERVER_STOP_CMD</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.globals</span> <span class=\"kn\">import</span> <span class=\"n\">rns_client</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.logger</span> <span class=\"kn\">import</span> <span class=\"n\">get_logger</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.hardware</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">check_for_existing_ray_instance</span><span class=\"p\">,</span>\n    <span class=\"n\">ClusterStatus</span><span class=\"p\">,</span>\n    <span class=\"n\">get_all_sky_clusters</span><span class=\"p\">,</span>\n    <span class=\"n\">kill_actors</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">SKY_LIVE_CLUSTERS_MSG</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"s2\">&quot;Live on-demand clusters created via Sky may exist that are not saved in Den. &quot;</span>\n    <span class=\"s2\">&quot;For more information, please run [bold italic]`sky status -r`[/bold italic].&quot;</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># create an explicit Typer application</span>\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Typer</span><span class=\"p\">(</span><span class=\"n\">add_completion</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"c1\">###############################</span>\n<span class=\"c1\"># Resources Command Groups</span>\n<span class=\"c1\">###############################</span>\n\n<span class=\"c1\"># creating a cluster app to enable subcommands of cluster (ex: runhouse cluster list).</span>\n<span class=\"c1\"># Register it with the main runhouse application</span>\n<span class=\"n\">cluster_app</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Typer</span><span class=\"p\">(</span><span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Cluster related CLI commands.&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">add_typer</span><span class=\"p\">(</span><span class=\"n\">cluster_app</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;cluster&quot;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># creating a server app to enable subcommands of server (ex: runhouse server status).</span>\n<span class=\"c1\"># Register it with the main runhouse application</span>\n<span class=\"n\">server_app</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Typer</span><span class=\"p\">(</span><span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Runhouse server related CLI commands.&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">add_typer</span><span class=\"p\">(</span><span class=\"n\">server_app</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;server&quot;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># For printing with typer</span>\n<span class=\"n\">console</span> <span class=\"o\">=</span> <span class=\"n\">Console</span><span class=\"p\">()</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">get_logger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\">###############################</span>\n<span class=\"c1\"># General Runhouse CLI commands</span>\n<span class=\"c1\">###############################</span>\n<div class=\"viewcode-block\" id=\"login\"><a class=\"viewcode-back\" href=\"../../../api/cli/#runhouse.main.login\">[docs]</a><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">login</span><span class=\"p\">(</span>\n    <span class=\"n\">token</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Argument</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Your Runhouse API token&quot;</span><span class=\"p\">),</span>\n    <span class=\"n\">sync_secrets</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;--sync-secrets&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Whether to sync secrets. You will be prompted whether to upload local secrets or download saved secrets.&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">yes</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s2\">&quot;--yes&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;-y&quot;</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Sets any confirmations to &#39;yes&#39; automatically.&quot;</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Login to Runhouse. Validates token provided, with options to upload or download stored secrets or config between</span>\n<span class=\"sd\">    local environment and Runhouse / Vault.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">valid_token</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"n\">runhouse</span><span class=\"o\">.</span><span class=\"n\">rns</span><span class=\"o\">.</span><span class=\"n\">login</span><span class=\"o\">.</span><span class=\"n\">login</span><span class=\"p\">(</span>\n            <span class=\"n\">token</span><span class=\"o\">=</span><span class=\"n\">token</span><span class=\"p\">,</span>\n            <span class=\"n\">download_config</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">upload_config</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">download_secrets</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">upload_secrets</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">from_cli</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">yes</span>\n        <span class=\"k\">else</span> <span class=\"n\">runhouse</span><span class=\"o\">.</span><span class=\"n\">rns</span><span class=\"o\">.</span><span class=\"n\">login</span><span class=\"o\">.</span><span class=\"n\">login</span><span class=\"p\">(</span>\n            <span class=\"n\">token</span><span class=\"o\">=</span><span class=\"n\">token</span><span class=\"p\">,</span>\n            <span class=\"n\">interactive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">ret_token</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">from_cli</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">sync_secrets</span><span class=\"o\">=</span><span class=\"n\">sync_secrets</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">valid_token</span><span class=\"p\">:</span>\n        <span class=\"n\">webbrowser</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">configs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;dashboard_url&#39;</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">/dashboard?token=</span><span class=\"si\">{</span><span class=\"n\">valid_token</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">raise</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Exit</span><span class=\"p\">()</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Exit</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"logout\"><a class=\"viewcode-back\" href=\"../../../api/cli/#runhouse.main.logout\">[docs]</a><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">logout</span><span class=\"p\">():</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Logout of Runhouse. Provides options to delete locally configured secrets and local Runhouse configs&quot;&quot;&quot;</span>\n    <span class=\"n\">runhouse</span><span class=\"o\">.</span><span class=\"n\">rns</span><span class=\"o\">.</span><span class=\"n\">login</span><span class=\"o\">.</span><span class=\"n\">logout</span><span class=\"p\">(</span><span class=\"n\">interactive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"k\">raise</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Exit</span><span class=\"p\">()</span></div>\n\n\n<span class=\"c1\">###############################</span>\n<span class=\"c1\"># Cluster CLI commands</span>\n<span class=\"c1\">###############################</span>\n<div class=\"viewcode-block\" id=\"cluster_ssh\"><a class=\"viewcode-back\" href=\"../../../api/cli/#runhouse.main.cluster_ssh\">[docs]</a><span class=\"nd\">@cluster_app</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">(</span><span class=\"s2\">&quot;ssh&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">cluster_ssh</span><span class=\"p\">(</span><span class=\"n\">cluster_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;SSH into a remote cluster.</span>\n\n<span class=\"sd\">    Example:</span>\n\n<span class=\"sd\">        ``$ runhouse cluster ssh /sashab/rh-basic-cpu``</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">cluster</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">cluster_name</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">is_up</span><span class=\"p\">():</span>\n            <span class=\"n\">print_bring_cluster_up_msg</span><span class=\"p\">(</span><span class=\"n\">cluster_name</span><span class=\"o\">=</span><span class=\"n\">cluster_name</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span>\n\n        <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">ssh</span><span class=\"p\">()</span>\n\n    <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">sky</span>\n\n        <span class=\"kn\">from</span> <span class=\"nn\">runhouse</span> <span class=\"kn\">import</span> <span class=\"n\">OnDemandCluster</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">runhouse.constants</span> <span class=\"kn\">import</span> <span class=\"n\">DEFAULT_SSH_PORT</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.hardware.utils</span> <span class=\"kn\">import</span> <span class=\"n\">_run_ssh_command</span>\n\n        <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">sky</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">(</span><span class=\"n\">cluster_names</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">cluster_name</span><span class=\"p\">],</span> <span class=\"n\">refresh</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;Could not load cluster called </span><span class=\"si\">{</span><span class=\"n\">cluster_name</span><span class=\"si\">}</span><span class=\"s2\">. Cluster must either be saved to Den, &quot;</span>\n                <span class=\"s2\">&quot;or be an ondemand cluster that is currently up.&quot;</span>\n            <span class=\"p\">)</span>\n\n            <span class=\"k\">raise</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n        <span class=\"n\">resource_handle</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;handle&quot;</span><span class=\"p\">,</span> <span class=\"p\">{})</span>\n\n        <span class=\"n\">sky_ssh_config</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;~/.sky/generated/</span><span class=\"si\">{</span><span class=\"n\">cluster_name</span><span class=\"si\">}</span><span class=\"s2\">.yml&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">expanduser</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">sky_ssh_config</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">():</span>\n            <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">sky_ssh_config</span><span class=\"p\">,</span> <span class=\"s2\">&quot;r&quot;</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s2\">&quot;utf-8&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n                <span class=\"n\">ssh_config</span> <span class=\"o\">=</span> <span class=\"n\">yaml</span><span class=\"o\">.</span><span class=\"n\">safe_load</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n            <span class=\"n\">ssh_proxy_command</span> <span class=\"o\">=</span> <span class=\"n\">ssh_config</span><span class=\"p\">[</span><span class=\"s2\">&quot;auth&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;ssh_proxy_command&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">ssh_proxy_command</span><span class=\"p\">:</span>\n                <span class=\"n\">ssh_proxy_command</span> <span class=\"o\">=</span> <span class=\"n\">ssh_proxy_command</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;skypilot:ssh_user&quot;</span><span class=\"p\">,</span> <span class=\"n\">resource_handle</span><span class=\"o\">.</span><span class=\"n\">ssh_user</span>\n                <span class=\"p\">)</span>\n\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">ssh_proxy_command</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"n\">_run_ssh_command</span><span class=\"p\">(</span>\n            <span class=\"n\">address</span><span class=\"o\">=</span><span class=\"n\">resource_handle</span><span class=\"o\">.</span><span class=\"n\">head_ip</span><span class=\"p\">,</span>\n            <span class=\"n\">ssh_user</span><span class=\"o\">=</span><span class=\"n\">resource_handle</span><span class=\"o\">.</span><span class=\"n\">ssh_user</span> <span class=\"ow\">or</span> <span class=\"s2\">&quot;ubuntu&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">ssh_port</span><span class=\"o\">=</span><span class=\"n\">resource_handle</span><span class=\"o\">.</span><span class=\"n\">stable_ssh_ports</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"ow\">or</span> <span class=\"n\">DEFAULT_SSH_PORT</span><span class=\"p\">,</span>\n            <span class=\"n\">ssh_private_key</span><span class=\"o\">=</span><span class=\"n\">OnDemandCluster</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_KEYFILE</span><span class=\"p\">,</span>\n            <span class=\"n\">docker_user</span><span class=\"o\">=</span><span class=\"n\">resource_handle</span><span class=\"o\">.</span><span class=\"n\">docker_user</span><span class=\"p\">,</span>\n            <span class=\"n\">ssh_proxy_command</span><span class=\"o\">=</span><span class=\"n\">ssh_proxy_command</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"cluster_status\"><a class=\"viewcode-back\" href=\"../../../api/cli/#runhouse.main.cluster_status\">[docs]</a><span class=\"nd\">@cluster_app</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">(</span><span class=\"s2\">&quot;status&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">cluster_status</span><span class=\"p\">(</span>\n    <span class=\"n\">cluster_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Argument</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Name of cluster to check. If not specified will check the local cluster.&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">send_to_den</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Whether to update Den with the status.&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Load the status of the cluster.</span>\n\n<span class=\"sd\">    Example:</span>\n\n<span class=\"sd\">        ``$ runhouse cluster status /sashab/rh-basic-cpu``</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">current_cluster</span> <span class=\"o\">=</span> <span class=\"n\">get_cluster_or_local</span><span class=\"p\">(</span><span class=\"n\">cluster_name</span><span class=\"o\">=</span><span class=\"n\">cluster_name</span><span class=\"p\">)</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">cluster_status</span> <span class=\"o\">=</span> <span class=\"n\">current_cluster</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">(</span><span class=\"n\">send_to_den</span><span class=\"o\">=</span><span class=\"n\">send_to_den</span><span class=\"p\">)</span>\n\n    <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n        <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Failed to load status for cluster.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span>\n\n    <span class=\"k\">except</span> <span class=\"ne\">ConnectionError</span><span class=\"p\">:</span>\n        <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;</span><span class=\"se\">\\N{smiling face with horns}</span><span class=\"s2\"> Runhouse Daemon is not running... </span><span class=\"se\">\\N{No Entry}</span><span class=\"s2\"> </span><span class=\"se\">\\N{Runner}</span><span class=\"s2\">&quot;</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span>\n\n    <span class=\"n\">print_status</span><span class=\"p\">(</span><span class=\"n\">cluster_status</span><span class=\"p\">,</span> <span class=\"n\">current_cluster</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"cluster_list\"><a class=\"viewcode-back\" href=\"../../../api/cli/#runhouse.main.cluster_list\">[docs]</a><span class=\"nd\">@cluster_app</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">(</span><span class=\"s2\">&quot;list&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">cluster_list</span><span class=\"p\">(</span>\n    <span class=\"n\">show_all</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;-a&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;--all&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Get all clusters saved in Den. Up to </span><span class=\"si\">{</span><span class=\"n\">MAX_CLUSTERS_DISPLAY</span><span class=\"si\">}</span><span class=\"s2\"> most recently active clusters &quot;</span>\n        <span class=\"sa\">f</span><span class=\"s2\">&quot;will be displayed.&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">since</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;--since&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Time duration to filter on. Minimum allowable filter is 1 minute. You may filter by seconds (s), &quot;</span>\n        <span class=\"s2\">&quot;minutes (m), hours (h) or days (s). Examples: 30s, 15m, 2h, 3d.&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">cluster_status</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;--status&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Cluster status to filter on. Options include: &#39;up&#39;, &#39;stopped&#39;, &#39;init&#39;, &#39;unknown&#39;&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"n\">cluster_status_callback</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Load Runhouse clusters</span>\n\n<span class=\"sd\">    Examples:</span>\n\n<span class=\"sd\">        ``$ runhouse cluster list``</span>\n\n<span class=\"sd\">        ``$ runhouse cluster list --all``</span>\n\n<span class=\"sd\">        ``$ runhouse cluster list --status up``</span>\n\n<span class=\"sd\">        ``$ runhouse cluster list --since 15m``</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"c1\"># logged out case</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">configs</span><span class=\"o\">.</span><span class=\"n\">token</span><span class=\"p\">:</span>\n        <span class=\"n\">sky_cli_command_formatted</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">ITALIC_BOLD</span><span class=\"si\">}</span><span class=\"s2\">`sky status -r</span><span class=\"si\">{</span><span class=\"n\">RESET_FORMAT</span><span class=\"si\">}</span><span class=\"s2\">`&quot;</span>  <span class=\"c1\"># will be printed bold and italic</span>\n        <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span>\n            <span class=\"sa\">f</span><span class=\"s2\">&quot;Listing clusters requires a Runhouse token. Please run `runhouse login` to get your token, &quot;</span>\n            <span class=\"sa\">f</span><span class=\"s2\">&quot;or run </span><span class=\"si\">{</span><span class=\"n\">sky_cli_command_formatted</span><span class=\"si\">}</span><span class=\"s2\"> to list locally stored on-demand clusters.&quot;</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span>\n\n    <span class=\"n\">clusters</span> <span class=\"o\">=</span> <span class=\"n\">Cluster</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">(</span><span class=\"n\">show_all</span><span class=\"o\">=</span><span class=\"n\">show_all</span><span class=\"p\">,</span> <span class=\"n\">since</span><span class=\"o\">=</span><span class=\"n\">since</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"n\">cluster_status</span><span class=\"p\">)</span>\n\n    <span class=\"n\">den_clusters</span> <span class=\"o\">=</span> <span class=\"n\">clusters</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;den_clusters&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"n\">running_clusters</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"p\">[</span>\n            <span class=\"n\">den_cluster</span>\n            <span class=\"k\">for</span> <span class=\"n\">den_cluster</span> <span class=\"ow\">in</span> <span class=\"n\">den_clusters</span>\n            <span class=\"k\">if</span> <span class=\"n\">den_cluster</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;Status&quot;</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">ClusterStatus</span><span class=\"o\">.</span><span class=\"n\">UP</span>\n        <span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">den_clusters</span>\n        <span class=\"k\">else</span> <span class=\"kc\">None</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">sky_clusters</span> <span class=\"o\">=</span> <span class=\"n\">clusters</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;sky_clusters&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">den_clusters</span><span class=\"p\">:</span>\n        <span class=\"n\">no_clusters_msg</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;No clusters found in Den for </span><span class=\"si\">{</span><span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">username</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">show_all</span> <span class=\"ow\">or</span> <span class=\"n\">since</span> <span class=\"ow\">or</span> <span class=\"n\">cluster_status</span><span class=\"p\">:</span>\n            <span class=\"n\">no_clusters_msg</span> <span class=\"o\">+=</span> <span class=\"s2\">&quot; that match the provided filters&quot;</span>\n        <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">no_clusters_msg</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">sky_clusters</span><span class=\"p\">:</span>\n            <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">SKY_LIVE_CLUSTERS_MSG</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span>\n\n    <span class=\"n\">filters_requested</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">show_all</span> <span class=\"ow\">or</span> <span class=\"n\">since</span> <span class=\"ow\">or</span> <span class=\"n\">cluster_status</span>\n\n    <span class=\"n\">clusters_to_print</span> <span class=\"o\">=</span> <span class=\"n\">den_clusters</span> <span class=\"k\">if</span> <span class=\"n\">filters_requested</span> <span class=\"k\">else</span> <span class=\"n\">running_clusters</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">show_all</span><span class=\"p\">:</span>\n        <span class=\"c1\"># if user requesting all den cluster, limit print only to 50 clusters max.</span>\n        <span class=\"n\">clusters_to_print</span> <span class=\"o\">=</span> <span class=\"n\">clusters_to_print</span><span class=\"p\">[</span>\n            <span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">clusters_to_print</span><span class=\"p\">),</span> <span class=\"n\">MAX_CLUSTERS_DISPLAY</span><span class=\"p\">))</span>\n        <span class=\"p\">]</span>\n\n    <span class=\"c1\"># creating the clusters table</span>\n    <span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">create_output_table</span><span class=\"p\">(</span>\n        <span class=\"n\">total_clusters</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">den_clusters</span><span class=\"p\">),</span>\n        <span class=\"n\">running_clusters</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">running_clusters</span><span class=\"p\">),</span>\n        <span class=\"n\">displayed_clusters</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">clusters_to_print</span><span class=\"p\">),</span>\n        <span class=\"n\">filters_requested</span><span class=\"o\">=</span><span class=\"n\">filters_requested</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">add_clusters_to_output_table</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"o\">=</span><span class=\"n\">table</span><span class=\"p\">,</span> <span class=\"n\">clusters</span><span class=\"o\">=</span><span class=\"n\">clusters_to_print</span><span class=\"p\">)</span>\n\n    <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># print msg about un-saved live sky clusters.</span>\n    <span class=\"k\">if</span> <span class=\"n\">sky_clusters</span><span class=\"p\">:</span>\n        <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">SKY_LIVE_CLUSTERS_MSG</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"cluster_keep_warm\"><a class=\"viewcode-back\" href=\"../../../api/cli/#runhouse.main.cluster_keep_warm\">[docs]</a><span class=\"nd\">@cluster_app</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">(</span><span class=\"s2\">&quot;keep-warm&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">cluster_keep_warm</span><span class=\"p\">(</span>\n    <span class=\"n\">cluster_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Argument</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Name of cluster to keep warm. If not specified will check the local cluster.&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">mins</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Amount of time (in min) to keep the cluster warm after inactivity. &quot;</span>\n        <span class=\"s2\">&quot;If set to -1, keeps cluster warm indefinitely.&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Keep the cluster warm for given number of minutes after inactivity.</span>\n\n<span class=\"sd\">    Example:</span>\n\n<span class=\"sd\">        ``$ runhouse cluster keep-warm /sashab/rh-basic-cpu``</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">current_cluster</span> <span class=\"o\">=</span> <span class=\"n\">get_cluster_or_local</span><span class=\"p\">(</span><span class=\"n\">cluster_name</span><span class=\"o\">=</span><span class=\"n\">cluster_name</span><span class=\"p\">)</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">current_cluster</span><span class=\"o\">.</span><span class=\"n\">is_up</span><span class=\"p\">():</span>\n            <span class=\"n\">print_bring_cluster_up_msg</span><span class=\"p\">(</span><span class=\"n\">cluster_name</span><span class=\"o\">=</span><span class=\"n\">cluster_name</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span>\n        <span class=\"n\">current_cluster</span><span class=\"o\">.</span><span class=\"n\">keep_warm</span><span class=\"p\">(</span><span class=\"n\">mins</span><span class=\"o\">=</span><span class=\"n\">mins</span><span class=\"p\">)</span>\n\n    <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n        <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">cluster_name</span><span class=\"si\">}</span><span class=\"s2\"> is not saved in Den.&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">sky_live_clusters</span> <span class=\"o\">=</span> <span class=\"n\">get_all_sky_clusters</span><span class=\"p\">()</span>\n        <span class=\"n\">cluster_name</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"n\">cluster_name</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;/&quot;</span><span class=\"p\">)[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"s2\">&quot;/&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">cluster_name</span> <span class=\"k\">else</span> <span class=\"n\">cluster_name</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">cluster_name</span> <span class=\"ow\">in</span> <span class=\"n\">sky_live_clusters</span><span class=\"p\">:</span>\n            <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;You can keep warm the cluster by running [italic bold] `sky autostop </span><span class=\"si\">{</span><span class=\"n\">cluster_name</span><span class=\"si\">}</span><span class=\"s2\"> -i </span><span class=\"si\">{</span><span class=\"n\">mins</span><span class=\"si\">}</span><span class=\"s2\">`&quot;</span>\n            <span class=\"p\">)</span>\n\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Failed to keep the cluster warm: </span><span class=\"si\">{</span><span class=\"n\">e</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"cluster_up\"><a class=\"viewcode-back\" href=\"../../../api/cli/#runhouse.main.cluster_up\">[docs]</a><span class=\"nd\">@cluster_app</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">(</span><span class=\"s2\">&quot;up&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">cluster_up</span><span class=\"p\">(</span>\n    <span class=\"n\">cluster_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Argument</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;The name of cluster to bring up.&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Bring up the cluster if it is not up. No-op if cluster is already up.</span>\n<span class=\"sd\">    This only applies to on-demand clusters, and has no effect on self-managed clusters.</span>\n\n<span class=\"sd\">    Example:</span>\n\n<span class=\"sd\">        ``$ runhouse cluster up /sashab/rh-basic-cpu``</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">current_cluster</span> <span class=\"o\">=</span> <span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">cluster</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">cluster_name</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">current_cluster</span><span class=\"o\">.</span><span class=\"n\">up_if_not</span><span class=\"p\">()</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n        <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Cluster is not saved in Den.&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Failed to bring up the cluster: </span><span class=\"si\">{</span><span class=\"n\">e</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"cluster_down\"><a class=\"viewcode-back\" href=\"../../../api/cli/#runhouse.main.cluster_down\">[docs]</a><span class=\"nd\">@cluster_app</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">(</span><span class=\"s2\">&quot;down&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">cluster_down</span><span class=\"p\">(</span>\n    <span class=\"n\">cluster_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Argument</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;The name of cluster to terminate.&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">remove_configs</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;-rm&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;--remove-configs&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Whether to delete cluster config from Den (default: ``False``).&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">remove_all</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;-a&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;--all&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Whether to terminate all running clusters saved in Den (default: ``False``).&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">force_deletion</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s2\">&quot;-y&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;--yes&quot;</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Skip confirmation prompt.&quot;</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Terminate cluster if it is not down. No-op if cluster is already down.</span>\n<span class=\"sd\">    This only applies to on-demand clusters, and has no effect on self-managed clusters.</span>\n\n<span class=\"sd\">    Example:</span>\n\n<span class=\"sd\">        ``$ runhouse cluster down /sashab/rh-basic-cpu``</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">force_deletion</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">cluster_name</span><span class=\"p\">:</span>\n            <span class=\"n\">proceed</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">prompt</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Terminating </span><span class=\"si\">{</span><span class=\"n\">cluster_name</span><span class=\"si\">}</span><span class=\"s2\">. Proceed? [Y/n]&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">remove_all</span><span class=\"p\">:</span>\n            <span class=\"n\">proceed</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">prompt</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Terminating all running clusters saved in Den. Proceed? [Y/n]&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Cannot determine which cluster to terminate, aborting.&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">raise</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">proceed</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;n&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;no&quot;</span><span class=\"p\">]:</span>\n            <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Aborted!&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">raise</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">remove_all</span><span class=\"p\">:</span>\n        <span class=\"n\">running_den_clusters</span> <span class=\"o\">=</span> <span class=\"n\">Cluster</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">=</span><span class=\"n\">ClusterStatus</span><span class=\"o\">.</span><span class=\"n\">UP</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;den_clusters&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">running_den_clusters</span><span class=\"p\">:</span>\n            <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;No running clusters saved in Den&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">raise</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n        <span class=\"n\">terminated_clusters</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">for</span> <span class=\"n\">running_cluster</span> <span class=\"ow\">in</span> <span class=\"n\">running_den_clusters</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">current_cluster</span> <span class=\"o\">=</span> <span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">cluster</span><span class=\"p\">(</span>\n                    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s1\">&#39;/</span><span class=\"si\">{</span><span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">username</span><span class=\"si\">}</span><span class=\"s1\">/</span><span class=\"si\">{</span><span class=\"n\">running_cluster</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;Name&quot;</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s1\">&#39;</span><span class=\"p\">,</span>\n                    <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">current_cluster</span><span class=\"p\">,</span> <span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">OnDemandCluster</span><span class=\"p\">):</span>\n                    <span class=\"n\">current_cluster</span><span class=\"o\">.</span><span class=\"n\">teardown_and_delete</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">remove_configs</span> <span class=\"k\">else</span> <span class=\"n\">current_cluster</span><span class=\"o\">.</span><span class=\"n\">teardown</span><span class=\"p\">()</span>\n                    <span class=\"n\">terminated_clusters</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span>\n                        <span class=\"sa\">f</span><span class=\"s2\">&quot;[reset][bold italic]</span><span class=\"si\">{</span><span class=\"n\">current_cluster</span><span class=\"o\">.</span><span class=\"n\">rns_address</span><span class=\"si\">}</span><span class=\"s2\"> [reset]is not an on-demand cluster and must be terminated manually.&quot;</span>\n                    <span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n                <span class=\"k\">continue</span>\n        <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Successfully terminated [reset]</span><span class=\"si\">{</span><span class=\"n\">terminated_clusters</span><span class=\"si\">}</span><span class=\"s2\"> clusters.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">raise</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n    <span class=\"n\">current_cluster</span> <span class=\"o\">=</span> <span class=\"n\">get_cluster_or_local</span><span class=\"p\">(</span><span class=\"n\">cluster_name</span><span class=\"o\">=</span><span class=\"n\">cluster_name</span><span class=\"p\">)</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">current_cluster</span><span class=\"p\">,</span> <span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">OnDemandCluster</span><span class=\"p\">):</span>\n            <span class=\"n\">current_cluster</span><span class=\"o\">.</span><span class=\"n\">teardown_and_delete</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">remove_configs</span> <span class=\"k\">else</span> <span class=\"n\">current_cluster</span><span class=\"o\">.</span><span class=\"n\">teardown</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">current_cluster</span><span class=\"o\">.</span><span class=\"n\">rns_address</span><span class=\"si\">}</span><span class=\"s2\"> is not an on-demand cluster and must be terminated manually.&quot;</span>\n            <span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n        <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Cluster is not saved in Den, could not bring it down.&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">sky_live_clusters</span> <span class=\"o\">=</span> <span class=\"n\">get_all_sky_clusters</span><span class=\"p\">()</span>\n        <span class=\"n\">cluster_name</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"n\">cluster_name</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;/&quot;</span><span class=\"p\">)[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"s2\">&quot;/&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">cluster_name</span> <span class=\"k\">else</span> <span class=\"n\">cluster_name</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">cluster_name</span> <span class=\"ow\">in</span> <span class=\"n\">sky_live_clusters</span><span class=\"p\">:</span>\n            <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;You can bring down the cluster by running [italic bold] `sky down </span><span class=\"si\">{</span><span class=\"n\">cluster_name</span><span class=\"si\">}</span><span class=\"s2\">`&quot;</span>\n            <span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Failed to terminate the cluster: </span><span class=\"si\">{</span><span class=\"n\">e</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"cluster_logs\"><a class=\"viewcode-back\" href=\"../../../api/cli/#runhouse.main.cluster_logs\">[docs]</a><span class=\"nd\">@cluster_app</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">(</span><span class=\"s2\">&quot;logs&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">cluster_logs</span><span class=\"p\">(</span>\n    <span class=\"n\">cluster_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Argument</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Name of cluster to load the logs from. If not specified, loads the logs of the local cluster.&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">since</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">LogsSince</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"n\">LogsSince</span><span class=\"o\">.</span><span class=\"n\">five</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;--since&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Get the logs from the provided timeframe (in minutes).&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Load the logs of the Runhouse server running on a cluster.</span>\n\n<span class=\"sd\">    Examples:</span>\n\n<span class=\"sd\">        ``$ runhouse cluster logs /sashab/rh-basic-cpu``</span>\n\n<span class=\"sd\">        ``$ runhouse cluster logs /sashab/rh-basic-cpu --since 60``</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">current_cluster</span> <span class=\"o\">=</span> <span class=\"n\">get_cluster_or_local</span><span class=\"p\">(</span><span class=\"n\">cluster_name</span><span class=\"o\">=</span><span class=\"n\">cluster_name</span><span class=\"p\">)</span>\n\n    <span class=\"n\">cluster_uri</span> <span class=\"o\">=</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">resource_uri</span><span class=\"p\">(</span><span class=\"n\">current_cluster</span><span class=\"o\">.</span><span class=\"n\">rns_address</span><span class=\"p\">)</span>\n\n    <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span>\n        <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">api_server_url</span><span class=\"si\">}</span><span class=\"s2\">/resource/</span><span class=\"si\">{</span><span class=\"n\">cluster_uri</span><span class=\"si\">}</span><span class=\"s2\">/logs/file?minutes=</span><span class=\"si\">{</span><span class=\"n\">since</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">request_headers</span><span class=\"p\">(),</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">status_code</span> <span class=\"o\">!=</span> <span class=\"mi\">200</span><span class=\"p\">:</span>\n        <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Failed to get cluster logs.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span>\n\n    <span class=\"n\">logs_file_url</span> <span class=\"o\">=</span> <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;data&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;logs_presigned_url&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">logs_file_content</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">logs_file_url</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s2\">&quot;utf-8&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;[reset][cyan]</span><span class=\"si\">{</span><span class=\"n\">logs_file_content</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span></div>\n\n\n<span class=\"c1\">###############################</span>\n<span class=\"c1\"># Server CLI commands</span>\n<span class=\"c1\">###############################</span>\n<span class=\"k\">def</span> <span class=\"nf\">_start_server</span><span class=\"p\">(</span>\n    <span class=\"n\">restart</span><span class=\"p\">,</span>\n    <span class=\"n\">restart_ray</span><span class=\"p\">,</span>\n    <span class=\"n\">screen</span><span class=\"p\">,</span>\n    <span class=\"n\">nohup</span><span class=\"p\">,</span>\n    <span class=\"n\">create_logfile</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">use_https</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">den_auth</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">ssl_keyfile</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">ssl_certfile</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">restart_proxy</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">use_caddy</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">domain</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">certs_address</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">api_server_url</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">default_env_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">conda_env</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">from_python</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n<span class=\"p\">):</span>\n    <span class=\"c1\">############################################</span>\n    <span class=\"c1\"># Build CLI commands to start the server</span>\n    <span class=\"c1\">############################################</span>\n    <span class=\"n\">cmds</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">if</span> <span class=\"n\">restart</span><span class=\"p\">:</span>\n        <span class=\"n\">cmds</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">SERVER_STOP_CMD</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># We have to `ray start` not within screen/nohup</span>\n    <span class=\"n\">existing_ray_instance</span> <span class=\"o\">=</span> <span class=\"n\">check_for_existing_ray_instance</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">existing_ray_instance</span> <span class=\"ow\">or</span> <span class=\"n\">restart_ray</span><span class=\"p\">:</span>\n        <span class=\"n\">cmds</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">RAY_KILL_CMD</span><span class=\"p\">)</span>\n        <span class=\"n\">cmds</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">RAY_START_CMD</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Collect flags</span>\n    <span class=\"n\">flags</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"n\">den_auth_flag</span> <span class=\"o\">=</span> <span class=\"s2\">&quot; --use-den-auth&quot;</span> <span class=\"k\">if</span> <span class=\"n\">den_auth</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">den_auth_flag</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Starting server with Den auth.&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">den_auth_flag</span><span class=\"p\">)</span>\n\n    <span class=\"n\">restart_proxy_flag</span> <span class=\"o\">=</span> <span class=\"s2\">&quot; --restart-proxy&quot;</span> <span class=\"k\">if</span> <span class=\"n\">restart_proxy</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">restart_proxy_flag</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Reinstalling server configs.&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">restart_proxy_flag</span><span class=\"p\">)</span>\n\n    <span class=\"n\">use_caddy_flag</span> <span class=\"o\">=</span> <span class=\"s2\">&quot; --use-caddy&quot;</span> <span class=\"k\">if</span> <span class=\"n\">use_caddy</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">use_caddy_flag</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Configuring Caddy on the cluster.&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">use_caddy_flag</span><span class=\"p\">)</span>\n\n    <span class=\"n\">ssl_keyfile_flag</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot; --ssl-keyfile </span><span class=\"si\">{</span><span class=\"n\">ssl_keyfile</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span> <span class=\"k\">if</span> <span class=\"n\">ssl_keyfile</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">ssl_keyfile_flag</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Using SSL keyfile in path: </span><span class=\"si\">{</span><span class=\"n\">ssl_keyfile</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ssl_keyfile_flag</span><span class=\"p\">)</span>\n\n    <span class=\"n\">ssl_certfile_flag</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot; --ssl-certfile </span><span class=\"si\">{</span><span class=\"n\">ssl_certfile</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span> <span class=\"k\">if</span> <span class=\"n\">ssl_certfile</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">ssl_certfile_flag</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Using SSL certfile in path: </span><span class=\"si\">{</span><span class=\"n\">ssl_certfile</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ssl_certfile_flag</span><span class=\"p\">)</span>\n\n    <span class=\"n\">domain</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot; --domain </span><span class=\"si\">{</span><span class=\"n\">domain</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span> <span class=\"k\">if</span> <span class=\"n\">domain</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">domain</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Using domain: </span><span class=\"si\">{</span><span class=\"n\">domain</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">domain</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Use HTTPS if explicitly specified or if SSL cert or keyfile path are provided</span>\n    <span class=\"n\">https_flag</span> <span class=\"o\">=</span> <span class=\"s2\">&quot; --use-https&quot;</span> <span class=\"k\">if</span> <span class=\"n\">use_https</span> <span class=\"ow\">or</span> <span class=\"p\">(</span><span class=\"n\">ssl_keyfile</span> <span class=\"ow\">or</span> <span class=\"n\">ssl_certfile</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">https_flag</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Starting server with HTTPS.&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">https_flag</span><span class=\"p\">)</span>\n\n    <span class=\"n\">host_flag</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot; --host </span><span class=\"si\">{</span><span class=\"n\">host</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span> <span class=\"k\">if</span> <span class=\"n\">host</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">host_flag</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Using host: </span><span class=\"si\">{</span><span class=\"n\">host</span><span class=\"si\">}</span><span class=\"s2\">.&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">host_flag</span><span class=\"p\">)</span>\n\n    <span class=\"n\">port_flag</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot; --port </span><span class=\"si\">{</span><span class=\"n\">port</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span> <span class=\"k\">if</span> <span class=\"n\">port</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">port_flag</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Using port: </span><span class=\"si\">{</span><span class=\"n\">port</span><span class=\"si\">}</span><span class=\"s2\">.&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">port_flag</span><span class=\"p\">)</span>\n\n    <span class=\"n\">address_flag</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot; --certs-address </span><span class=\"si\">{</span><span class=\"n\">certs_address</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span> <span class=\"k\">if</span> <span class=\"n\">certs_address</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">address_flag</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Server public IP address: </span><span class=\"si\">{</span><span class=\"n\">certs_address</span><span class=\"si\">}</span><span class=\"s2\">.&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">address_flag</span><span class=\"p\">)</span>\n\n    <span class=\"n\">api_server_url_flag</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"sa\">f</span><span class=\"s2\">&quot; --api-server-url </span><span class=\"si\">{</span><span class=\"n\">api_server_url</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span> <span class=\"k\">if</span> <span class=\"n\">api_server_url</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">api_server_url_flag</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Setting api_server url to </span><span class=\"si\">{</span><span class=\"n\">api_server_url</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">api_server_url_flag</span><span class=\"p\">)</span>\n\n    <span class=\"n\">default_env_flag</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"sa\">f</span><span class=\"s2\">&quot; --default-env-name </span><span class=\"si\">{</span><span class=\"n\">default_env_name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span> <span class=\"k\">if</span> <span class=\"n\">default_env_name</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">default_env_flag</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Starting server in default env named: </span><span class=\"si\">{</span><span class=\"n\">default_env_name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">default_env_flag</span><span class=\"p\">)</span>\n\n    <span class=\"n\">conda_env_flag</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot; --conda-env </span><span class=\"si\">{</span><span class=\"n\">conda_env</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span> <span class=\"k\">if</span> <span class=\"n\">conda_env</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">conda_env_flag</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Creating runtime env for conda env: </span><span class=\"si\">{</span><span class=\"n\">conda_env</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">conda_env_flag</span><span class=\"p\">)</span>\n\n    <span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot; --from-python&quot;</span> <span class=\"k\">if</span> <span class=\"n\">from_python</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Check if screen or nohup are available</span>\n    <span class=\"n\">screen</span> <span class=\"o\">=</span> <span class=\"n\">screen</span> <span class=\"ow\">and</span> <span class=\"n\">is_command_available</span><span class=\"p\">(</span><span class=\"s2\">&quot;screen&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">nohup</span> <span class=\"o\">=</span> <span class=\"ow\">not</span> <span class=\"n\">screen</span> <span class=\"ow\">and</span> <span class=\"n\">nohup</span> <span class=\"ow\">and</span> <span class=\"n\">is_command_available</span><span class=\"p\">(</span><span class=\"s2\">&quot;nohup&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Create logfile if we are using backgrounding</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">screen</span> <span class=\"ow\">or</span> <span class=\"n\">nohup</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">create_logfile</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">SERVER_LOGFILE</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">():</span>\n        <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">SERVER_LOGFILE</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">mkdir</span><span class=\"p\">(</span><span class=\"n\">parents</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">exist_ok</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">SERVER_LOGFILE</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">touch</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Add flags to the server start command</span>\n    <span class=\"n\">cmds</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">get_wrapped_server_start_cmd</span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"p\">,</span> <span class=\"n\">screen</span><span class=\"p\">,</span> <span class=\"n\">nohup</span><span class=\"p\">))</span>\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Starting API server using the following command: </span><span class=\"si\">{</span><span class=\"n\">cmds</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">.&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Open and read the lines of the server logfile so we only print the most recent lines after starting</span>\n        <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">screen</span> <span class=\"ow\">or</span> <span class=\"n\">nohup</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">SERVER_LOGFILE</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">():</span>\n            <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">SERVER_LOGFILE</span><span class=\"p\">,</span> <span class=\"s2\">&quot;r&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">readlines</span><span class=\"p\">()</span>  <span class=\"c1\"># Discard these, they&#39;re from the previous times the server was started</span>\n\n        <span class=\"c1\"># We do these one by one so it&#39;s more obvious where the error is if there is one</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">cmd</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">cmds</span><span class=\"p\">):</span>\n            <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Executing `</span><span class=\"si\">{</span><span class=\"n\">cmd</span><span class=\"si\">}</span><span class=\"s2\">`&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span>\n                <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cmds</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n            <span class=\"p\">):</span>  <span class=\"c1\"># last cmd is not being parsed correctly when ran with shlex.split</span>\n                <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"p\">,</span> <span class=\"n\">shell</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">check</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">shlex</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"p\">),</span> <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">returncode</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"c1\"># We don&#39;t want to raise an error if the server kill fails, as it may simply not be running</span>\n                <span class=\"k\">if</span> <span class=\"s2\">&quot;pkill&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">cmd</span><span class=\"p\">:</span>\n                    <span class=\"k\">continue</span>\n\n                <span class=\"c1\"># Retry ray start in case pkill process did not complete in time, up to 10s</span>\n                <span class=\"k\">if</span> <span class=\"n\">cmd</span> <span class=\"o\">==</span> <span class=\"n\">RAY_START_CMD</span><span class=\"p\">:</span>\n                    <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Retrying:&quot;</span><span class=\"p\">)</span>\n                    <span class=\"n\">attempt</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                    <span class=\"k\">while</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">returncode</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"n\">attempt</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">:</span>\n                        <span class=\"n\">attempt</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n                        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span>\n                            <span class=\"n\">shlex</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"p\">),</span> <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">capture_output</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n                        <span class=\"p\">)</span>\n                        <span class=\"k\">if</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">stderr</span> <span class=\"ow\">and</span> <span class=\"s2\">&quot;ConnectionError&quot;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"p\">:</span>\n                            <span class=\"k\">break</span>\n                    <span class=\"k\">if</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">returncode</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                        <span class=\"k\">continue</span>\n\n                <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Error while executing `</span><span class=\"si\">{</span><span class=\"n\">cmd</span><span class=\"si\">}</span><span class=\"s2\">`&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">raise</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n        <span class=\"n\">server_started_str</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Uvicorn running on&quot;</span>\n        <span class=\"c1\"># Read and print the server logs until the</span>\n        <span class=\"k\">if</span> <span class=\"n\">screen</span> <span class=\"ow\">or</span> <span class=\"n\">nohup</span><span class=\"p\">:</span>\n            <span class=\"k\">while</span> <span class=\"ow\">not</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">SERVER_LOGFILE</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">():</span>\n                <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">f</span> <span class=\"ow\">or</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">SERVER_LOGFILE</span><span class=\"p\">,</span> <span class=\"s2\">&quot;r&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">start_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n            <span class=\"c1\"># Wait for input for 60 seconds max (for Caddy to download and set up)</span>\n            <span class=\"k\">while</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start_time</span> <span class=\"o\">&lt;</span> <span class=\"mi\">60</span><span class=\"p\">:</span>\n                <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">server_started_str</span> <span class=\"ow\">in</span> <span class=\"n\">line</span><span class=\"p\">:</span>\n                        <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>\n                        <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n                        <span class=\"k\">return</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n    <span class=\"k\">except</span> <span class=\"ne\">FileNotFoundError</span><span class=\"p\">:</span>\n        <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;python3 command was not found. Make sure you have python3 installed.&quot;</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">raise</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\">###############################</span>\n<span class=\"c1\"># Server CLI commands</span>\n<span class=\"c1\">###############################</span>\n\n\n<div class=\"viewcode-block\" id=\"server_start\"><a class=\"viewcode-back\" href=\"../../../api/cli/#runhouse.main.server_start\">[docs]</a><span class=\"nd\">@server_app</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">(</span><span class=\"s2\">&quot;start&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">server_start</span><span class=\"p\">(</span>\n    <span class=\"n\">cluster_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Specify a *saved* remote cluster to start the Runhouse server on that cluster. &quot;</span>\n        <span class=\"s2\">&quot;If not provided, the locally running server will be started.&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">restart_ray</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Restart the Ray runtime&quot;</span><span class=\"p\">),</span>\n    <span class=\"n\">screen</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Start the server in a screen. Only relevant when restarting locally.&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">nohup</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Start the server in a nohup if screen is not available. Only relevant when restarting locally.&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">resync_rh</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Resync the Runhouse package. Only relevant when restarting remotely.&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">host</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Custom server host address. Default is `0.0.0.0`.&quot;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Port for server. If not specified will start on 32300.&quot;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">use_https</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Start an HTTPS server with TLS verification.&quot;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">use_den_auth</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Whether to authenticate requests with a Runhouse token.&quot;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">ssl_keyfile</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Path to custom SSL key file to use for enabling HTTPS.&quot;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">ssl_certfile</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Path to custom SSL cert file to use for enabling HTTPS.&quot;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">restart_proxy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Whether to reinstall server configs on the cluster.&quot;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">use_caddy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Whether to configure Caddy on the cluster as a reverse proxy.&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">domain</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Server domain. Relevant if using Caddy to automate generating CA verified certs.&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">certs_address</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Public IP address of the server. Required for generating self-signed certs and enabling HTTPS.&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">api_server_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s2\">&quot;https://api.run.house&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;URL of Runhouse Den&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">default_env_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Default env to start the server on.&quot;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">conda_env</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Name of conda env corresponding to default env if it is a CondaEnv.&quot;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">from_python</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Whether HTTP server started from inside a Python call rather than CLI.&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Start the HTTP server on the cluster.&quot;&quot;&quot;</span>\n\n    <span class=\"c1\"># If server is already up, ask the user to restart the server instead.</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">cluster_name</span><span class=\"p\">:</span>\n        <span class=\"n\">server_status_cmd</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;runhouse server status&quot;</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span>\n            <span class=\"n\">server_status_cmd</span><span class=\"p\">,</span> <span class=\"n\">shell</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">capture_output</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">returncode</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"s2\">&quot;Server is up&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">:</span>\n            <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Local Runhouse server is already running. To restart it, please &quot;</span>\n                <span class=\"s2\">&quot;run [italic bold]`runhouse server restart` [reset]with the relevant parameters.&quot;</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">raise</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">cluster_name</span><span class=\"p\">:</span>\n        <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">get_cluster_or_local</span><span class=\"p\">(</span><span class=\"n\">cluster_name</span><span class=\"o\">=</span><span class=\"n\">cluster_name</span><span class=\"p\">)</span>\n        <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">start_server</span><span class=\"p\">(</span><span class=\"n\">resync_rh</span><span class=\"o\">=</span><span class=\"n\">resync_rh</span><span class=\"p\">,</span> <span class=\"n\">restart_ray</span><span class=\"o\">=</span><span class=\"n\">restart_ray</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span>\n\n    <span class=\"n\">_start_server</span><span class=\"p\">(</span>\n        <span class=\"n\">restart</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">restart_ray</span><span class=\"o\">=</span><span class=\"n\">restart_ray</span><span class=\"p\">,</span>\n        <span class=\"n\">screen</span><span class=\"o\">=</span><span class=\"n\">screen</span><span class=\"p\">,</span>\n        <span class=\"n\">nohup</span><span class=\"o\">=</span><span class=\"n\">nohup</span><span class=\"p\">,</span>\n        <span class=\"n\">create_logfile</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"n\">host</span><span class=\"p\">,</span>\n        <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"n\">port</span><span class=\"p\">,</span>\n        <span class=\"n\">use_https</span><span class=\"o\">=</span><span class=\"n\">use_https</span><span class=\"p\">,</span>\n        <span class=\"n\">den_auth</span><span class=\"o\">=</span><span class=\"n\">use_den_auth</span><span class=\"p\">,</span>\n        <span class=\"n\">ssl_keyfile</span><span class=\"o\">=</span><span class=\"n\">ssl_keyfile</span><span class=\"p\">,</span>\n        <span class=\"n\">ssl_certfile</span><span class=\"o\">=</span><span class=\"n\">ssl_certfile</span><span class=\"p\">,</span>\n        <span class=\"n\">restart_proxy</span><span class=\"o\">=</span><span class=\"n\">restart_proxy</span><span class=\"p\">,</span>\n        <span class=\"n\">use_caddy</span><span class=\"o\">=</span><span class=\"n\">use_caddy</span><span class=\"p\">,</span>\n        <span class=\"n\">domain</span><span class=\"o\">=</span><span class=\"n\">domain</span><span class=\"p\">,</span>\n        <span class=\"n\">certs_address</span><span class=\"o\">=</span><span class=\"n\">certs_address</span><span class=\"p\">,</span>\n        <span class=\"n\">api_server_url</span><span class=\"o\">=</span><span class=\"n\">api_server_url</span><span class=\"p\">,</span>\n        <span class=\"n\">default_env_name</span><span class=\"o\">=</span><span class=\"n\">default_env_name</span><span class=\"p\">,</span>\n        <span class=\"n\">conda_env</span><span class=\"o\">=</span><span class=\"n\">conda_env</span><span class=\"p\">,</span>\n        <span class=\"n\">from_python</span><span class=\"o\">=</span><span class=\"n\">from_python</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"server_restart\"><a class=\"viewcode-back\" href=\"../../../api/cli/#runhouse.main.server_restart\">[docs]</a><span class=\"nd\">@server_app</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">(</span><span class=\"s2\">&quot;restart&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">server_restart</span><span class=\"p\">(</span>\n    <span class=\"n\">cluster_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Specify a *saved* remote cluster to restart the Runhouse server on that cluster. &quot;</span>\n        <span class=\"s2\">&quot;If not provided, the locally running server will be restarted.&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">restart_ray</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Restart the Ray runtime.&quot;</span><span class=\"p\">),</span>\n    <span class=\"n\">screen</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Start the server in a screen. Only relevant when restarting locally.&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">nohup</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Start the server in a nohup if screen is not available. Only relevant when restarting locally.&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">resync_rh</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Resync the Runhouse package. Only relevant when restarting remotely.&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">host</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Custom server host address. Default is `0.0.0.0`.&quot;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Port for server. If not specified will start on 32300.&quot;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">use_https</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Start an HTTPS server with TLS verification.&quot;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">use_den_auth</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Whether to authenticate requests with a Runhouse token.&quot;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">ssl_keyfile</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Path to custom SSL key file to use for enabling HTTPS.&quot;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">ssl_certfile</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Path to custom SSL cert file to use for enabling HTTPS.&quot;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">restart_proxy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Whether to reinstall server configs on the cluster.&quot;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">use_caddy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Whether to configure Caddy on the cluster as a reverse proxy.&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">domain</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Server domain. Relevant if using Caddy to automate generating CA verified certs.&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">certs_address</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Public IP address of the server. Required for generating self-signed certs and enabling HTTPS.&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">api_server_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s2\">&quot;https://api.run.house&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;URL of Runhouse Den&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">default_env_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Default env to start the server on.&quot;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">conda_env</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Name of conda env corresponding to default env if it is a CondaEnv.&quot;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">from_python</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Whether HTTP server started from inside a Python call rather than CLI.&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Restart the HTTP server on the cluster.&quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">cluster_name</span><span class=\"p\">:</span>\n        <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">get_cluster_or_local</span><span class=\"p\">(</span><span class=\"n\">cluster_name</span><span class=\"o\">=</span><span class=\"n\">cluster_name</span><span class=\"p\">)</span>\n        <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">restart_server</span><span class=\"p\">(</span><span class=\"n\">resync_rh</span><span class=\"o\">=</span><span class=\"n\">resync_rh</span><span class=\"p\">,</span> <span class=\"n\">restart_ray</span><span class=\"o\">=</span><span class=\"n\">restart_ray</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span>\n\n    <span class=\"n\">_start_server</span><span class=\"p\">(</span>\n        <span class=\"n\">restart</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">restart_ray</span><span class=\"o\">=</span><span class=\"n\">restart_ray</span><span class=\"p\">,</span>\n        <span class=\"n\">screen</span><span class=\"o\">=</span><span class=\"n\">screen</span><span class=\"p\">,</span>\n        <span class=\"n\">nohup</span><span class=\"o\">=</span><span class=\"n\">nohup</span><span class=\"p\">,</span>\n        <span class=\"n\">create_logfile</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"n\">host</span><span class=\"p\">,</span>\n        <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"n\">port</span><span class=\"p\">,</span>\n        <span class=\"n\">use_https</span><span class=\"o\">=</span><span class=\"n\">use_https</span><span class=\"p\">,</span>\n        <span class=\"n\">den_auth</span><span class=\"o\">=</span><span class=\"n\">use_den_auth</span><span class=\"p\">,</span>\n        <span class=\"n\">ssl_keyfile</span><span class=\"o\">=</span><span class=\"n\">ssl_keyfile</span><span class=\"p\">,</span>\n        <span class=\"n\">ssl_certfile</span><span class=\"o\">=</span><span class=\"n\">ssl_certfile</span><span class=\"p\">,</span>\n        <span class=\"n\">restart_proxy</span><span class=\"o\">=</span><span class=\"n\">restart_proxy</span><span class=\"p\">,</span>\n        <span class=\"n\">use_caddy</span><span class=\"o\">=</span><span class=\"n\">use_caddy</span><span class=\"p\">,</span>\n        <span class=\"n\">domain</span><span class=\"o\">=</span><span class=\"n\">domain</span><span class=\"p\">,</span>\n        <span class=\"n\">certs_address</span><span class=\"o\">=</span><span class=\"n\">certs_address</span><span class=\"p\">,</span>\n        <span class=\"n\">api_server_url</span><span class=\"o\">=</span><span class=\"n\">api_server_url</span><span class=\"p\">,</span>\n        <span class=\"n\">default_env_name</span><span class=\"o\">=</span><span class=\"n\">default_env_name</span><span class=\"p\">,</span>\n        <span class=\"n\">conda_env</span><span class=\"o\">=</span><span class=\"n\">conda_env</span><span class=\"p\">,</span>\n        <span class=\"n\">from_python</span><span class=\"o\">=</span><span class=\"n\">from_python</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"server_stop\"><a class=\"viewcode-back\" href=\"../../../api/cli/#runhouse.main.server_stop\">[docs]</a><span class=\"nd\">@server_app</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">(</span><span class=\"s2\">&quot;stop&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">server_stop</span><span class=\"p\">(</span>\n    <span class=\"n\">cluster_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Specify a *saved* remote cluster to stop the Runhouse server on that cluster. &quot;</span>\n        <span class=\"s2\">&quot;If not provided, the locally running server will be stopped.&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">stop_ray</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Stop the Ray runtime.&quot;</span><span class=\"p\">),</span>\n    <span class=\"n\">cleanup_actors</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Kill all Ray actors.&quot;</span><span class=\"p\">),</span>\n<span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Stop the HTTP server on the cluster.&quot;&quot;&quot;</span>\n\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">&quot;Stopping the server&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">cluster_name</span><span class=\"p\">:</span>\n        <span class=\"n\">current_cluster</span> <span class=\"o\">=</span> <span class=\"n\">get_cluster_or_local</span><span class=\"p\">(</span><span class=\"n\">cluster_name</span><span class=\"o\">=</span><span class=\"n\">cluster_name</span><span class=\"p\">)</span>\n        <span class=\"n\">current_cluster</span><span class=\"o\">.</span><span class=\"n\">stop_server</span><span class=\"p\">(</span><span class=\"n\">stop_ray</span><span class=\"o\">=</span><span class=\"n\">stop_ray</span><span class=\"p\">,</span> <span class=\"n\">cleanup_actors</span><span class=\"o\">=</span><span class=\"n\">cleanup_actors</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span>\n\n    <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">SERVER_STOP_CMD</span><span class=\"p\">,</span> <span class=\"n\">shell</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">cleanup_actors</span><span class=\"p\">:</span>\n        <span class=\"n\">ray</span><span class=\"o\">.</span><span class=\"n\">init</span><span class=\"p\">(</span>\n            <span class=\"n\">address</span><span class=\"o\">=</span><span class=\"s2\">&quot;auto&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">ignore_reinit_error</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">logging_level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">ERROR</span><span class=\"p\">,</span>\n            <span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s2\">&quot;runhouse&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">kill_actors</span><span class=\"p\">(</span><span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s2\">&quot;runhouse&quot;</span><span class=\"p\">,</span> <span class=\"n\">gracefully</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">stop_ray</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Stopping Ray.&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">RAY_KILL_CMD</span><span class=\"p\">,</span> <span class=\"n\">shell</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"server_status\"><a class=\"viewcode-back\" href=\"../../../api/cli/#runhouse.main.server_status\">[docs]</a><span class=\"nd\">@server_app</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">(</span><span class=\"s2\">&quot;status&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">server_status</span><span class=\"p\">(</span>\n    <span class=\"n\">cluster_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Specify a *saved* remote cluster to check the status of the Runhouse server on that cluster. &quot;</span>\n        <span class=\"s2\">&quot;If not provided, the status of the locally running server will be checked.&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Check the HTTP server status on the cluster.&quot;&quot;&quot;</span>\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">&quot;Checking the server status.&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">current_cluster</span> <span class=\"o\">=</span> <span class=\"n\">get_cluster_or_local</span><span class=\"p\">(</span><span class=\"n\">cluster_name</span><span class=\"o\">=</span><span class=\"n\">cluster_name</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">current_cluster</span><span class=\"o\">.</span><span class=\"n\">_is_server_up</span><span class=\"p\">():</span>\n        <span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">current_cluster</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">()</span>\n        <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;[reset]</span><span class=\"si\">{</span><span class=\"n\">BULLET_UNICODE</span><span class=\"si\">}</span><span class=\"s2\"> server pid: </span><span class=\"si\">{</span><span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;server_pid&#39;</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">print_cluster_config</span><span class=\"p\">(</span>\n            <span class=\"n\">cluster_config</span><span class=\"o\">=</span><span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;cluster_config&quot;</span><span class=\"p\">),</span> <span class=\"n\">status_type</span><span class=\"o\">=</span><span class=\"n\">StatusType</span><span class=\"o\">.</span><span class=\"n\">server</span>\n        <span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;Server is down. To check the status of the cluster, run [italic bold]`runhouse cluster status`&quot;</span>\n        <span class=\"p\">)</span></div>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">callback</span><span class=\"p\">(</span><span class=\"n\">invoke_without_command</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Runhouse CLI&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span>\n    <span class=\"n\">ctx</span><span class=\"p\">:</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Context</span><span class=\"p\">,</span>\n    <span class=\"n\">version</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s2\">&quot;--version&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;-v&quot;</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Show the version and exit.&quot;</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Runhouse CLI</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">version</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">__version__</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">invoked_subcommand</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s2\">&quot;runhouse --help&quot;</span><span class=\"p\">,</span> <span class=\"n\">shell</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre></div>", "current_page_name": "_modules/runhouse/main", "sidebars": ["about.html", "navigation.html", "relations.html", "searchbox.html", "donate.html"], "customsidebar": null, "alabaster_version": "0.7.16", "alabaster_version_info": [0, 7, 16]}