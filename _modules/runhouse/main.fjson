{"parents": [{"link": "../../", "title": "Module code"}], "title": "runhouse.main", "body": "<h1>Source code for runhouse.main</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">copy</span>\n<span class=\"kn\">import</span> <span class=\"nn\">importlib</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">math</span>\n<span class=\"kn\">import</span> <span class=\"nn\">shlex</span>\n<span class=\"kn\">import</span> <span class=\"nn\">subprocess</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">webbrowser</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Optional</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">ray</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">typer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rich.console</span> <span class=\"kn\">import</span> <span class=\"n\">Console</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">runhouse</span> <span class=\"k\">as</span> <span class=\"nn\">rh</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">runhouse.rns.login</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse</span> <span class=\"kn\">import</span> <span class=\"n\">__version__</span><span class=\"p\">,</span> <span class=\"n\">cluster</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">,</span> <span class=\"n\">configs</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.constants</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">BULLET_UNICODE</span><span class=\"p\">,</span>\n    <span class=\"n\">DOUBLE_SPACE_UNICODE</span><span class=\"p\">,</span>\n    <span class=\"n\">RAY_KILL_CMD</span><span class=\"p\">,</span>\n    <span class=\"n\">RAY_START_CMD</span><span class=\"p\">,</span>\n    <span class=\"n\">SERVER_LOGFILE</span><span class=\"p\">,</span>\n    <span class=\"n\">SERVER_START_CMD</span><span class=\"p\">,</span>\n    <span class=\"n\">SERVER_STOP_CMD</span><span class=\"p\">,</span>\n    <span class=\"n\">START_NOHUP_CMD</span><span class=\"p\">,</span>\n    <span class=\"n\">START_SCREEN_CMD</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.globals</span> <span class=\"kn\">import</span> <span class=\"n\">obj_store</span><span class=\"p\">,</span> <span class=\"n\">rns_client</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.hardware.ray_utils</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">check_for_existing_ray_instance</span><span class=\"p\">,</span>\n    <span class=\"n\">kill_actors</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># create an explicit Typer application</span>\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Typer</span><span class=\"p\">(</span><span class=\"n\">add_completion</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># For printing with typer</span>\n<span class=\"n\">console</span> <span class=\"o\">=</span> <span class=\"n\">Console</span><span class=\"p\">()</span>\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"login\"><a class=\"viewcode-back\" href=\"../../../api/cli/#runhouse.main.login\">[docs]</a><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">login</span><span class=\"p\">(</span>\n    <span class=\"n\">token</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Argument</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Your Runhouse API token&quot;</span><span class=\"p\">),</span>\n    <span class=\"n\">yes</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s2\">&quot;--yes&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;-y&quot;</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Sets any confirmations to &#39;yes&#39; automatically.&quot;</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Login to Runhouse. Validates token provided, with options to upload or download stored secrets or config between</span>\n<span class=\"sd\">    local environment and Runhouse / Vault.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">valid_token</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"n\">runhouse</span><span class=\"o\">.</span><span class=\"n\">rns</span><span class=\"o\">.</span><span class=\"n\">login</span><span class=\"o\">.</span><span class=\"n\">login</span><span class=\"p\">(</span>\n            <span class=\"n\">token</span><span class=\"o\">=</span><span class=\"n\">token</span><span class=\"p\">,</span>\n            <span class=\"n\">download_config</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">upload_config</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">download_secrets</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">upload_secrets</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">from_cli</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">yes</span>\n        <span class=\"k\">else</span> <span class=\"n\">runhouse</span><span class=\"o\">.</span><span class=\"n\">rns</span><span class=\"o\">.</span><span class=\"n\">login</span><span class=\"o\">.</span><span class=\"n\">login</span><span class=\"p\">(</span>\n            <span class=\"n\">token</span><span class=\"o\">=</span><span class=\"n\">token</span><span class=\"p\">,</span> <span class=\"n\">interactive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">ret_token</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">from_cli</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">valid_token</span><span class=\"p\">:</span>\n        <span class=\"n\">webbrowser</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">configs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;dashboard_url&#39;</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">/dashboard?token=</span><span class=\"si\">{</span><span class=\"n\">valid_token</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">raise</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Exit</span><span class=\"p\">()</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Exit</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"logout\"><a class=\"viewcode-back\" href=\"../../../api/cli/#runhouse.main.logout\">[docs]</a><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">logout</span><span class=\"p\">():</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Logout of Runhouse. Provides options to delete locally configured secrets and local Runhouse configs&quot;&quot;&quot;</span>\n    <span class=\"n\">runhouse</span><span class=\"o\">.</span><span class=\"n\">rns</span><span class=\"o\">.</span><span class=\"n\">login</span><span class=\"o\">.</span><span class=\"n\">logout</span><span class=\"p\">(</span><span class=\"n\">interactive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"k\">raise</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Exit</span><span class=\"p\">()</span></div>\n\n\n<div class=\"viewcode-block\" id=\"notebook\"><a class=\"viewcode-back\" href=\"../../../api/cli/#runhouse.main.notebook\">[docs]</a><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">notebook</span><span class=\"p\">(</span>\n    <span class=\"n\">cluster_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">up</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Start the cluster&quot;</span><span class=\"p\">)</span>\n<span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Open a Jupyter notebook on a cluster.&quot;&quot;&quot;</span>\n    <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">cluster</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">cluster_name</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">up</span><span class=\"p\">:</span>\n        <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">up_if_not</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">is_up</span><span class=\"p\">():</span>\n        <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span>\n            <span class=\"sa\">f</span><span class=\"s2\">&quot;Cluster </span><span class=\"si\">{</span><span class=\"n\">cluster_name</span><span class=\"si\">}</span><span class=\"s2\"> is not up. Please run `runhouse notebook </span><span class=\"si\">{</span><span class=\"n\">cluster_name</span><span class=\"si\">}</span><span class=\"s2\"> --up` to bring &quot;</span>\n            <span class=\"sa\">f</span><span class=\"s2\">&quot;it up if it is an on-demand cluster.&quot;</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">raise</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">notebook</span><span class=\"p\">()</span></div>\n\n\n<div class=\"viewcode-block\" id=\"ssh\"><a class=\"viewcode-back\" href=\"../../../api/cli/#runhouse.main.ssh\">[docs]</a><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">ssh</span><span class=\"p\">(</span><span class=\"n\">cluster_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">up</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Start the cluster&quot;</span><span class=\"p\">)):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;SSH into a cluster created elsewhere (so `ssh cluster` doesn&#39;t work out of the box) or not yet up.&quot;&quot;&quot;</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">cluster</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">cluster_name</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n            <span class=\"sa\">f</span><span class=\"s2\">&quot;Could not load cluster called </span><span class=\"si\">{</span><span class=\"n\">cluster_name</span><span class=\"si\">}</span><span class=\"s2\"> from Den. Please save it to Den, and rerun.&quot;</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">raise</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">is_shared</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">up</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">up_if_not</span><span class=\"p\">()</span>\n            <span class=\"k\">except</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">:</span>\n                <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;Cluster </span><span class=\"si\">{</span><span class=\"n\">cluster_name</span><span class=\"si\">}</span><span class=\"s2\"> is not an on-demand cluster, so it can&#39;t be brought up automatically.&quot;</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;Please start it manually and re-save the cluster with the new connection info in Python.&quot;</span>\n                <span class=\"p\">)</span>\n                <span class=\"k\">raise</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"ow\">not</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">is_up</span><span class=\"p\">():</span>\n            <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;Cluster </span><span class=\"si\">{</span><span class=\"n\">cluster_name</span><span class=\"si\">}</span><span class=\"s2\"> is not up. Please run `runhouse ssh </span><span class=\"si\">{</span><span class=\"n\">cluster_name</span><span class=\"si\">}</span><span class=\"s2\"> --up`.&quot;</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">raise</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">ssh</span><span class=\"p\">()</span></div>\n\n\n<span class=\"c1\">###############################</span>\n<span class=\"c1\"># Status helping functions</span>\n<span class=\"c1\">###############################</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_adjust_resource_type</span><span class=\"p\">(</span><span class=\"n\">resource_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    status helping function. transforms a str form runhouse.resources.{X.Y...}.resource_type to runhouse.resource_type</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">resource_type</span> <span class=\"o\">=</span> <span class=\"n\">resource_type</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;.&quot;</span><span class=\"p\">)[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">importlib</span><span class=\"o\">.</span><span class=\"n\">import_module</span><span class=\"p\">(</span><span class=\"s2\">&quot;runhouse&quot;</span><span class=\"p\">),</span> <span class=\"n\">resource_type</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;runhouse.</span><span class=\"si\">{</span><span class=\"n\">resource_type</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n    <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">resource_type</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_resource_name_to_rns</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    If possible, transform the resource name to a rns address.</span>\n<span class=\"sd\">    If not, return the name as is (it is the key in the object store).</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">resource_config</span> <span class=\"o\">=</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">load_config</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">resource_config</span> <span class=\"ow\">and</span> <span class=\"n\">resource_config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;resource_type&quot;</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;env&quot;</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">resource_config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">name</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_print_cluster_config</span><span class=\"p\">(</span><span class=\"n\">cluster_config</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Helping function to the `_print_status` which prints the relevant info from the cluster config.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># TODO [SB]: need to modify printing format (colour palette etc).</span>\n\n    <span class=\"n\">top_level_config</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"s2\">&quot;server_port&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;den_auth&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;server_connection_type&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"n\">backend_config</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"s2\">&quot;resource_subtype&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;use_local_telemetry&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;domain&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;server_host&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;ips&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;resource_subtype&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">cluster_config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;resource_subtype&quot;</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;Cluster&quot;</span><span class=\"p\">:</span>\n        <span class=\"n\">backend_config</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;autostop_mins&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">cluster_config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;default_env&quot;</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span>\n        <span class=\"n\">cluster_config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;default_env&quot;</span><span class=\"p\">),</span> <span class=\"n\">Dict</span>\n    <span class=\"p\">):</span>\n        <span class=\"n\">cluster_config</span><span class=\"p\">[</span><span class=\"s2\">&quot;default_env&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">cluster_config</span><span class=\"p\">[</span><span class=\"s2\">&quot;default_env&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">]</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">top_level_config</span><span class=\"p\">:</span>\n        <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span>\n            <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">BULLET_UNICODE</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">{</span><span class=\"n\">key</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;_&#39;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s1\">&#39; &#39;</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">: </span><span class=\"si\">{</span><span class=\"n\">cluster_config</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">BULLET_UNICODE</span><span class=\"si\">}</span><span class=\"s2\"> backend config:&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">backend_config</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">key</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;autostop_mins&quot;</span> <span class=\"ow\">and</span> <span class=\"n\">cluster_config</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">DOUBLE_SPACE_UNICODE</span><span class=\"si\">}{</span><span class=\"n\">BULLET_UNICODE</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">{</span><span class=\"n\">key</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;_&#39;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s1\">&#39; &#39;</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">: autostop disabled&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">DOUBLE_SPACE_UNICODE</span><span class=\"si\">}{</span><span class=\"n\">BULLET_UNICODE</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">{</span><span class=\"n\">key</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;_&#39;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s1\">&#39; &#39;</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">: </span><span class=\"si\">{</span><span class=\"n\">cluster_config</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n            <span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_print_envs_info</span><span class=\"p\">(</span>\n    <span class=\"n\">env_resource_mapping</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">env_servlet_processes</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">current_cluster</span><span class=\"p\">:</span> <span class=\"n\">Cluster</span>\n<span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Prints info about the envs in the current_cluster.</span>\n<span class=\"sd\">    Prints the resources in each env, and the CPU and GPU usage of the env (if exists).</span>\n\n<span class=\"sd\">    :param env_resource_mapping: Dict of envs in each cluster, and the resources associated with them.</span>\n<span class=\"sd\">    :param env_servlet_processes: Dict of cpu and gpu info of the envs.</span>\n<span class=\"sd\">    :param current_cluster: The cluster whose status we are printing.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># Print headline</span>\n    <span class=\"n\">envs_in_cluster_headline</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Serving \ud83c\udf66 :&quot;</span>\n    <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">envs_in_cluster_headline</span><span class=\"p\">,</span> <span class=\"n\">style</span><span class=\"o\">=</span><span class=\"s2\">&quot;bold&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">env_resource_mapping</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;This cluster has no environment nor resources.&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"n\">first_envs_to_print</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"c1\"># First: if the default env does not have resources, print it.</span>\n    <span class=\"n\">default_env_name</span> <span class=\"o\">=</span> <span class=\"n\">current_cluster</span><span class=\"o\">.</span><span class=\"n\">default_env</span><span class=\"o\">.</span><span class=\"n\">name</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">env_resource_mapping</span><span class=\"p\">[</span><span class=\"n\">default_env_name</span><span class=\"p\">])</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n        <span class=\"c1\"># case where the default env doesn&#39;t hve any other resources, apart from the default env itself.</span>\n        <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span>\n            <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">BULLET_UNICODE</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">{</span><span class=\"n\">default_env_name</span><span class=\"si\">}</span><span class=\"s2\"> (runhouse.Env)&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">style</span><span class=\"o\">=</span><span class=\"s2\">&quot;italic bold&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span>\n            <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">DOUBLE_SPACE_UNICODE</span><span class=\"si\">}</span><span class=\"s2\">This environment has only python packages installed, if such provided. No &quot;</span>\n            <span class=\"s2\">&quot;resources were found.&quot;</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"c1\"># case where the default env have other resources. We make sure that our of all the envs which have resources,</span>\n        <span class=\"c1\"># the default_env will be printed first.</span>\n        <span class=\"n\">first_envs_to_print</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">default_env_name</span><span class=\"p\">]</span>\n\n    <span class=\"c1\"># Make sure to print envs with no resources first.</span>\n    <span class=\"c1\"># (the only resource they have is a runhouse.env, which is the env itself).</span>\n    <span class=\"n\">first_envs_to_print</span> <span class=\"o\">=</span> <span class=\"n\">first_envs_to_print</span> <span class=\"o\">+</span> <span class=\"p\">[</span>\n        <span class=\"n\">env_name</span>\n        <span class=\"k\">for</span> <span class=\"n\">env_name</span> <span class=\"ow\">in</span> <span class=\"n\">env_resource_mapping</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">env_resource_mapping</span><span class=\"p\">[</span><span class=\"n\">env_name</span><span class=\"p\">])</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span>\n            <span class=\"ow\">and</span> <span class=\"n\">env_name</span> <span class=\"o\">!=</span> <span class=\"n\">default_env_name</span>\n            <span class=\"ow\">and</span> <span class=\"n\">env_resource_mapping</span><span class=\"p\">[</span><span class=\"n\">env_name</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"c1\"># Now, print the envs.</span>\n    <span class=\"c1\"># If the env have packages installed, that means that it contains an env resource. In that case:</span>\n    <span class=\"c1\"># * If the env contains only itself, we will print that the env contains only the installed packages.</span>\n    <span class=\"c1\"># * Else, we will print the resources (rh.function, th.module) associated with the env.</span>\n\n    <span class=\"n\">envs_to_print</span> <span class=\"o\">=</span> <span class=\"n\">first_envs_to_print</span> <span class=\"o\">+</span> <span class=\"p\">[</span>\n        <span class=\"n\">env_name</span>\n        <span class=\"k\">for</span> <span class=\"n\">env_name</span> <span class=\"ow\">in</span> <span class=\"n\">env_resource_mapping</span>\n        <span class=\"k\">if</span> <span class=\"n\">env_name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">first_envs_to_print</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"n\">default_env_name</span><span class=\"p\">]</span>\n        <span class=\"ow\">and</span> <span class=\"n\">env_resource_mapping</span><span class=\"p\">[</span><span class=\"n\">env_name</span><span class=\"p\">]</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">env_name</span> <span class=\"ow\">in</span> <span class=\"n\">envs_to_print</span><span class=\"p\">:</span>\n        <span class=\"n\">resources_in_env</span> <span class=\"o\">=</span> <span class=\"n\">env_resource_mapping</span><span class=\"p\">[</span><span class=\"n\">env_name</span><span class=\"p\">]</span>\n        <span class=\"n\">env_process_info</span> <span class=\"o\">=</span> <span class=\"n\">env_servlet_processes</span><span class=\"p\">[</span><span class=\"n\">env_name</span><span class=\"p\">]</span>\n        <span class=\"n\">current_env</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">resource</span> <span class=\"k\">for</span> <span class=\"n\">resource</span> <span class=\"ow\">in</span> <span class=\"n\">resources_in_env</span> <span class=\"k\">if</span> <span class=\"n\">resource</span><span class=\"p\">[</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">env_name</span>\n        <span class=\"p\">]</span>\n\n        <span class=\"c1\"># sometimes the env itself is not a resource (key) inside the env&#39;s servlet.</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">current_env</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">env_name_print</span> <span class=\"o\">=</span> <span class=\"n\">_resource_name_to_rns</span><span class=\"p\">(</span><span class=\"n\">env_name</span><span class=\"p\">)</span>\n            <span class=\"n\">env_type</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;runhouse.Env&quot;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">current_env</span> <span class=\"o\">=</span> <span class=\"n\">current_env</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">env_name_print</span> <span class=\"o\">=</span> <span class=\"n\">_resource_name_to_rns</span><span class=\"p\">(</span><span class=\"n\">current_env</span><span class=\"p\">[</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">])</span>\n            <span class=\"n\">env_type</span> <span class=\"o\">=</span> <span class=\"n\">_adjust_resource_type</span><span class=\"p\">(</span><span class=\"n\">current_env</span><span class=\"p\">[</span><span class=\"s2\">&quot;resource_type&quot;</span><span class=\"p\">])</span>\n\n        <span class=\"n\">env_name_txt</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">BULLET_UNICODE</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">{</span><span class=\"n\">env_name_print</span><span class=\"si\">}</span><span class=\"s2\"> (</span><span class=\"si\">{</span><span class=\"n\">env_type</span><span class=\"si\">}</span><span class=\"s2\">) | pid: </span><span class=\"si\">{</span><span class=\"n\">env_process_info</span><span class=\"p\">[</span><span class=\"s1\">&#39;pid&#39;</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\"> | node: </span><span class=\"si\">{</span><span class=\"n\">env_process_info</span><span class=\"p\">[</span><span class=\"s1\">&#39;node_name&#39;</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n        <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">env_name_txt</span><span class=\"p\">,</span> <span class=\"n\">style</span><span class=\"o\">=</span><span class=\"s2\">&quot;italic bold&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Print CPU info</span>\n        <span class=\"n\">env_cpu_info</span> <span class=\"o\">=</span> <span class=\"n\">env_process_info</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;env_memory_usage&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">env_cpu_info</span><span class=\"p\">:</span>\n\n            <span class=\"c1\"># convert bytes to GB</span>\n            <span class=\"n\">memory_usage_gb</span> <span class=\"o\">=</span> <span class=\"nb\">round</span><span class=\"p\">(</span>\n                <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">env_cpu_info</span><span class=\"p\">[</span><span class=\"s2\">&quot;memory_size_bytes&quot;</span><span class=\"p\">])</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"o\">**</span><span class=\"mi\">3</span><span class=\"p\">),</span>\n                <span class=\"mi\">2</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">total_cluster_memory</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">ceil</span><span class=\"p\">(</span>\n                <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">env_cpu_info</span><span class=\"p\">[</span><span class=\"s2\">&quot;total_cluster_memory&quot;</span><span class=\"p\">])</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"o\">**</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">cpu_memory_usage_percent</span> <span class=\"o\">=</span> <span class=\"nb\">round</span><span class=\"p\">(</span>\n                <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">env_cpu_info</span><span class=\"p\">[</span><span class=\"s2\">&quot;memory_percent_from_cluster&quot;</span><span class=\"p\">]),</span>\n                <span class=\"mi\">2</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">cpu_usage_percent</span> <span class=\"o\">=</span> <span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">env_cpu_info</span><span class=\"p\">[</span><span class=\"s2\">&quot;cpu_usage_percent&quot;</span><span class=\"p\">]),</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n            <span class=\"n\">cpu_usage_summery</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">DOUBLE_SPACE_UNICODE</span><span class=\"si\">}</span><span class=\"s2\">CPU: </span><span class=\"si\">{</span><span class=\"n\">cpu_usage_percent</span><span class=\"si\">}</span><span class=\"s2\">% | Memory: </span><span class=\"si\">{</span><span class=\"n\">memory_usage_gb</span><span class=\"si\">}</span><span class=\"s2\"> / </span><span class=\"si\">{</span><span class=\"n\">total_cluster_memory</span><span class=\"si\">}</span><span class=\"s2\"> Gb (</span><span class=\"si\">{</span><span class=\"n\">cpu_memory_usage_percent</span><span class=\"si\">}</span><span class=\"s2\">%)&quot;</span>\n\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">cpu_usage_summery</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">DOUBLE_SPACE_UNICODE</span><span class=\"si\">}</span><span class=\"s2\">CPU: This process did not use CPU memory.&quot;</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">cpu_usage_summery</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Print GPU info</span>\n        <span class=\"n\">env_gpu_info</span> <span class=\"o\">=</span> <span class=\"n\">env_process_info</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;env_gpu_usage&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># sometimes the cluster has no GPU, therefore the env_gpu_info is an empty dictionary.</span>\n        <span class=\"k\">if</span> <span class=\"n\">env_gpu_info</span><span class=\"p\">:</span>\n            <span class=\"c1\"># get the gpu usage info, and convert it to GB.</span>\n            <span class=\"n\">total_gpu_memory</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">ceil</span><span class=\"p\">(</span>\n                <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">env_gpu_info</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;total_gpu_memory&quot;</span><span class=\"p\">))</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"o\">**</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">gpu_util_percent</span> <span class=\"o\">=</span> <span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">env_gpu_info</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;gpu_util_percent&quot;</span><span class=\"p\">)),</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n            <span class=\"n\">used_gpu_memory</span> <span class=\"o\">=</span> <span class=\"nb\">round</span><span class=\"p\">(</span>\n                <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">env_gpu_info</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;used_gpu_memory&quot;</span><span class=\"p\">))</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"o\">**</span><span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"mi\">2</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">gpu_memory_usage_percent</span> <span class=\"o\">=</span> <span class=\"nb\">round</span><span class=\"p\">(</span>\n                <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">used_gpu_memory</span> <span class=\"o\">/</span> <span class=\"n\">total_gpu_memory</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">2</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">gpu_usage_summery</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">DOUBLE_SPACE_UNICODE</span><span class=\"si\">}</span><span class=\"s2\">GPU: </span><span class=\"si\">{</span><span class=\"n\">gpu_util_percent</span><span class=\"si\">}</span><span class=\"s2\">% | Memory: </span><span class=\"si\">{</span><span class=\"n\">used_gpu_memory</span><span class=\"si\">}</span><span class=\"s2\"> / </span><span class=\"si\">{</span><span class=\"n\">total_gpu_memory</span><span class=\"si\">}</span><span class=\"s2\"> Gb (</span><span class=\"si\">{</span><span class=\"n\">gpu_memory_usage_percent</span><span class=\"si\">}</span><span class=\"s2\">%)&quot;</span>\n            <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">gpu_usage_summery</span><span class=\"p\">)</span>\n\n        <span class=\"n\">resources_in_env</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">resource</span> <span class=\"k\">for</span> <span class=\"n\">resource</span> <span class=\"ow\">in</span> <span class=\"n\">resources_in_env</span> <span class=\"k\">if</span> <span class=\"n\">resource</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">current_env</span>\n        <span class=\"p\">]</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">resources_in_env</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"c1\"># No resources were found in the env, only the associated installed python reqs were installed.</span>\n            <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">DOUBLE_SPACE_UNICODE</span><span class=\"si\">}</span><span class=\"s2\">This environment has only python packages installed, if such provided. No resources were &quot;</span>\n                <span class=\"s2\">&quot;found.&quot;</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">resource</span> <span class=\"ow\">in</span> <span class=\"n\">resources_in_env</span><span class=\"p\">:</span>\n                <span class=\"n\">resource_name</span> <span class=\"o\">=</span> <span class=\"n\">_resource_name_to_rns</span><span class=\"p\">(</span><span class=\"n\">resource</span><span class=\"p\">[</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">])</span>\n                <span class=\"n\">resource_type</span> <span class=\"o\">=</span> <span class=\"n\">_adjust_resource_type</span><span class=\"p\">(</span><span class=\"n\">resource</span><span class=\"p\">[</span><span class=\"s2\">&quot;resource_type&quot;</span><span class=\"p\">])</span>\n                <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">DOUBLE_SPACE_UNICODE</span><span class=\"si\">}{</span><span class=\"n\">BULLET_UNICODE</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">{</span><span class=\"n\">resource_name</span><span class=\"si\">}</span><span class=\"s2\"> (</span><span class=\"si\">{</span><span class=\"n\">resource_type</span><span class=\"si\">}</span><span class=\"s2\">)&quot;</span>\n                <span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_print_status</span><span class=\"p\">(</span><span class=\"n\">status_data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">current_cluster</span><span class=\"p\">:</span> <span class=\"n\">Cluster</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Prints the status of the cluster to the console</span>\n<span class=\"sd\">    :param config: cluster&#39;s  config</span>\n<span class=\"sd\">    :return: cluster&#39;s  config</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">cluster_config</span> <span class=\"o\">=</span> <span class=\"n\">status_data</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;cluster_config&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">env_resource_mapping</span> <span class=\"o\">=</span> <span class=\"n\">status_data</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;env_resource_mapping&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">env_servlet_processes</span> <span class=\"o\">=</span> <span class=\"n\">status_data</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;env_servlet_processes&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"s2\">&quot;name&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">cluster_config</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">():</span>\n        <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">cluster_config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># print headline</span>\n    <span class=\"n\">daemon_headline_txt</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"s2\">&quot;</span><span class=\"se\">\\N{smiling face with horns}</span><span class=\"s2\"> Runhouse Daemon is running </span><span class=\"se\">\\N{Runner}</span><span class=\"s2\">&quot;</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">daemon_headline_txt</span><span class=\"p\">,</span> <span class=\"n\">style</span><span class=\"o\">=</span><span class=\"s2\">&quot;bold royal_blue1&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">&#39;Runhouse v</span><span class=\"si\">{</span><span class=\"n\">status_data</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;runhouse_version&quot;</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">&#39;server pid: </span><span class=\"si\">{</span><span class=\"n\">status_data</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;server_pid&quot;</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Print relevant info from cluster config.</span>\n    <span class=\"n\">_print_cluster_config</span><span class=\"p\">(</span><span class=\"n\">cluster_config</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># print the environments in the cluster, and the resources associated with each environment.</span>\n    <span class=\"n\">_print_envs_info</span><span class=\"p\">(</span><span class=\"n\">env_resource_mapping</span><span class=\"p\">,</span> <span class=\"n\">env_servlet_processes</span><span class=\"p\">,</span> <span class=\"n\">current_cluster</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">status_data</span>\n\n\n<div class=\"viewcode-block\" id=\"status\"><a class=\"viewcode-back\" href=\"../../../api/cli/#runhouse.main.status\">[docs]</a><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">status</span><span class=\"p\">(</span>\n    <span class=\"n\">cluster_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Argument</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Name of cluster to check. If not specified will check the local cluster.&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Load the status of the Runhouse daemon running on a cluster.&quot;&quot;&quot;</span>\n\n    <span class=\"n\">cluster_or_local</span> <span class=\"o\">=</span> <span class=\"n\">rh</span><span class=\"o\">.</span><span class=\"n\">here</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">cluster_name</span><span class=\"p\">:</span>\n        <span class=\"n\">current_cluster</span> <span class=\"o\">=</span> <span class=\"n\">cluster</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">cluster_name</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">current_cluster</span><span class=\"o\">.</span><span class=\"n\">is_up</span><span class=\"p\">():</span>\n            <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;Cluster </span><span class=\"si\">{</span><span class=\"n\">cluster_name</span><span class=\"si\">}</span><span class=\"s2\"> is not up. If it&#39;s an on-demand cluster, you can run &quot;</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;`runhouse ssh --up </span><span class=\"si\">{</span><span class=\"n\">cluster_name</span><span class=\"si\">}</span><span class=\"s2\">` to bring it up automatically.&quot;</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">raise</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">current_cluster</span><span class=\"o\">.</span><span class=\"n\">check_server</span><span class=\"p\">(</span><span class=\"n\">restart_server</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">exceptions</span><span class=\"o\">.</span><span class=\"n\">ConnectionError</span><span class=\"p\">:</span>\n            <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;Could not connect to the server on cluster </span><span class=\"si\">{</span><span class=\"n\">cluster_name</span><span class=\"si\">}</span><span class=\"s2\">. Check that the server is up with &quot;</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;`runhouse ssh </span><span class=\"si\">{</span><span class=\"n\">cluster_name</span><span class=\"si\">}</span><span class=\"s2\">` or `sky status -r` for on-demand clusters.&quot;</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">raise</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">cluster_or_local</span> <span class=\"ow\">or</span> <span class=\"n\">cluster_or_local</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;file&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;</span><span class=\"se\">\\N{smiling face with horns}</span><span class=\"s2\"> Runhouse Daemon is not running... </span><span class=\"se\">\\N{No Entry}</span><span class=\"s2\"> </span><span class=\"se\">\\N{Runner}</span><span class=\"s2\">. &quot;</span>\n                <span class=\"s2\">&quot;Start it with `runhouse restart` or specify a remote &quot;</span>\n                <span class=\"s2\">&quot;cluster to poll with `runhouse status &lt;cluster_name&gt;`.&quot;</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">raise</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># case we are inside the cluster</span>\n    <span class=\"k\">if</span> <span class=\"n\">cluster_or_local</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;file&quot;</span><span class=\"p\">:</span>\n        <span class=\"c1\"># If we are on the cluster load status directly from the object store</span>\n        <span class=\"n\">cluster_status</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">())</span>\n        <span class=\"n\">cluster_config</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">cluster_status</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;cluster_config&quot;</span><span class=\"p\">))</span>\n        <span class=\"n\">current_cluster</span><span class=\"p\">:</span> <span class=\"n\">Cluster</span> <span class=\"o\">=</span> <span class=\"n\">Cluster</span><span class=\"o\">.</span><span class=\"n\">from_config</span><span class=\"p\">(</span><span class=\"n\">cluster_config</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">_print_status</span><span class=\"p\">(</span><span class=\"n\">cluster_status</span><span class=\"p\">,</span> <span class=\"n\">current_cluster</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">cluster_name</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"c1\"># If running outside the cluster must specify a cluster name</span>\n        <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Missing argument `cluster_name`.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">current_cluster</span><span class=\"p\">:</span> <span class=\"n\">Cluster</span> <span class=\"o\">=</span> <span class=\"n\">Cluster</span><span class=\"o\">.</span><span class=\"n\">from_name</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">cluster_name</span><span class=\"p\">)</span>\n        <span class=\"n\">cluster_status</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"n\">current_cluster</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">(</span>\n            <span class=\"n\">resource_address</span><span class=\"o\">=</span><span class=\"n\">current_cluster</span><span class=\"o\">.</span><span class=\"n\">rns_address</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n        <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Failed to load status for cluster.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span>\n    <span class=\"k\">except</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">exceptions</span><span class=\"o\">.</span><span class=\"n\">ConnectionError</span><span class=\"p\">:</span>\n        <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;</span><span class=\"se\">\\N{smiling face with horns}</span><span class=\"s2\"> Runhouse Daemon is not running... </span><span class=\"se\">\\N{No Entry}</span><span class=\"s2\"> </span><span class=\"se\">\\N{Runner}</span><span class=\"s2\">&quot;</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span>\n    <span class=\"k\">return</span> <span class=\"n\">_print_status</span><span class=\"p\">(</span><span class=\"n\">cluster_status</span><span class=\"p\">,</span> <span class=\"n\">current_cluster</span><span class=\"p\">)</span></div>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">load_cluster</span><span class=\"p\">(</span><span class=\"n\">cluster_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Load a cluster from RNS into the local environment, e.g. to be able to ssh.&quot;&quot;&quot;</span>\n    <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">cluster</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">cluster_name</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"p\">:</span>\n        <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">_update_from_sky_status</span><span class=\"p\">(</span><span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_check_if_command_exists</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n    <span class=\"n\">cmd_check</span> <span class=\"o\">=</span> <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span>\n        <span class=\"sa\">f</span><span class=\"s2\">&quot;command -v </span><span class=\"si\">{</span><span class=\"n\">cmd</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">shell</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">stdout</span><span class=\"o\">=</span><span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">PIPE</span><span class=\"p\">,</span> <span class=\"n\">stderr</span><span class=\"o\">=</span><span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">PIPE</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">available</span> <span class=\"o\">=</span> <span class=\"n\">cmd_check</span><span class=\"o\">.</span><span class=\"n\">returncode</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">available</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">cmd</span><span class=\"si\">}</span><span class=\"s2\"> is not available on the system.&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">available</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_get_wrapped_server_start_cmd</span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">screen</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">nohup</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">screen</span><span class=\"p\">:</span>\n        <span class=\"n\">wrapped_cmd</span> <span class=\"o\">=</span> <span class=\"n\">START_SCREEN_CMD</span>\n    <span class=\"k\">elif</span> <span class=\"n\">nohup</span><span class=\"p\">:</span>\n        <span class=\"n\">wrapped_cmd</span> <span class=\"o\">=</span> <span class=\"n\">START_NOHUP_CMD</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">wrapped_cmd</span> <span class=\"o\">=</span> <span class=\"n\">SERVER_START_CMD</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">flags</span><span class=\"p\">:</span>\n        <span class=\"n\">flags_str</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"p\">)</span>\n        <span class=\"n\">wrapped_cmd</span> <span class=\"o\">=</span> <span class=\"n\">wrapped_cmd</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span>\n            <span class=\"n\">SERVER_START_CMD</span><span class=\"p\">,</span> <span class=\"n\">SERVER_START_CMD</span> <span class=\"o\">+</span> <span class=\"n\">flags_str</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">wrapped_cmd</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_start_server</span><span class=\"p\">(</span>\n    <span class=\"n\">restart</span><span class=\"p\">,</span>\n    <span class=\"n\">restart_ray</span><span class=\"p\">,</span>\n    <span class=\"n\">screen</span><span class=\"p\">,</span>\n    <span class=\"n\">nohup</span><span class=\"p\">,</span>\n    <span class=\"n\">create_logfile</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">use_https</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">den_auth</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">ssl_keyfile</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">ssl_certfile</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">restart_proxy</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">use_caddy</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">domain</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">certs_address</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">use_local_telemetry</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">api_server_url</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">default_env_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">conda_env</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">from_python</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n<span class=\"p\">):</span>\n    <span class=\"c1\">############################################</span>\n    <span class=\"c1\"># Build CLI commands to start the server</span>\n    <span class=\"c1\">############################################</span>\n    <span class=\"n\">cmds</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">if</span> <span class=\"n\">restart</span><span class=\"p\">:</span>\n        <span class=\"n\">cmds</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">SERVER_STOP_CMD</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># We have to `ray start` not within screen/nohup</span>\n    <span class=\"n\">existing_ray_instance</span> <span class=\"o\">=</span> <span class=\"n\">check_for_existing_ray_instance</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">existing_ray_instance</span> <span class=\"ow\">or</span> <span class=\"n\">restart_ray</span><span class=\"p\">:</span>\n        <span class=\"n\">cmds</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">RAY_KILL_CMD</span><span class=\"p\">)</span>\n        <span class=\"n\">cmds</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">RAY_START_CMD</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Collect flags</span>\n    <span class=\"n\">flags</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"n\">den_auth_flag</span> <span class=\"o\">=</span> <span class=\"s2\">&quot; --use-den-auth&quot;</span> <span class=\"k\">if</span> <span class=\"n\">den_auth</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">den_auth_flag</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Starting server with Den auth.&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">den_auth_flag</span><span class=\"p\">)</span>\n\n    <span class=\"n\">restart_proxy_flag</span> <span class=\"o\">=</span> <span class=\"s2\">&quot; --restart-proxy&quot;</span> <span class=\"k\">if</span> <span class=\"n\">restart_proxy</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">restart_proxy_flag</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Reinstalling server configs.&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">restart_proxy_flag</span><span class=\"p\">)</span>\n\n    <span class=\"n\">use_caddy_flag</span> <span class=\"o\">=</span> <span class=\"s2\">&quot; --use-caddy&quot;</span> <span class=\"k\">if</span> <span class=\"n\">use_caddy</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">use_caddy_flag</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Configuring Caddy on the cluster.&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">use_caddy_flag</span><span class=\"p\">)</span>\n\n    <span class=\"n\">ssl_keyfile_flag</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot; --ssl-keyfile </span><span class=\"si\">{</span><span class=\"n\">ssl_keyfile</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span> <span class=\"k\">if</span> <span class=\"n\">ssl_keyfile</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">ssl_keyfile_flag</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Using SSL keyfile in path: </span><span class=\"si\">{</span><span class=\"n\">ssl_keyfile</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ssl_keyfile_flag</span><span class=\"p\">)</span>\n\n    <span class=\"n\">ssl_certfile_flag</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot; --ssl-certfile </span><span class=\"si\">{</span><span class=\"n\">ssl_certfile</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span> <span class=\"k\">if</span> <span class=\"n\">ssl_certfile</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">ssl_certfile_flag</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Using SSL certfile in path: </span><span class=\"si\">{</span><span class=\"n\">ssl_certfile</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ssl_certfile_flag</span><span class=\"p\">)</span>\n\n    <span class=\"n\">domain</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot; --domain </span><span class=\"si\">{</span><span class=\"n\">domain</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span> <span class=\"k\">if</span> <span class=\"n\">domain</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">domain</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Using domain: </span><span class=\"si\">{</span><span class=\"n\">domain</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">domain</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Use HTTPS if explicitly specified or if SSL cert or keyfile path are provided</span>\n    <span class=\"n\">https_flag</span> <span class=\"o\">=</span> <span class=\"s2\">&quot; --use-https&quot;</span> <span class=\"k\">if</span> <span class=\"n\">use_https</span> <span class=\"ow\">or</span> <span class=\"p\">(</span><span class=\"n\">ssl_keyfile</span> <span class=\"ow\">or</span> <span class=\"n\">ssl_certfile</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">https_flag</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Starting server with HTTPS.&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">https_flag</span><span class=\"p\">)</span>\n\n    <span class=\"n\">host_flag</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot; --host </span><span class=\"si\">{</span><span class=\"n\">host</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span> <span class=\"k\">if</span> <span class=\"n\">host</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">host_flag</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Using host: </span><span class=\"si\">{</span><span class=\"n\">host</span><span class=\"si\">}</span><span class=\"s2\">.&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">host_flag</span><span class=\"p\">)</span>\n\n    <span class=\"n\">port_flag</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot; --port </span><span class=\"si\">{</span><span class=\"n\">port</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span> <span class=\"k\">if</span> <span class=\"n\">port</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">port_flag</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Using port: </span><span class=\"si\">{</span><span class=\"n\">port</span><span class=\"si\">}</span><span class=\"s2\">.&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">port_flag</span><span class=\"p\">)</span>\n\n    <span class=\"n\">address_flag</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot; --certs-address </span><span class=\"si\">{</span><span class=\"n\">certs_address</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span> <span class=\"k\">if</span> <span class=\"n\">certs_address</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">address_flag</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Server public IP address: </span><span class=\"si\">{</span><span class=\"n\">certs_address</span><span class=\"si\">}</span><span class=\"s2\">.&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">address_flag</span><span class=\"p\">)</span>\n\n    <span class=\"n\">use_local_telemetry_flag</span> <span class=\"o\">=</span> <span class=\"s2\">&quot; --use-local-telemetry&quot;</span> <span class=\"k\">if</span> <span class=\"n\">use_local_telemetry</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">use_local_telemetry_flag</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Configuring local telemetry on the cluster.&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">use_local_telemetry_flag</span><span class=\"p\">)</span>\n\n    <span class=\"n\">api_server_url_flag</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"sa\">f</span><span class=\"s2\">&quot; --api-server-url </span><span class=\"si\">{</span><span class=\"n\">api_server_url</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span> <span class=\"k\">if</span> <span class=\"n\">api_server_url</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">api_server_url_flag</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Setting api_server url to </span><span class=\"si\">{</span><span class=\"n\">api_server_url</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">api_server_url_flag</span><span class=\"p\">)</span>\n\n    <span class=\"n\">default_env_flag</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"sa\">f</span><span class=\"s2\">&quot; --default-env-name </span><span class=\"si\">{</span><span class=\"n\">default_env_name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span> <span class=\"k\">if</span> <span class=\"n\">default_env_name</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">default_env_flag</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Starting server in default env named: </span><span class=\"si\">{</span><span class=\"n\">default_env_name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">default_env_flag</span><span class=\"p\">)</span>\n\n    <span class=\"n\">conda_env_flag</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot; --conda-env </span><span class=\"si\">{</span><span class=\"n\">conda_env</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span> <span class=\"k\">if</span> <span class=\"n\">conda_env</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">default_env_flag</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Creating runtime env for conda env: </span><span class=\"si\">{</span><span class=\"n\">conda_env</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">conda_env_flag</span><span class=\"p\">)</span>\n\n    <span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot; --from-python&quot;</span> <span class=\"k\">if</span> <span class=\"n\">from_python</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Check if screen or nohup are available</span>\n    <span class=\"n\">screen</span> <span class=\"o\">=</span> <span class=\"n\">screen</span> <span class=\"ow\">and</span> <span class=\"n\">_check_if_command_exists</span><span class=\"p\">(</span><span class=\"s2\">&quot;screen&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">nohup</span> <span class=\"o\">=</span> <span class=\"ow\">not</span> <span class=\"n\">screen</span> <span class=\"ow\">and</span> <span class=\"n\">nohup</span> <span class=\"ow\">and</span> <span class=\"n\">_check_if_command_exists</span><span class=\"p\">(</span><span class=\"s2\">&quot;nohup&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Create logfile if we are using backgrounding</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">screen</span> <span class=\"ow\">or</span> <span class=\"n\">nohup</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">create_logfile</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">SERVER_LOGFILE</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">():</span>\n        <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">SERVER_LOGFILE</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">mkdir</span><span class=\"p\">(</span><span class=\"n\">parents</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">exist_ok</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">SERVER_LOGFILE</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">touch</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Add flags to the server start command</span>\n    <span class=\"n\">cmds</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">_get_wrapped_server_start_cmd</span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"p\">,</span> <span class=\"n\">screen</span><span class=\"p\">,</span> <span class=\"n\">nohup</span><span class=\"p\">))</span>\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Starting API server using the following command: </span><span class=\"si\">{</span><span class=\"n\">cmds</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">.&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Open and read the lines of the server logfile so we only print the most recent lines after starting</span>\n        <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"n\">screen</span> <span class=\"ow\">and</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">SERVER_LOGFILE</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">():</span>\n            <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">SERVER_LOGFILE</span><span class=\"p\">,</span> <span class=\"s2\">&quot;r&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">readlines</span><span class=\"p\">()</span>  <span class=\"c1\"># Discard these, they&#39;re from the previous times the server was started</span>\n\n        <span class=\"c1\"># We do these one by one so it&#39;s more obvious where the error is if there is one</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">cmd</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">cmds</span><span class=\"p\">):</span>\n            <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Executing `</span><span class=\"si\">{</span><span class=\"n\">cmd</span><span class=\"si\">}</span><span class=\"s2\">`&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span>\n                <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cmds</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n            <span class=\"p\">):</span>  <span class=\"c1\"># last cmd is not being parsed correctly when ran with shlex.split</span>\n                <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"p\">,</span> <span class=\"n\">shell</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">check</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">shlex</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"p\">),</span> <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"c1\"># We don&#39;t want to raise an error if the server kill fails, as it may simply not be running</span>\n            <span class=\"k\">if</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">returncode</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"s2\">&quot;pkill&quot;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">cmd</span><span class=\"p\">:</span>\n                <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Error while executing `</span><span class=\"si\">{</span><span class=\"n\">cmd</span><span class=\"si\">}</span><span class=\"s2\">`&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">raise</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n        <span class=\"n\">server_started_str</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Uvicorn running on&quot;</span>\n        <span class=\"c1\"># Read and print the server logs until the</span>\n        <span class=\"k\">if</span> <span class=\"n\">screen</span><span class=\"p\">:</span>\n            <span class=\"k\">while</span> <span class=\"ow\">not</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">SERVER_LOGFILE</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">():</span>\n                <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">f</span> <span class=\"ow\">or</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">SERVER_LOGFILE</span><span class=\"p\">,</span> <span class=\"s2\">&quot;r&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">start_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n            <span class=\"c1\"># Wait for input for 60 seconds max (for Caddy to download and set up)</span>\n            <span class=\"k\">while</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start_time</span> <span class=\"o\">&lt;</span> <span class=\"mi\">60</span><span class=\"p\">:</span>\n                <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">server_started_str</span> <span class=\"ow\">in</span> <span class=\"n\">line</span><span class=\"p\">:</span>\n                        <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>\n                        <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n                        <span class=\"k\">return</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n    <span class=\"k\">except</span> <span class=\"ne\">FileNotFoundError</span><span class=\"p\">:</span>\n        <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;python3 command was not found. Make sure you have python3 installed.&quot;</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">raise</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"start\"><a class=\"viewcode-back\" href=\"../../../api/cli/#runhouse.main.start\">[docs]</a><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">start</span><span class=\"p\">(</span>\n    <span class=\"n\">restart_ray</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Restart the Ray runtime&quot;</span><span class=\"p\">),</span>\n    <span class=\"n\">screen</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Start the server in a screen&quot;</span><span class=\"p\">),</span>\n    <span class=\"n\">nohup</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Start the server in a nohup if screen is not available&quot;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">host</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Custom server host address. Default is `0.0.0.0`.&quot;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Port for server. If not specified will start on 32300&quot;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">use_https</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Start an HTTPS server with TLS verification&quot;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">use_den_auth</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Whether to authenticate requests with a Runhouse token&quot;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">use_caddy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Whether to configure Caddy on the cluster as a reverse proxy.&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">domain</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Server domain. Relevant if using Caddy to automate generating CA verified certs.&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">certs_address</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Public IP address of the server. Required for generating self-signed certs and enabling HTTPS&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">use_local_telemetry</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Whether to use local telemetry&quot;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">default_env_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Default env to start the server on.&quot;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">conda_env</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Name of conda env corresponding to default env if it is a CondaEnv.&quot;</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Start the HTTP or HTTPS server on the cluster.&quot;&quot;&quot;</span>\n    <span class=\"n\">_start_server</span><span class=\"p\">(</span>\n        <span class=\"n\">restart</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">restart_ray</span><span class=\"o\">=</span><span class=\"n\">restart_ray</span><span class=\"p\">,</span>\n        <span class=\"n\">screen</span><span class=\"o\">=</span><span class=\"n\">screen</span><span class=\"p\">,</span>\n        <span class=\"n\">nohup</span><span class=\"o\">=</span><span class=\"n\">nohup</span><span class=\"p\">,</span>\n        <span class=\"n\">create_logfile</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"n\">host</span><span class=\"p\">,</span>\n        <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"n\">port</span><span class=\"p\">,</span>\n        <span class=\"n\">use_https</span><span class=\"o\">=</span><span class=\"n\">use_https</span><span class=\"p\">,</span>\n        <span class=\"n\">den_auth</span><span class=\"o\">=</span><span class=\"n\">use_den_auth</span><span class=\"p\">,</span>\n        <span class=\"n\">use_caddy</span><span class=\"o\">=</span><span class=\"n\">use_caddy</span><span class=\"p\">,</span>\n        <span class=\"n\">domain</span><span class=\"o\">=</span><span class=\"n\">domain</span><span class=\"p\">,</span>\n        <span class=\"n\">certs_address</span><span class=\"o\">=</span><span class=\"n\">certs_address</span><span class=\"p\">,</span>\n        <span class=\"n\">use_local_telemetry</span><span class=\"o\">=</span><span class=\"n\">use_local_telemetry</span><span class=\"p\">,</span>\n        <span class=\"n\">default_env_name</span><span class=\"o\">=</span><span class=\"n\">default_env_name</span><span class=\"p\">,</span>\n        <span class=\"n\">conda_env</span><span class=\"o\">=</span><span class=\"n\">conda_env</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"restart\"><a class=\"viewcode-back\" href=\"../../../api/cli/#runhouse.main.restart\">[docs]</a><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">restart</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;A *saved* remote cluster object to restart.&quot;</span><span class=\"p\">),</span>\n    <span class=\"n\">restart_ray</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Restart the Ray runtime&quot;</span><span class=\"p\">),</span>\n    <span class=\"n\">screen</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Start the server in a screen. Only relevant when restarting locally.&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">nohup</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Start the server in a nohup if screen is not available. Only relevant when restarting locally.&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">resync_rh</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Resync the Runhouse package. Only relevant when restarting remotely.&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">host</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Custom server host address. Default is `0.0.0.0`.&quot;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Port for server. If not specified will start on 32300&quot;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">use_https</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Start an HTTPS server with TLS verification&quot;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">use_den_auth</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Whether to authenticate requests with a Runhouse token&quot;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">ssl_keyfile</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Path to custom SSL key file to use for enabling HTTPS&quot;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">ssl_certfile</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Path to custom SSL cert file to use for enabling HTTPS&quot;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">restart_proxy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Whether to reinstall server configs on the cluster&quot;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">use_caddy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Whether to configure Caddy on the cluster as a reverse proxy.&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">domain</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Server domain. Relevant if using Caddy to automate generating CA verified certs.&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">certs_address</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Public IP address of the server. Required for generating self-signed certs and enabling HTTPS&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">use_local_telemetry</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Whether to use local telemetry&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">api_server_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s2\">&quot;https://api.run.house&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;URL of Runhouse Den&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">default_env_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Default env to start the server on.&quot;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">conda_env</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Name of conda env corresponding to default env if it is a CondaEnv.&quot;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">from_python</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Whether HTTP server started from inside a Python call rather than CLI.&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Restart the HTTP server on the cluster.&quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n        <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">cluster</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">restart_server</span><span class=\"p\">(</span><span class=\"n\">resync_rh</span><span class=\"o\">=</span><span class=\"n\">resync_rh</span><span class=\"p\">,</span> <span class=\"n\">restart_ray</span><span class=\"o\">=</span><span class=\"n\">restart_ray</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span>\n\n    <span class=\"n\">_start_server</span><span class=\"p\">(</span>\n        <span class=\"n\">restart</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">restart_ray</span><span class=\"o\">=</span><span class=\"n\">restart_ray</span><span class=\"p\">,</span>\n        <span class=\"n\">screen</span><span class=\"o\">=</span><span class=\"n\">screen</span><span class=\"p\">,</span>\n        <span class=\"n\">nohup</span><span class=\"o\">=</span><span class=\"n\">nohup</span><span class=\"p\">,</span>\n        <span class=\"n\">create_logfile</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"n\">host</span><span class=\"p\">,</span>\n        <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"n\">port</span><span class=\"p\">,</span>\n        <span class=\"n\">use_https</span><span class=\"o\">=</span><span class=\"n\">use_https</span><span class=\"p\">,</span>\n        <span class=\"n\">den_auth</span><span class=\"o\">=</span><span class=\"n\">use_den_auth</span><span class=\"p\">,</span>\n        <span class=\"n\">ssl_keyfile</span><span class=\"o\">=</span><span class=\"n\">ssl_keyfile</span><span class=\"p\">,</span>\n        <span class=\"n\">ssl_certfile</span><span class=\"o\">=</span><span class=\"n\">ssl_certfile</span><span class=\"p\">,</span>\n        <span class=\"n\">restart_proxy</span><span class=\"o\">=</span><span class=\"n\">restart_proxy</span><span class=\"p\">,</span>\n        <span class=\"n\">use_caddy</span><span class=\"o\">=</span><span class=\"n\">use_caddy</span><span class=\"p\">,</span>\n        <span class=\"n\">domain</span><span class=\"o\">=</span><span class=\"n\">domain</span><span class=\"p\">,</span>\n        <span class=\"n\">certs_address</span><span class=\"o\">=</span><span class=\"n\">certs_address</span><span class=\"p\">,</span>\n        <span class=\"n\">use_local_telemetry</span><span class=\"o\">=</span><span class=\"n\">use_local_telemetry</span><span class=\"p\">,</span>\n        <span class=\"n\">api_server_url</span><span class=\"o\">=</span><span class=\"n\">api_server_url</span><span class=\"p\">,</span>\n        <span class=\"n\">default_env_name</span><span class=\"o\">=</span><span class=\"n\">default_env_name</span><span class=\"p\">,</span>\n        <span class=\"n\">conda_env</span><span class=\"o\">=</span><span class=\"n\">conda_env</span><span class=\"p\">,</span>\n        <span class=\"n\">from_python</span><span class=\"o\">=</span><span class=\"n\">from_python</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span></div>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">stop</span><span class=\"p\">(</span>\n    <span class=\"n\">stop_ray</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Stop the Ray runtime&quot;</span><span class=\"p\">),</span>\n    <span class=\"n\">cleanup_actors</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Kill all Ray actors&quot;</span><span class=\"p\">),</span>\n<span class=\"p\">):</span>\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Stopping the server.&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">SERVER_STOP_CMD</span><span class=\"p\">,</span> <span class=\"n\">shell</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">cleanup_actors</span><span class=\"p\">:</span>\n        <span class=\"n\">ray</span><span class=\"o\">.</span><span class=\"n\">init</span><span class=\"p\">(</span>\n            <span class=\"n\">address</span><span class=\"o\">=</span><span class=\"s2\">&quot;auto&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">ignore_reinit_error</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">logging_level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">ERROR</span><span class=\"p\">,</span>\n            <span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s2\">&quot;runhouse&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">kill_actors</span><span class=\"p\">(</span><span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s2\">&quot;runhouse&quot;</span><span class=\"p\">,</span> <span class=\"n\">gracefully</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">stop_ray</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Stopping Ray.&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">RAY_KILL_CMD</span><span class=\"p\">,</span> <span class=\"n\">shell</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">callback</span><span class=\"p\">(</span><span class=\"n\">invoke_without_command</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Runhouse CLI&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span>\n    <span class=\"n\">ctx</span><span class=\"p\">:</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Context</span><span class=\"p\">,</span>\n    <span class=\"n\">version</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s2\">&quot;--version&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;-v&quot;</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Show the version and exit.&quot;</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Runhouse CLI</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">version</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">__version__</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">invoked_subcommand</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s2\">&quot;runhouse --help&quot;</span><span class=\"p\">,</span> <span class=\"n\">shell</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre></div>", "current_page_name": "_modules/runhouse/main", "sidebars": ["about.html", "navigation.html", "relations.html", "searchbox.html", "donate.html"], "customsidebar": null, "alabaster_version": "0.7.16", "alabaster_version_info": [0, 7, 16]}