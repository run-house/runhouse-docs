{"parents": [{"link": "../../", "title": "Module code"}], "title": "runhouse.main", "body": "<h1>Source code for runhouse.main</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">shlex</span>\n<span class=\"kn\">import</span> <span class=\"nn\">subprocess</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">webbrowser</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Optional</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">typer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rich.console</span> <span class=\"kn\">import</span> <span class=\"n\">Console</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">runhouse.rns.login</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse</span> <span class=\"kn\">import</span> <span class=\"n\">__version__</span><span class=\"p\">,</span> <span class=\"n\">cluster</span><span class=\"p\">,</span> <span class=\"n\">configs</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.constants</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">SERVER_LOGFILE</span><span class=\"p\">,</span>\n    <span class=\"n\">SERVER_START_CMD</span><span class=\"p\">,</span>\n    <span class=\"n\">SERVER_STOP_CMD</span><span class=\"p\">,</span>\n    <span class=\"n\">START_NOHUP_CMD</span><span class=\"p\">,</span>\n    <span class=\"n\">START_SCREEN_CMD</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># create an explicit Typer application</span>\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Typer</span><span class=\"p\">(</span><span class=\"n\">add_completion</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;verbose&quot;</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># For printing with typer</span>\n<span class=\"n\">console</span> <span class=\"o\">=</span> <span class=\"n\">Console</span><span class=\"p\">()</span>\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"login\"><a class=\"viewcode-back\" href=\"../../../api/cli/#runhouse.main.login\">[docs]</a><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">login</span><span class=\"p\">(</span>\n    <span class=\"n\">token</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Argument</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Your Runhouse API token&quot;</span><span class=\"p\">),</span>\n    <span class=\"n\">yes</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s2\">&quot;--yes&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;-y&quot;</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Sets any confirmations to &#39;yes&#39; automatically.&quot;</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Login to Runhouse. Validates token provided, with options to upload or download stored secrets or config between</span>\n<span class=\"sd\">    local environment and Runhouse / Vault.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">valid_token</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"n\">runhouse</span><span class=\"o\">.</span><span class=\"n\">rns</span><span class=\"o\">.</span><span class=\"n\">login</span><span class=\"o\">.</span><span class=\"n\">login</span><span class=\"p\">(</span>\n            <span class=\"n\">token</span><span class=\"o\">=</span><span class=\"n\">token</span><span class=\"p\">,</span>\n            <span class=\"n\">download_config</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">upload_config</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">download_secrets</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">upload_secrets</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">from_cli</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">yes</span>\n        <span class=\"k\">else</span> <span class=\"n\">runhouse</span><span class=\"o\">.</span><span class=\"n\">rns</span><span class=\"o\">.</span><span class=\"n\">login</span><span class=\"o\">.</span><span class=\"n\">login</span><span class=\"p\">(</span>\n            <span class=\"n\">token</span><span class=\"o\">=</span><span class=\"n\">token</span><span class=\"p\">,</span> <span class=\"n\">interactive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">ret_token</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">from_cli</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">valid_token</span><span class=\"p\">:</span>\n        <span class=\"n\">webbrowser</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">configs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;dashboard_url&#39;</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">/dashboard?token=</span><span class=\"si\">{</span><span class=\"n\">valid_token</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">raise</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Exit</span><span class=\"p\">()</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Exit</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"logout\"><a class=\"viewcode-back\" href=\"../../../api/cli/#runhouse.main.logout\">[docs]</a><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">logout</span><span class=\"p\">():</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Logout of Runhouse. Provides options to delete locally configured secrets and local Runhouse configs&quot;&quot;&quot;</span>\n    <span class=\"n\">runhouse</span><span class=\"o\">.</span><span class=\"n\">rns</span><span class=\"o\">.</span><span class=\"n\">login</span><span class=\"o\">.</span><span class=\"n\">logout</span><span class=\"p\">(</span><span class=\"n\">interactive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"k\">raise</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Exit</span><span class=\"p\">()</span></div>\n\n\n<div class=\"viewcode-block\" id=\"notebook\"><a class=\"viewcode-back\" href=\"../../../api/cli/#runhouse.main.notebook\">[docs]</a><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">notebook</span><span class=\"p\">(</span>\n    <span class=\"n\">cluster_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">up</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Start the cluster&quot;</span><span class=\"p\">)</span>\n<span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Open a Jupyter notebook on a cluster.&quot;&quot;&quot;</span>\n    <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">cluster</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">cluster_name</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">up</span><span class=\"p\">:</span>\n        <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">up_if_not</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">is_up</span><span class=\"p\">():</span>\n        <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span>\n            <span class=\"sa\">f</span><span class=\"s2\">&quot;Cluster </span><span class=\"si\">{</span><span class=\"n\">cluster_name</span><span class=\"si\">}</span><span class=\"s2\"> is not up. Please run `runhouse notebook </span><span class=\"si\">{</span><span class=\"n\">cluster_name</span><span class=\"si\">}</span><span class=\"s2\"> --up`.&quot;</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">raise</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">notebook</span><span class=\"p\">()</span></div>\n\n\n<div class=\"viewcode-block\" id=\"ssh\"><a class=\"viewcode-back\" href=\"../../../api/cli/#runhouse.main.ssh\">[docs]</a><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">ssh</span><span class=\"p\">(</span><span class=\"n\">cluster_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">up</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Start the cluster&quot;</span><span class=\"p\">)):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;SSH into a cluster created elsewhere (so `ssh cluster` doesn&#39;t work out of the box) or not yet up.&quot;&quot;&quot;</span>\n    <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">cluster</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">cluster_name</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">up</span><span class=\"p\">:</span>\n        <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">up_if_not</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">is_up</span><span class=\"p\">():</span>\n        <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span>\n            <span class=\"sa\">f</span><span class=\"s2\">&quot;Cluster </span><span class=\"si\">{</span><span class=\"n\">cluster_name</span><span class=\"si\">}</span><span class=\"s2\"> is not up. Please run `runhouse ssh </span><span class=\"si\">{</span><span class=\"n\">cluster_name</span><span class=\"si\">}</span><span class=\"s2\"> --up`.&quot;</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">raise</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">ssh</span><span class=\"p\">()</span></div>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">load_cluster</span><span class=\"p\">(</span><span class=\"n\">cluster_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Load a cluster from RNS into the local environment, e.g. to be able to ssh.&quot;&quot;&quot;</span>\n    <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">cluster</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">cluster_name</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"p\">:</span>\n        <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">_update_from_sky_status</span><span class=\"p\">(</span><span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_check_if_command_exists</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n    <span class=\"n\">cmd_check</span> <span class=\"o\">=</span> <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span>\n        <span class=\"sa\">f</span><span class=\"s2\">&quot;command -v </span><span class=\"si\">{</span><span class=\"n\">cmd</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">shell</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">stdout</span><span class=\"o\">=</span><span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">PIPE</span><span class=\"p\">,</span> <span class=\"n\">stderr</span><span class=\"o\">=</span><span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">PIPE</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">available</span> <span class=\"o\">=</span> <span class=\"n\">cmd_check</span><span class=\"o\">.</span><span class=\"n\">returncode</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">available</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">cmd</span><span class=\"si\">}</span><span class=\"s2\"> is not available on the system.&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">available</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_get_wrapped_server_start_cmd</span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">screen</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">nohup</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">screen</span><span class=\"p\">:</span>\n        <span class=\"n\">wrapped_cmd</span> <span class=\"o\">=</span> <span class=\"n\">START_SCREEN_CMD</span>\n    <span class=\"k\">elif</span> <span class=\"n\">nohup</span><span class=\"p\">:</span>\n        <span class=\"n\">wrapped_cmd</span> <span class=\"o\">=</span> <span class=\"n\">START_NOHUP_CMD</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">wrapped_cmd</span> <span class=\"o\">=</span> <span class=\"n\">SERVER_START_CMD</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">flags</span><span class=\"p\">:</span>\n        <span class=\"n\">flags_str</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"p\">)</span>\n        <span class=\"n\">wrapped_cmd</span> <span class=\"o\">=</span> <span class=\"n\">wrapped_cmd</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span>\n            <span class=\"n\">SERVER_START_CMD</span><span class=\"p\">,</span> <span class=\"n\">SERVER_START_CMD</span> <span class=\"o\">+</span> <span class=\"n\">flags_str</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">wrapped_cmd</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_start_server</span><span class=\"p\">(</span>\n    <span class=\"n\">restart</span><span class=\"p\">,</span>\n    <span class=\"n\">restart_ray</span><span class=\"p\">,</span>\n    <span class=\"n\">screen</span><span class=\"p\">,</span>\n    <span class=\"n\">nohup</span><span class=\"p\">,</span>\n    <span class=\"n\">create_logfile</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">use_https</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">den_auth</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">ssl_keyfile</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">ssl_certfile</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">restart_proxy</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">use_nginx</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">certs_address</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">use_local_telemetry</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n<span class=\"p\">):</span>\n\n    <span class=\"c1\">############################################</span>\n    <span class=\"c1\"># Build CLI commands to start the server</span>\n    <span class=\"c1\">############################################</span>\n    <span class=\"n\">cmds</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">if</span> <span class=\"n\">restart</span><span class=\"p\">:</span>\n        <span class=\"n\">cmds</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">SERVER_STOP_CMD</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Collect flags</span>\n    <span class=\"n\">flags</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">restart_ray_flag</span> <span class=\"o\">=</span> <span class=\"s2\">&quot; --restart-ray&quot;</span> <span class=\"k\">if</span> <span class=\"n\">restart_ray</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">restart_ray_flag</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Restarting a Ray instance on the remote machine.&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">restart_ray_flag</span><span class=\"p\">)</span>\n\n    <span class=\"n\">den_auth_flag</span> <span class=\"o\">=</span> <span class=\"s2\">&quot; --use-den-auth&quot;</span> <span class=\"k\">if</span> <span class=\"n\">den_auth</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">den_auth_flag</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Starting server with Den auth.&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">den_auth_flag</span><span class=\"p\">)</span>\n\n    <span class=\"n\">restart_proxy_flag</span> <span class=\"o\">=</span> <span class=\"s2\">&quot; --restart-proxy&quot;</span> <span class=\"k\">if</span> <span class=\"n\">restart_proxy</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">restart_proxy_flag</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Reinstalling Nginx and server configs.&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">restart_proxy_flag</span><span class=\"p\">)</span>\n\n    <span class=\"n\">use_nginx_flag</span> <span class=\"o\">=</span> <span class=\"s2\">&quot; --use-nginx&quot;</span> <span class=\"k\">if</span> <span class=\"n\">use_nginx</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">use_nginx_flag</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Configuring Nginx on the cluster.&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">use_nginx_flag</span><span class=\"p\">)</span>\n\n    <span class=\"n\">ssl_keyfile_flag</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot; --ssl-keyfile </span><span class=\"si\">{</span><span class=\"n\">ssl_keyfile</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span> <span class=\"k\">if</span> <span class=\"n\">ssl_keyfile</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">ssl_keyfile_flag</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Using SSL keyfile in path: </span><span class=\"si\">{</span><span class=\"n\">ssl_keyfile</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ssl_keyfile_flag</span><span class=\"p\">)</span>\n\n    <span class=\"n\">ssl_certfile_flag</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot; --ssl-certfile </span><span class=\"si\">{</span><span class=\"n\">ssl_certfile</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span> <span class=\"k\">if</span> <span class=\"n\">ssl_certfile</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">ssl_certfile_flag</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Using SSL certfile in path: </span><span class=\"si\">{</span><span class=\"n\">ssl_certfile</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ssl_certfile_flag</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Use HTTPS if explicitly specified or if SSL cert or keyfile path are provided</span>\n    <span class=\"n\">https_flag</span> <span class=\"o\">=</span> <span class=\"s2\">&quot; --use-https&quot;</span> <span class=\"k\">if</span> <span class=\"n\">use_https</span> <span class=\"ow\">or</span> <span class=\"p\">(</span><span class=\"n\">ssl_keyfile</span> <span class=\"ow\">or</span> <span class=\"n\">ssl_certfile</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">https_flag</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Starting server with HTTPS.&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">https_flag</span><span class=\"p\">)</span>\n\n    <span class=\"n\">host_flag</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot; --host </span><span class=\"si\">{</span><span class=\"n\">host</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span> <span class=\"k\">if</span> <span class=\"n\">host</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">host_flag</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Using host: </span><span class=\"si\">{</span><span class=\"n\">host</span><span class=\"si\">}</span><span class=\"s2\">.&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">host_flag</span><span class=\"p\">)</span>\n\n    <span class=\"n\">port_flag</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot; --port </span><span class=\"si\">{</span><span class=\"n\">port</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span> <span class=\"k\">if</span> <span class=\"n\">port</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">port_flag</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Using port: </span><span class=\"si\">{</span><span class=\"n\">port</span><span class=\"si\">}</span><span class=\"s2\">.&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">port_flag</span><span class=\"p\">)</span>\n\n    <span class=\"n\">address_flag</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot; --certs-address </span><span class=\"si\">{</span><span class=\"n\">certs_address</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span> <span class=\"k\">if</span> <span class=\"n\">certs_address</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">address_flag</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Server public IP address: </span><span class=\"si\">{</span><span class=\"n\">certs_address</span><span class=\"si\">}</span><span class=\"s2\">.&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">address_flag</span><span class=\"p\">)</span>\n\n    <span class=\"n\">use_local_telemetry_flag</span> <span class=\"o\">=</span> <span class=\"s2\">&quot; --use-local-telemetry&quot;</span> <span class=\"k\">if</span> <span class=\"n\">use_local_telemetry</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">use_local_telemetry_flag</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Configuring local telemetry on the cluster.&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">use_local_telemetry_flag</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Check if screen or nohup are available</span>\n    <span class=\"n\">screen</span> <span class=\"o\">=</span> <span class=\"n\">screen</span> <span class=\"ow\">and</span> <span class=\"n\">_check_if_command_exists</span><span class=\"p\">(</span><span class=\"s2\">&quot;screen&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">nohup</span> <span class=\"o\">=</span> <span class=\"ow\">not</span> <span class=\"n\">screen</span> <span class=\"ow\">and</span> <span class=\"n\">nohup</span> <span class=\"ow\">and</span> <span class=\"n\">_check_if_command_exists</span><span class=\"p\">(</span><span class=\"s2\">&quot;nohup&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Create logfile if we are using backgrounding</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">screen</span> <span class=\"ow\">or</span> <span class=\"n\">nohup</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">create_logfile</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">SERVER_LOGFILE</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">():</span>\n        <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">SERVER_LOGFILE</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">mkdir</span><span class=\"p\">(</span><span class=\"n\">parents</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">exist_ok</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">SERVER_LOGFILE</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">touch</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Add flags to the server start command</span>\n    <span class=\"n\">cmds</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">_get_wrapped_server_start_cmd</span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"p\">,</span> <span class=\"n\">screen</span><span class=\"p\">,</span> <span class=\"n\">nohup</span><span class=\"p\">))</span>\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Starting API server using the following command: </span><span class=\"si\">{</span><span class=\"n\">cmds</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">.&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Open and read the lines of the server logfile so we only print the most recent lines after starting</span>\n        <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"n\">screen</span> <span class=\"ow\">and</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">SERVER_LOGFILE</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">():</span>\n            <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">SERVER_LOGFILE</span><span class=\"p\">,</span> <span class=\"s2\">&quot;r&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">readlines</span><span class=\"p\">()</span>  <span class=\"c1\"># Discard these, they&#39;re from the previous times the server was started</span>\n\n        <span class=\"c1\"># We do these one by one so it&#39;s more obvious where the error is if there is one</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">cmd</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">cmds</span><span class=\"p\">):</span>\n            <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Executing `</span><span class=\"si\">{</span><span class=\"n\">cmd</span><span class=\"si\">}</span><span class=\"s2\">`&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span>\n                <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cmds</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n            <span class=\"p\">):</span>  <span class=\"c1\"># last cmd is not being parsed correctly when ran with shlex.split</span>\n                <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"p\">,</span> <span class=\"n\">shell</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">check</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">shlex</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"p\">),</span> <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"c1\"># We don&#39;t want to raise an error if the server kill fails, as it may simply not be running</span>\n            <span class=\"k\">if</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">returncode</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"s2\">&quot;pkill&quot;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">cmd</span><span class=\"p\">:</span>\n                <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Error while executing `</span><span class=\"si\">{</span><span class=\"n\">cmd</span><span class=\"si\">}</span><span class=\"s2\">`&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">raise</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n        <span class=\"n\">server_started_str</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Uvicorn running on&quot;</span>\n        <span class=\"c1\"># Read and print the server logs until the</span>\n        <span class=\"k\">if</span> <span class=\"n\">screen</span><span class=\"p\">:</span>\n            <span class=\"k\">while</span> <span class=\"ow\">not</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">SERVER_LOGFILE</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">():</span>\n                <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">f</span> <span class=\"ow\">or</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">SERVER_LOGFILE</span><span class=\"p\">,</span> <span class=\"s2\">&quot;r&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">start_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n            <span class=\"c1\"># Wait for input for 60 seconds max (for nginx to download and set up)</span>\n            <span class=\"k\">while</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start_time</span> <span class=\"o\">&lt;</span> <span class=\"mi\">60</span><span class=\"p\">:</span>\n                <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">server_started_str</span> <span class=\"ow\">in</span> <span class=\"n\">line</span><span class=\"p\">:</span>\n                        <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>\n                        <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n                        <span class=\"k\">return</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n    <span class=\"k\">except</span> <span class=\"ne\">FileNotFoundError</span><span class=\"p\">:</span>\n        <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;python3 command was not found. Make sure you have python3 installed.&quot;</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">raise</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"start\"><a class=\"viewcode-back\" href=\"../../../api/cli/#runhouse.main.start\">[docs]</a><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">start</span><span class=\"p\">(</span>\n    <span class=\"n\">restart_ray</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Restart the Ray runtime&quot;</span><span class=\"p\">),</span>\n    <span class=\"n\">screen</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Start the server in a screen&quot;</span><span class=\"p\">),</span>\n    <span class=\"n\">nohup</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Start the server in a nohup if screen is not available&quot;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">host</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Custom server host address. Default is `0.0.0.0`.&quot;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Port for server. If not specified will start on 32300&quot;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">use_https</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Start an HTTPS server with TLS verification&quot;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">use_den_auth</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Whether to authenticate requests with a Runhouse token&quot;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">use_nginx</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Whether to configure Nginx on the cluster as a reverse proxy. By default will not install &quot;</span>\n        <span class=\"s2\">&quot;and configure Nginx.&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">certs_address</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Public IP address of the server. Required for generating self-signed certs and enabling HTTPS&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">use_local_telemetry</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Whether to use local telemetry&quot;</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Start the HTTP or HTTPS server on the cluster.&quot;&quot;&quot;</span>\n    <span class=\"n\">_start_server</span><span class=\"p\">(</span>\n        <span class=\"n\">restart</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">restart_ray</span><span class=\"o\">=</span><span class=\"n\">restart_ray</span><span class=\"p\">,</span>\n        <span class=\"n\">screen</span><span class=\"o\">=</span><span class=\"n\">screen</span><span class=\"p\">,</span>\n        <span class=\"n\">nohup</span><span class=\"o\">=</span><span class=\"n\">nohup</span><span class=\"p\">,</span>\n        <span class=\"n\">create_logfile</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"n\">host</span><span class=\"p\">,</span>\n        <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"n\">port</span><span class=\"p\">,</span>\n        <span class=\"n\">use_https</span><span class=\"o\">=</span><span class=\"n\">use_https</span><span class=\"p\">,</span>\n        <span class=\"n\">den_auth</span><span class=\"o\">=</span><span class=\"n\">use_den_auth</span><span class=\"p\">,</span>\n        <span class=\"n\">use_nginx</span><span class=\"o\">=</span><span class=\"n\">use_nginx</span><span class=\"p\">,</span>\n        <span class=\"n\">certs_address</span><span class=\"o\">=</span><span class=\"n\">certs_address</span><span class=\"p\">,</span>\n        <span class=\"n\">use_local_telemetry</span><span class=\"o\">=</span><span class=\"n\">use_local_telemetry</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"restart\"><a class=\"viewcode-back\" href=\"../../../api/cli/#runhouse.main.restart\">[docs]</a><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">restart</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;A *saved* remote cluster object to restart.&quot;</span><span class=\"p\">),</span>\n    <span class=\"n\">restart_ray</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Restart the Ray runtime&quot;</span><span class=\"p\">),</span>\n    <span class=\"n\">screen</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Start the server in a screen. Only relevant when restarting locally.&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">nohup</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Start the server in a nohup if screen is not available. Only relevant when restarting locally.&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">resync_rh</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Resync the Runhouse package. Only relevant when restarting remotely.&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">host</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Custom server host address. Default is `0.0.0.0`.&quot;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Port for server. If not specified will start on 32300&quot;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">use_https</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Start an HTTPS server with TLS verification&quot;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">use_den_auth</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Whether to authenticate requests with a Runhouse token&quot;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">ssl_keyfile</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Path to custom SSL key file to use for enabling HTTPS&quot;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">ssl_certfile</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Path to custom SSL cert file to use for enabling HTTPS&quot;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">restart_proxy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Whether to reinstall Nginx and other server configs on the cluster&quot;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">use_nginx</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Whether to configure Nginx on the cluster as a reverse proxy. By default will not install &quot;</span>\n        <span class=\"s2\">&quot;and configure Nginx.&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">certs_address</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Public IP address of the server. Required for generating self-signed certs and enabling HTTPS&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">use_local_telemetry</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span>\n        <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Whether to use local telemetry&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Restart the HTTP server on the cluster.&quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n        <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">cluster</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">restart_server</span><span class=\"p\">(</span><span class=\"n\">resync_rh</span><span class=\"o\">=</span><span class=\"n\">resync_rh</span><span class=\"p\">,</span> <span class=\"n\">restart_ray</span><span class=\"o\">=</span><span class=\"n\">restart_ray</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span>\n\n    <span class=\"n\">_start_server</span><span class=\"p\">(</span>\n        <span class=\"n\">restart</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">restart_ray</span><span class=\"o\">=</span><span class=\"n\">restart_ray</span><span class=\"p\">,</span>\n        <span class=\"n\">screen</span><span class=\"o\">=</span><span class=\"n\">screen</span><span class=\"p\">,</span>\n        <span class=\"n\">nohup</span><span class=\"o\">=</span><span class=\"n\">nohup</span><span class=\"p\">,</span>\n        <span class=\"n\">create_logfile</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"n\">host</span><span class=\"p\">,</span>\n        <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"n\">port</span><span class=\"p\">,</span>\n        <span class=\"n\">use_https</span><span class=\"o\">=</span><span class=\"n\">use_https</span><span class=\"p\">,</span>\n        <span class=\"n\">den_auth</span><span class=\"o\">=</span><span class=\"n\">use_den_auth</span><span class=\"p\">,</span>\n        <span class=\"n\">ssl_keyfile</span><span class=\"o\">=</span><span class=\"n\">ssl_keyfile</span><span class=\"p\">,</span>\n        <span class=\"n\">ssl_certfile</span><span class=\"o\">=</span><span class=\"n\">ssl_certfile</span><span class=\"p\">,</span>\n        <span class=\"n\">restart_proxy</span><span class=\"o\">=</span><span class=\"n\">restart_proxy</span><span class=\"p\">,</span>\n        <span class=\"n\">use_nginx</span><span class=\"o\">=</span><span class=\"n\">use_nginx</span><span class=\"p\">,</span>\n        <span class=\"n\">certs_address</span><span class=\"o\">=</span><span class=\"n\">certs_address</span><span class=\"p\">,</span>\n        <span class=\"n\">use_local_telemetry</span><span class=\"o\">=</span><span class=\"n\">use_local_telemetry</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span></div>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">stop</span><span class=\"p\">(</span><span class=\"n\">stop_ray</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">typer</span><span class=\"o\">.</span><span class=\"n\">Option</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Stop the Ray runtime&quot;</span><span class=\"p\">)):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">SERVER_STOP_CMD</span><span class=\"p\">,</span> <span class=\"n\">shell</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">check</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">CalledProcessError</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">stop_ray</span><span class=\"p\">:</span>\n        <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">RAY_KILL_CMD</span><span class=\"p\">,</span> <span class=\"n\">shell</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">check</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">callback</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Runhouse CLI</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">verbose</span><span class=\"p\">:</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;runhouse&quot;</span>\n        <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">==</span><span class=\"si\">{</span><span class=\"n\">__version__</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">style</span><span class=\"o\">=</span><span class=\"s2\">&quot;bold green&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">state</span><span class=\"p\">[</span><span class=\"s2\">&quot;verbose&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n</pre></div>", "current_page_name": "_modules/runhouse/main", "sidebars": ["about.html", "navigation.html", "relations.html", "searchbox.html", "donate.html"], "customsidebar": null, "alabaster_version": "0.7.16", "alabaster_version_info": [0, 7, 16]}