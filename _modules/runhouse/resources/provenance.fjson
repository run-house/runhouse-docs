{"parents": [{"link": "../../../", "title": "Module code"}], "title": "runhouse.resources.provenance", "body": "<h1>Source code for runhouse.resources.provenance</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">copy</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">from</span> <span class=\"nn\">enum</span> <span class=\"kn\">import</span> <span class=\"n\">Enum</span>\n<span class=\"kn\">from</span> <span class=\"nn\">io</span> <span class=\"kn\">import</span> <span class=\"n\">StringIO</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">,</span> <span class=\"n\">Union</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.constants</span> <span class=\"kn\">import</span> <span class=\"n\">LOGS_DIR</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.globals</span> <span class=\"kn\">import</span> <span class=\"n\">configs</span><span class=\"p\">,</span> <span class=\"n\">rns_client</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.blobs</span> <span class=\"kn\">import</span> <span class=\"n\">file</span>\n\n<span class=\"c1\"># Need to alias so it doesn&#39;t conflict with the folder property</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.folders</span> <span class=\"kn\">import</span> <span class=\"n\">Folder</span><span class=\"p\">,</span> <span class=\"n\">folder</span> <span class=\"k\">as</span> <span class=\"n\">folder_factory</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.hardware</span> <span class=\"kn\">import</span> <span class=\"n\">_current_cluster</span><span class=\"p\">,</span> <span class=\"n\">_get_cluster_from</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.resource</span> <span class=\"kn\">import</span> <span class=\"n\">Resource</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.rns.top_level_rns_fns</span> <span class=\"kn\">import</span> <span class=\"n\">resolve_rns_path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.rns.utils.api</span> <span class=\"kn\">import</span> <span class=\"n\">log_timestamp</span><span class=\"p\">,</span> <span class=\"n\">resolve_absolute_path</span>\n\n<span class=\"c1\"># Load the root logger</span>\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">RunStatus</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Enum</span><span class=\"p\">):</span>\n    <span class=\"n\">NOT_STARTED</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;NOT_STARTED&quot;</span>\n    <span class=\"n\">RUNNING</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;RUNNING&quot;</span>\n    <span class=\"n\">COMPLETED</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;COMPLETED&quot;</span>\n    <span class=\"n\">CANCELLED</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;CANCELLED&quot;</span>\n    <span class=\"n\">ERROR</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;ERROR&quot;</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">RunType</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Enum</span><span class=\"p\">):</span>\n    <span class=\"n\">CMD_RUN</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;CMD&quot;</span>\n    <span class=\"n\">FUNCTION_RUN</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;FUNCTION&quot;</span>\n    <span class=\"n\">CTX_MANAGER</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;CTX_MANAGER&quot;</span>\n\n\n<div class=\"viewcode-block\" id=\"Run\"><a class=\"viewcode-back\" href=\"../../../../api/python/run/#runhouse.Run\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Run</span><span class=\"p\">(</span><span class=\"n\">Resource</span><span class=\"p\">):</span>\n    <span class=\"n\">RESOURCE_TYPE</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;run&quot;</span>\n\n    <span class=\"n\">LOCAL_RUN_PATH</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">rh_directory</span><span class=\"si\">}</span><span class=\"s2\">/runs&quot;</span>\n\n    <span class=\"n\">RUN_CONFIG_FILE</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;config_for_run.json&quot;</span>\n    <span class=\"n\">RESULT_FILE</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;result.pkl&quot;</span>\n    <span class=\"n\">INPUTS_FILE</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;inputs.pkl&quot;</span>\n\n<div class=\"viewcode-block\" id=\"Run.__init__\"><a class=\"viewcode-back\" href=\"../../../../api/python/run/#runhouse.Run.__init__\">[docs]</a>    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">fn_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">cmds</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">log_dest</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;file&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">system</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">data_config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">status</span><span class=\"p\">:</span> <span class=\"n\">RunStatus</span> <span class=\"o\">=</span> <span class=\"n\">RunStatus</span><span class=\"o\">.</span><span class=\"n\">NOT_STARTED</span><span class=\"p\">,</span>\n        <span class=\"n\">start_time</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">end_time</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">creator</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">creation_stacktrace</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">upstream_artifacts</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">downstream_artifacts</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">run_type</span><span class=\"p\">:</span> <span class=\"n\">RunType</span> <span class=\"o\">=</span> <span class=\"n\">RunType</span><span class=\"o\">.</span><span class=\"n\">CMD_RUN</span><span class=\"p\">,</span>\n        <span class=\"n\">error</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">error_traceback</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">overwrite</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">dryrun</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Runhouse Run object</span>\n\n<span class=\"sd\">        .. note::</span>\n<span class=\"sd\">            To load an existing Run, please use the factory method :func:`run`.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">run_name</span> <span class=\"o\">=</span> <span class=\"n\">name</span> <span class=\"ow\">or</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_current_timestamp</span><span class=\"p\">())</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">run_name</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">log_dest</span> <span class=\"o\">=</span> <span class=\"n\">log_dest</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">folder</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">log_dest</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;file&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">folder_system</span> <span class=\"o\">=</span> <span class=\"n\">system</span> <span class=\"ow\">or</span> <span class=\"n\">Folder</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_FS</span>\n            <span class=\"n\">folder_path</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                <span class=\"n\">resolve_absolute_path</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">path</span>\n                <span class=\"k\">else</span> <span class=\"p\">(</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_base_local_folder_path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"n\">folder_system</span> <span class=\"o\">==</span> <span class=\"n\">Folder</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_FS</span>\n                    <span class=\"k\">else</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_base_cluster_folder_path</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">run_name</span><span class=\"p\">)</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">overwrite</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Delete the Run from the system if one already exists</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_delete_existing_run</span><span class=\"p\">(</span><span class=\"n\">folder_path</span><span class=\"p\">,</span> <span class=\"n\">folder_system</span><span class=\"p\">)</span>\n\n            <span class=\"c1\"># Create new folder which lives on the system and contains all the Run&#39;s data:</span>\n            <span class=\"c1\"># (run config, stdout, stderr, inputs, result)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">folder</span> <span class=\"o\">=</span> <span class=\"n\">folder_factory</span><span class=\"p\">(</span>\n                <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">folder_path</span><span class=\"p\">,</span>\n                <span class=\"n\">system</span><span class=\"o\">=</span><span class=\"n\">folder_system</span><span class=\"p\">,</span>\n                <span class=\"n\">data_config</span><span class=\"o\">=</span><span class=\"n\">data_config</span><span class=\"p\">,</span>\n                <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">status</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">start_time</span> <span class=\"o\">=</span> <span class=\"n\">start_time</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">end_time</span> <span class=\"o\">=</span> <span class=\"n\">end_time</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">creator</span> <span class=\"o\">=</span> <span class=\"n\">creator</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">creation_stacktrace</span> <span class=\"o\">=</span> <span class=\"n\">creation_stacktrace</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">upstream_artifacts</span> <span class=\"o\">=</span> <span class=\"n\">upstream_artifacts</span> <span class=\"ow\">or</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">downstream_artifacts</span> <span class=\"o\">=</span> <span class=\"n\">downstream_artifacts</span> <span class=\"ow\">or</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fn_name</span> <span class=\"o\">=</span> <span class=\"n\">fn_name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cmds</span> <span class=\"o\">=</span> <span class=\"n\">cmds</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">run_type</span> <span class=\"o\">=</span> <span class=\"n\">run_type</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_detect_run_type</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">error</span> <span class=\"o\">=</span> <span class=\"n\">error</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">traceback</span> <span class=\"o\">=</span> <span class=\"n\">error_traceback</span></div>\n        <span class=\"c1\"># TODO string representation of inputs</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__enter__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">RunStatus</span><span class=\"o\">.</span><span class=\"n\">RUNNING</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">start_time</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_current_timestamp</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Begin tracking the Run in the rns_client - this adds the current Run to the stack of active Runs</span>\n        <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">start_run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">log_dest</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;file&quot;</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Capture stdout and stderr to the Run&#39;s folder</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">folder</span><span class=\"o\">.</span><span class=\"n\">mkdir</span><span class=\"p\">()</span>\n            <span class=\"c1\"># TODO fix the fact that we keep appending and then stream back the full file</span>\n            <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span> <span class=\"o\">=</span> <span class=\"n\">StreamTee</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stdout_path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s2\">&quot;a&quot;</span><span class=\"p\">)])</span>\n            <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stderr</span> <span class=\"o\">=</span> <span class=\"n\">StreamTee</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stderr_path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s2\">&quot;a&quot;</span><span class=\"p\">)])</span>\n\n            <span class=\"c1\"># Add the stdout and stderr handlers to the root logger</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stdout_handler</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">StreamHandler</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">)</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stdout_handler</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__exit__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">exc_type</span><span class=\"p\">,</span> <span class=\"n\">exc_value</span><span class=\"p\">,</span> <span class=\"n\">exc_traceback</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">end_time</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_current_timestamp</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">exc_type</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">RunStatus</span><span class=\"o\">.</span><span class=\"n\">ERROR</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">error</span> <span class=\"o\">=</span> <span class=\"n\">exc_value</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">traceback</span> <span class=\"o\">=</span> <span class=\"n\">exc_traceback</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">RunStatus</span><span class=\"o\">.</span><span class=\"n\">COMPLETED</span>\n\n        <span class=\"c1\"># Pop the current Run from the stack of active Runs</span>\n        <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">stop_run</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># if self.run_type == RunType.CMD_RUN:</span>\n        <span class=\"c1\">#     # Save Run config to its folder on the system - this will already happen on the cluster</span>\n        <span class=\"c1\">#     # for function based Runs</span>\n        <span class=\"c1\">#     self._write_config()</span>\n        <span class=\"c1\">#</span>\n        <span class=\"c1\">#     # For cmd runs we are using the SSH command runner to get the stdout / stderr</span>\n        <span class=\"c1\">#     return</span>\n\n        <span class=\"c1\"># TODO [DG-&gt;JL] Do we still need this?</span>\n        <span class=\"c1\"># stderr = f&quot;{type(exc_value).__name__}: {str(exc_value)}&quot; if exc_value else &quot;&quot;</span>\n        <span class=\"c1\"># self.write(data=stderr.encode(), path=self._stderr_path)</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">log_dest</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;file&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">removeHandler</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stdout_handler</span><span class=\"p\">)</span>\n\n            <span class=\"c1\"># Flush stdout and stderr</span>\n            <span class=\"c1\"># sys.stdout.flush()</span>\n            <span class=\"c1\"># sys.stderr.flush()</span>\n\n            <span class=\"c1\"># Restore stdout and stderr</span>\n            <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">instream</span>\n            <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stderr</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"o\">.</span><span class=\"n\">instream</span>\n\n            <span class=\"c1\"># Save Run config to its folder on the system - this will already happen on the cluster</span>\n            <span class=\"c1\"># for function based Runs</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_write_config</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># return False to propagate any exception that occurred inside the with block</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_config</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">Run</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__getstate__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Remove the folder object from the Run before pickling it.&quot;&quot;&quot;</span>\n        <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n        <span class=\"n\">state</span><span class=\"p\">[</span><span class=\"s2\">&quot;folder&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">state</span><span class=\"p\">[</span><span class=\"s2\">&quot;_stdout_handler&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">return</span> <span class=\"n\">state</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">config_for_rns</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Metadata to store in RNS for the Run.&quot;&quot;&quot;</span>\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">config_for_rns</span>\n        <span class=\"n\">base_config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;status&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;start_time&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">start_time</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;end_time&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">end_time</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;run_type&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">run_type</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;log_dest&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">log_dest</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;creator&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">creator</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;fn_name&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fn_name</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;cmds&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cmds</span><span class=\"p\">,</span>\n            <span class=\"c1\"># NOTE: artifacts are currently only tracked in context manager based runs</span>\n            <span class=\"s2\">&quot;upstream_artifacts&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">upstream_artifacts</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;downstream_artifacts&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">downstream_artifacts</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;path&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">folder</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;system&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_resource_string_for_subconfig</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">folder</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">),</span>\n            <span class=\"s2\">&quot;error&quot;</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">),</span>\n            <span class=\"s2\">&quot;traceback&quot;</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">traceback</span><span class=\"p\">),</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">base_config</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">config</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">populate_init_provenance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">creator</span> <span class=\"o\">=</span> <span class=\"n\">configs</span><span class=\"o\">.</span><span class=\"n\">username</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">creation_stacktrace</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">traceback</span><span class=\"o\">.</span><span class=\"n\">format_stack</span><span class=\"p\">(</span><span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"mi\">11</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">:])</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">run_config</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Config to save in the Run&#39;s dedicated folder on the system.</span>\n<span class=\"sd\">        Note: this is different from the config saved in RNS, which is the metadata for the Run.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;status&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;start_time&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">start_time</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;end_time&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">end_time</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;run_type&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">run_type</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;fn_name&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fn_name</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;cmds&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cmds</span><span class=\"p\">,</span>\n            <span class=\"c1\"># NOTE: artifacts are currently only tracked in context manager based runs</span>\n            <span class=\"s2\">&quot;upstream_artifacts&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">upstream_artifacts</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;downstream_artifacts&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">downstream_artifacts</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">config</span>\n\n<div class=\"viewcode-block\" id=\"Run.save\"><a class=\"viewcode-back\" href=\"../../../../api/python/run/#runhouse.Run.save\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">save</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">overwrite</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;If the Run name is being overwritten (ex: initially created with auto-generated name),</span>\n<span class=\"sd\">        update the Run config stored on the system before saving to RNS.&quot;&quot;&quot;</span>\n        <span class=\"n\">config_for_rns</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config_for_rns</span>\n        <span class=\"n\">config_path</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_path_to_config</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">config_for_rns</span><span class=\"p\">[</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">]</span> <span class=\"ow\">or</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"n\">config_for_rns</span><span class=\"p\">[</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">resolve_rns_path</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_write_config</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">config_for_rns</span><span class=\"p\">)</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Updated Run config name in path: </span><span class=\"si\">{</span><span class=\"n\">config_path</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">overwrite</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Run.write\"><a class=\"viewcode-back\" href=\"../../../../api/python/run/#runhouse.Run.write\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Write data (ex: function inputs or result, stdout, stderr) to the Run&#39;s dedicated folder on the system.&quot;&quot;&quot;</span>\n        <span class=\"n\">file</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">folder</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">serialize</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Run.to\"><a class=\"viewcode-back\" href=\"../../../../api/python/run/#runhouse.Run.to\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">to</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">system</span><span class=\"p\">,</span>\n        <span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">data_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Send a Run to another system.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            system (Union[str or Cluster]): Name of the system or Cluster object to copy the Run to.</span>\n<span class=\"sd\">            path (Optional[str]): Path to the on the system to save the Run.</span>\n<span class=\"sd\">                Defaults to the local path for Runs (in the rh folder of the working directory).</span>\n<span class=\"sd\">            data_config (Optional[dict]): Config to pass into fsspec handler for copying the Run.</span>\n\n<span class=\"sd\">        Returns:</span>\n<span class=\"sd\">            Run: A copy of the Run on the destination system and path.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># TODO: [JL] - support for `on_completion` (wait to copy the results to destination until async run completes)</span>\n\n        <span class=\"n\">new_run</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">run_type</span> <span class=\"o\">==</span> <span class=\"n\">RunType</span><span class=\"o\">.</span><span class=\"n\">FUNCTION_RUN</span><span class=\"p\">:</span>\n            <span class=\"n\">results_path</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fn_result_path</span><span class=\"p\">()</span>\n            <span class=\"c1\"># Pickled function result should be saved down to the Run&#39;s folder on the cluster</span>\n            <span class=\"k\">if</span> <span class=\"n\">results_path</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">folder</span><span class=\"o\">.</span><span class=\"n\">ls</span><span class=\"p\">():</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">FileNotFoundError</span><span class=\"p\">(</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;No results saved down in path: </span><span class=\"si\">{</span><span class=\"n\">results_path</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n                <span class=\"p\">)</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">fp</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stdout_path</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stderr_path</span><span class=\"p\">]:</span>\n            <span class=\"c1\"># Stdout and Stderr files created on a cluster can be symlinks to the files that we create via Ray</span>\n            <span class=\"c1\"># by default - before copying them to a new system make sure they are regular files</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_convert_symlink_to_file</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">fp</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">system</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;here&quot;</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Save to default local path if none provided</span>\n            <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">path</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_base_local_folder_path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n        <span class=\"n\">new_run</span><span class=\"o\">.</span><span class=\"n\">folder</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">folder</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span>\n            <span class=\"n\">system</span><span class=\"o\">=</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">data_config</span><span class=\"o\">=</span><span class=\"n\">data_config</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">new_run</span></div>\n\n<div class=\"viewcode-block\" id=\"Run.refresh\"><a class=\"viewcode-back\" href=\"../../../../api/python/run/#runhouse.Run.refresh\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">refresh</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"s2\">&quot;Run&quot;</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Reload the Run object from the system. This is useful for checking the status of a Run.</span>\n<span class=\"sd\">        For example: ``my_run.refresh().status``&quot;&quot;&quot;</span>\n        <span class=\"n\">run_config</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_load_run_config</span><span class=\"p\">(</span><span class=\"n\">folder</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">folder</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Need the metadata from RNS and the Run specific data in order to re-load the Run object</span>\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"o\">**</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config_for_rns</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">run_config</span><span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">Run</span><span class=\"o\">.</span><span class=\"n\">from_config</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Run.inputs\"><a class=\"viewcode-back\" href=\"../../../../api/python/run/#runhouse.Run.inputs\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">inputs</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bytes</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Load the pickled function inputs saved on the system for the Run.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_load_blob_from_path</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fn_inputs_path</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">()</span></div>\n\n<div class=\"viewcode-block\" id=\"Run.result\"><a class=\"viewcode-back\" href=\"../../../../api/python/run/#runhouse.Run.result\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">result</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Load the function result saved on the system for the Run. If the Run has failed return the stderr,</span>\n<span class=\"sd\">        otherwise return the stdout.&quot;&quot;&quot;</span>\n        <span class=\"n\">run_status</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">refresh</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">status</span>\n        <span class=\"k\">if</span> <span class=\"n\">run_status</span> <span class=\"o\">==</span> <span class=\"n\">RunStatus</span><span class=\"o\">.</span><span class=\"n\">COMPLETED</span><span class=\"p\">:</span>\n            <span class=\"n\">results_path</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fn_result_path</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"n\">results_path</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">folder</span><span class=\"o\">.</span><span class=\"n\">ls</span><span class=\"p\">():</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">FileNotFoundError</span><span class=\"p\">(</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;No results file found in path: </span><span class=\"si\">{</span><span class=\"n\">results_path</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_load_blob_from_path</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">results_path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">()</span>\n        <span class=\"k\">elif</span> <span class=\"n\">run_status</span> <span class=\"o\">==</span> <span class=\"n\">RunStatus</span><span class=\"o\">.</span><span class=\"n\">ERROR</span><span class=\"p\">:</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Run failed, returning stderr&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Run status: </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"si\">}</span><span class=\"s2\">, returning stdout&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">()</span></div>\n\n<div class=\"viewcode-block\" id=\"Run.stdout\"><a class=\"viewcode-back\" href=\"../../../../api/python/run/#runhouse.Run.stdout\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">stdout</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Read the stdout saved on the system for the Run.&quot;&quot;&quot;</span>\n        <span class=\"n\">stdout_path</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stdout_path</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Reading stdout from path: </span><span class=\"si\">{</span><span class=\"n\">stdout_path</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_load_blob_from_path</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">stdout_path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span></div>\n\n<div class=\"viewcode-block\" id=\"Run.stderr\"><a class=\"viewcode-back\" href=\"../../../../api/python/run/#runhouse.Run.stderr\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">stderr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Read the stderr saved on the system for the Run.&quot;&quot;&quot;</span>\n        <span class=\"n\">stderr_path</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stderr_path</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Reading stderr from path: </span><span class=\"si\">{</span><span class=\"n\">stderr_path</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_load_blob_from_path</span><span class=\"p\">(</span><span class=\"n\">stderr_path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_fn_inputs_path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Path to the pickled inputs used for the function which are saved on the system.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">folder</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">INPUTS_FILE</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_fn_result_path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Path to the pickled result for the function which are saved on the system.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">folder</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">RESULT_FILE</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_load_blob_from_path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Load a blob from the Run&#39;s folder in the specified path. (ex: function inputs, result, stdout, stderr).&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">file</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">system</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">folder</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_register_new_run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Log a Run once it&#39;s been triggered on the system.&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">start_time</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_current_timestamp</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">RunStatus</span><span class=\"o\">.</span><span class=\"n\">RUNNING</span>\n\n        <span class=\"c1\"># Write config data for the Run to its config file on the system</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Registering new Run on system in path: </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">folder</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_write_config</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_register_fn_run_completion</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">run_status</span><span class=\"p\">:</span> <span class=\"n\">RunStatus</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Update a function based Run&#39;s config after its finished running on the system.&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">end_time</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_current_timestamp</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">run_status</span>\n\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Registering a completed fn Run with status: </span><span class=\"si\">{</span><span class=\"n\">run_status</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_write_config</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_register_cmd_run_completion</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">return_codes</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Update a cmd based Run&#39;s config and register its stderr and stdout after running on the system.&quot;&quot;&quot;</span>\n        <span class=\"n\">run_status</span> <span class=\"o\">=</span> <span class=\"n\">RunStatus</span><span class=\"o\">.</span><span class=\"n\">ERROR</span> <span class=\"k\">if</span> <span class=\"n\">return_codes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"n\">RunStatus</span><span class=\"o\">.</span><span class=\"n\">COMPLETED</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">run_status</span>\n\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Registering a completed cmd Run with status: </span><span class=\"si\">{</span><span class=\"n\">run_status</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_write_config</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Write the stdout and stderr of the commands Run to the Run&#39;s folder</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">return_codes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(),</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stdout_path</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">return_codes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(),</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stderr_path</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_write_config</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">overwrite</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Write the Run&#39;s config data to the system.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            config (Optional[Dict]): Config to write. If none is provided, the Run&#39;s config for RNS will be used.</span>\n<span class=\"sd\">            overwrite (Optional[bool]): Overwrite the config if one is already saved down. Defaults to ``True``.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">config_to_write</span> <span class=\"o\">=</span> <span class=\"n\">config</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config_for_rns</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Config to save on system: </span><span class=\"si\">{</span><span class=\"n\">config_to_write</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">folder</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span>\n            <span class=\"p\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">RUN_CONFIG_FILE</span><span class=\"p\">:</span> <span class=\"n\">config_to_write</span><span class=\"p\">},</span>\n            <span class=\"n\">overwrite</span><span class=\"o\">=</span><span class=\"n\">overwrite</span><span class=\"p\">,</span>\n            <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s2\">&quot;w&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">write_fn</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">),</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_detect_run_type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fn_name</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">RunType</span><span class=\"o\">.</span><span class=\"n\">FUNCTION_RUN</span>\n        <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cmds</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">RunType</span><span class=\"o\">.</span><span class=\"n\">CMD_RUN</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">RunType</span><span class=\"o\">.</span><span class=\"n\">CTX_MANAGER</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_path_to_config</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Path the main folder storing the metadata, inputs, and results for the Run saved on the system.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">folder</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">RUN_CONFIG_FILE</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_path_to_file_by_ext</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">ext</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Path the file for the Run saved on the system for a provided extension (ex: ``.out`` or ``.err``).&quot;&quot;&quot;</span>\n        <span class=\"n\">existing_file</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_find_file_path_by_ext</span><span class=\"p\">(</span><span class=\"n\">ext</span><span class=\"o\">=</span><span class=\"n\">ext</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">existing_file</span><span class=\"p\">:</span>\n            <span class=\"c1\"># If file already exists in file (ex: with function on a Ray cluster this will already be</span>\n            <span class=\"c1\"># generated for us)</span>\n            <span class=\"k\">return</span> <span class=\"n\">existing_file</span>\n\n        <span class=\"n\">path_to_ext</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">folder</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span> <span class=\"o\">+</span> <span class=\"n\">ext</span>\n        <span class=\"k\">return</span> <span class=\"n\">path_to_ext</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_convert_symlink_to_file</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;If the system is a Cluster and the file path is a symlink, convert it to a regular file.</span>\n<span class=\"sd\">        This is necessary to allow for copying of the file between systems (ex: cluster --&gt; s3 or cluster --&gt; local).&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">folder</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">):</span>\n            <span class=\"n\">status_codes</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">folder</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span>\n                <span class=\"p\">[</span><span class=\"sa\">f</span><span class=\"s2\">&quot;test -h </span><span class=\"si\">{</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"s2\"> &amp;&amp; echo True || echo False&quot;</span><span class=\"p\">],</span> <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">status_codes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;True&quot;</span><span class=\"p\">:</span>\n                <span class=\"c1\"># If it&#39;s a symlink convert it to a regular file</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">folder</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span>\n                    <span class=\"p\">[</span><span class=\"sa\">f</span><span class=\"s2\">&quot;cp --remove-destination `readlink </span><span class=\"si\">{</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"s2\">` </span><span class=\"si\">{</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">]</span>\n                <span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_stdout_path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Path to the stdout file for the Run.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_path_to_file_by_ext</span><span class=\"p\">(</span><span class=\"n\">ext</span><span class=\"o\">=</span><span class=\"s2\">&quot;.out&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_stderr_path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Path to the stderr file for the Run.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_path_to_file_by_ext</span><span class=\"p\">(</span><span class=\"n\">ext</span><span class=\"o\">=</span><span class=\"s2\">&quot;.err&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_find_file_path_by_ext</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">ext</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Get the file path by provided extension. Needed when loading the stdout and stderr files associated</span>\n<span class=\"sd\">        with a particular run.&quot;&quot;&quot;</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">folder_contents</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">folder</span><span class=\"o\">.</span><span class=\"n\">ls</span><span class=\"p\">(</span><span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">FileNotFoundError</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n        <span class=\"n\">files_with_ext</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_filter_files_by_ext</span><span class=\"p\">(</span><span class=\"n\">folder_contents</span><span class=\"p\">,</span> <span class=\"n\">ext</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">files_with_ext</span><span class=\"p\">:</span>\n            <span class=\"c1\"># No .out / .err file already created in the logs folder for this Run</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n        <span class=\"c1\"># Return the most recent file with this extension</span>\n        <span class=\"k\">return</span> <span class=\"n\">files_with_ext</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_register_upstream_artifact</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">artifact_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Track a Runhouse object loaded in the Run&#39;s context manager. This object&#39;s name</span>\n<span class=\"sd\">        will be saved to the upstream artifact registry of the Run&#39;s config.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">artifact_name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">upstream_artifacts</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">upstream_artifacts</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">artifact_name</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_register_downstream_artifact</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">artifact_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Track a Runhouse object saved in the Run&#39;s context manager. This object&#39;s name</span>\n<span class=\"sd\">        will be saved to the downstream artifact registry of the Run&#39;s config.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">artifact_name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">downstream_artifacts</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">downstream_artifacts</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">artifact_name</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_current_timestamp</span><span class=\"p\">():</span>\n        <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">log_timestamp</span><span class=\"p\">())</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_filter_files_by_ext</span><span class=\"p\">(</span><span class=\"n\">files</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"n\">ext</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"n\">ext</span><span class=\"p\">),</span> <span class=\"n\">files</span><span class=\"p\">))</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_delete_existing_run</span><span class=\"p\">(</span><span class=\"n\">folder_path</span><span class=\"p\">,</span> <span class=\"n\">folder_system</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Delete existing Run on the system before a new one is created.&quot;&quot;&quot;</span>\n        <span class=\"n\">existing_folder</span> <span class=\"o\">=</span> <span class=\"n\">folder_factory</span><span class=\"p\">(</span>\n            <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">folder_path</span><span class=\"p\">,</span>\n            <span class=\"n\">system</span><span class=\"o\">=</span><span class=\"n\">folder_system</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">existing_folder</span><span class=\"o\">.</span><span class=\"n\">rm</span><span class=\"p\">(</span><span class=\"n\">recursive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_load_run_config</span><span class=\"p\">(</span><span class=\"n\">folder</span><span class=\"p\">:</span> <span class=\"n\">Folder</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">dict</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Load the Run config file saved for the Run in its dedicated folder on the system .&quot;&quot;&quot;</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">folder</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">Run</span><span class=\"o\">.</span><span class=\"n\">RUN_CONFIG_FILE</span><span class=\"p\">))</span>\n        <span class=\"k\">except</span> <span class=\"ne\">FileNotFoundError</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">{}</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_base_cluster_folder_path</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Path to the base folder for this Run on a cluster.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">LOGS_DIR</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_base_local_folder_path</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Path to the base folder for this Run on a local system.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">LOGS_DIR</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span></div>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">StreamTee</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">instream</span><span class=\"p\">,</span> <span class=\"n\">outstreams</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instream</span> <span class=\"o\">=</span> <span class=\"n\">instream</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">outstreams</span> <span class=\"o\">=</span> <span class=\"n\">outstreams</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instream</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">stream</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">outstreams</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">message</span><span class=\"p\">:</span>\n                <span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">flush</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instream</span><span class=\"o\">.</span><span class=\"n\">flush</span><span class=\"p\">()</span>\n        <span class=\"k\">for</span> <span class=\"n\">stream</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">outstreams</span><span class=\"p\">:</span>\n            <span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">flush</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">capture_stdout</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Context manager for capturing stdout to a file, list, or stream, while still printing to stdout.&quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">output</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">output</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stream</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__enter__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">output</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">StringIO</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stream</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">,</span> <span class=\"s2\">&quot;w&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stream</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">output</span>\n        <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span> <span class=\"o\">=</span> <span class=\"n\">StreamTee</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stream</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">flush</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stream</span><span class=\"o\">.</span><span class=\"n\">flush</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">stream</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">,</span> <span class=\"s2\">&quot;r&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stream</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">readlines</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">getvalue</span><span class=\"p\">()</span> <span class=\"ow\">or</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">splitlines</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">getvalue</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__exit__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">exc_type</span><span class=\"p\">,</span> <span class=\"n\">exc_val</span><span class=\"p\">,</span> <span class=\"n\">exc_tb</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s2\">&quot;instream&quot;</span><span class=\"p\">):</span>\n            <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">instream</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n\n<div class=\"viewcode-block\" id=\"run\"><a class=\"viewcode-back\" href=\"../../../../api/python/run/#runhouse.run\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">log_dest</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;file&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">system</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">data_config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">load</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">dryrun</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"s2\">&quot;Run&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]:</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Constructs a Run object.</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        name (Optional[str]): Name of the Run to load.</span>\n<span class=\"sd\">        log_dest (Optional[str]): Whether to save the Run&#39;s logs to a file or stream them back. (Default: ``file``)</span>\n<span class=\"sd\">        path (Optional[str]): Path to the Run&#39;s dedicated folder on the system where the Run lives.</span>\n<span class=\"sd\">        system (Optional[str or Cluster]): File system or cluster name where the Run lives.</span>\n<span class=\"sd\">            If providing a file system this must be one of:</span>\n<span class=\"sd\">            [``file``, ``github``, ``sftp``, ``ssh``, ``s3``, ``gs``, ``azure``].</span>\n<span class=\"sd\">            We are working to add additional file system support.</span>\n<span class=\"sd\">        data_config (Optional[Dict]): The data config to pass to the underlying fsspec handler for the folder.</span>\n<span class=\"sd\">        load (bool): Whether to try reloading an existing Run from configs. (Default: ``True``)</span>\n<span class=\"sd\">        dryrun (bool): Whether to create the Blob if it doesn&#39;t exist, or load a Blob object as a dryrun.</span>\n<span class=\"sd\">            (Default: ``False``)</span>\n<span class=\"sd\">        **kwargs: Optional kwargs for the Run.</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        Run: The loaded Run object.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">and</span> <span class=\"n\">load</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"nb\">any</span><span class=\"p\">([</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">data_config</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"p\">]):</span>\n        <span class=\"c1\"># Try reloading existing Run from RNS</span>\n        <span class=\"k\">return</span> <span class=\"n\">Run</span><span class=\"o\">.</span><span class=\"n\">from_name</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">and</span> <span class=\"n\">path</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">log_dest</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;file&quot;</span><span class=\"p\">:</span>\n        <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"n\">Run</span><span class=\"o\">.</span><span class=\"n\">_base_cluster_folder_path</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span> <span class=\"n\">Run</span><span class=\"o\">.</span><span class=\"n\">_base_local_folder_path</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"n\">_get_cluster_from</span><span class=\"p\">(</span>\n        <span class=\"n\">system</span> <span class=\"ow\">or</span> <span class=\"n\">_current_cluster</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s2\">&quot;config&quot;</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">Folder</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_FS</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">run_obj</span> <span class=\"o\">=</span> <span class=\"n\">Run</span><span class=\"p\">(</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span>\n        <span class=\"n\">log_dest</span><span class=\"o\">=</span><span class=\"n\">log_dest</span><span class=\"p\">,</span>\n        <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">path</span><span class=\"p\">,</span>\n        <span class=\"n\">system</span><span class=\"o\">=</span><span class=\"n\">system</span><span class=\"p\">,</span>\n        <span class=\"n\">data_config</span><span class=\"o\">=</span><span class=\"n\">data_config</span><span class=\"p\">,</span>\n        <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">,</span>\n        <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">run_obj</span></div>\n</pre></div>", "current_page_name": "_modules/runhouse/resources/provenance", "sidebars": ["about.html", "navigation.html", "relations.html", "searchbox.html", "donate.html"], "customsidebar": null, "alabaster_version": "0.7.15", "alabaster_version_info": [0, 7, 15]}