{"parents": [{"link": "../../../../", "title": "Module code"}], "title": "runhouse.resources.blobs.blob", "body": "<h1>Source code for runhouse.resources.blobs.blob</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">,</span> <span class=\"n\">Union</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.envs</span> <span class=\"kn\">import</span> <span class=\"n\">_get_env_from</span><span class=\"p\">,</span> <span class=\"n\">Env</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.hardware</span> <span class=\"kn\">import</span> <span class=\"n\">_current_cluster</span><span class=\"p\">,</span> <span class=\"n\">_get_cluster_from</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.module</span> <span class=\"kn\">import</span> <span class=\"n\">Module</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.rns.utils.names</span> <span class=\"kn\">import</span> <span class=\"n\">_generate_default_name</span><span class=\"p\">,</span> <span class=\"n\">_generate_default_path</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"Blob\"><a class=\"viewcode-back\" href=\"../../../../../api/python/blob/#runhouse.Blob\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Blob</span><span class=\"p\">(</span><span class=\"n\">Module</span><span class=\"p\">):</span>\n    <span class=\"n\">RESOURCE_TYPE</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;blob&quot;</span>\n    <span class=\"n\">DEFAULT_FOLDER_PATH</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;/runhouse-blob&quot;</span>\n    <span class=\"n\">DEFAULT_CACHE_FOLDER</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;.cache/runhouse/blobs&quot;</span>\n\n<div class=\"viewcode-block\" id=\"Blob.__init__\"><a class=\"viewcode-back\" href=\"../../../../../api/python/blob/#runhouse.Blob.__init__\">[docs]</a>    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">system</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Cluster</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Env</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">dryrun</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Runhouse Blob object</span>\n\n<span class=\"sd\">        .. note::</span>\n<span class=\"sd\">                To build a Blob, please use the factory method :func:`blob`.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">system</span><span class=\"o\">=</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Blob.to\"><a class=\"viewcode-back\" href=\"../../../../../api/python/blob/#runhouse.Blob.to\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">to</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">system</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">],</span>\n        <span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Env</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">data_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Return a copy of the blob on the destination system, and optionally path.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; local_blob = rh.blob(data)</span>\n<span class=\"sd\">            &gt;&gt;&gt; s3_blob = blob.to(&quot;s3&quot;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; cluster_blob = blob.to(my_cluster)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">system</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;here&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">path</span><span class=\"p\">:</span>\n                <span class=\"n\">current_cluster_config</span> <span class=\"o\">=</span> <span class=\"n\">_current_cluster</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s2\">&quot;config&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">current_cluster_config</span><span class=\"p\">:</span>\n                    <span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"n\">Cluster</span><span class=\"o\">.</span><span class=\"n\">from_config</span><span class=\"p\">(</span><span class=\"n\">current_cluster_config</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;file&quot;</span>\n\n        <span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"n\">_get_cluster_from</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"ow\">not</span> <span class=\"n\">system</span> <span class=\"ow\">or</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">))</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">path</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"ow\">or</span> <span class=\"n\">_generate_default_name</span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s2\">&quot;blob&quot;</span><span class=\"p\">)</span>\n            <span class=\"c1\"># TODO [DG] if system is the same, bounces off the laptop for no reason. Change to write through a</span>\n            <span class=\"c1\">#  call_module_method rpc (and same for similar file cases)</span>\n            <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"p\">)</span>\n\n        <span class=\"kn\">from</span> <span class=\"nn\">runhouse</span> <span class=\"kn\">import</span> <span class=\"n\">Folder</span>\n\n        <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span>\n            <span class=\"n\">path</span> <span class=\"ow\">or</span> <span class=\"n\">Folder</span><span class=\"o\">.</span><span class=\"n\">default_path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rns_address</span><span class=\"p\">,</span> <span class=\"n\">system</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>  <span class=\"c1\"># Make sure it&#39;s a string and not a Path</span>\n\n        <span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.blobs.file</span> <span class=\"kn\">import</span> <span class=\"n\">file</span>\n\n        <span class=\"n\">new_blob</span> <span class=\"o\">=</span> <span class=\"n\">file</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">system</span><span class=\"o\">=</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">data_config</span><span class=\"o\">=</span><span class=\"n\">data_config</span><span class=\"p\">)</span>\n        <span class=\"n\">new_blob</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">())</span>\n        <span class=\"k\">return</span> <span class=\"n\">new_blob</span></div>\n\n    <span class=\"c1\"># TODO delete</span>\n<div class=\"viewcode-block\" id=\"Blob.write\"><a class=\"viewcode-back\" href=\"../../../../../api/python/blob/#runhouse.Blob.write\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Save the underlying blob to its cluster&#39;s store.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; rh.blob(data).write()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">data</span></div>\n\n<div class=\"viewcode-block\" id=\"Blob.rm\"><a class=\"viewcode-back\" href=\"../../../../../api/python/blob/#runhouse.Blob.rm\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">rm</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Delete the blob from wherever it&#39;s stored.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; blob = rh.blob(data)</span>\n<span class=\"sd\">            &gt;&gt;&gt; blob.rm()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></div>\n\n<div class=\"viewcode-block\" id=\"Blob.exists_in_system\"><a class=\"viewcode-back\" href=\"../../../../../api/python/blob/#runhouse.Blob.exists_in_system\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">exists_in_system</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Check whether the blob exists in the file system</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; blob = rh.blob(data)</span>\n<span class=\"sd\">            &gt;&gt;&gt; blob.exists_in_system()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"Blob.resolved_state\"><a class=\"viewcode-back\" href=\"../../../../../api/python/blob/#runhouse.Blob.resolved_state\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">resolved_state</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">_state_dict</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Return the resolved state of the blob, which is the data.</span>\n\n<span class=\"sd\">        Primarily used to define the behavior of the ``fetch`` method.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; blob = rh.blob(data)</span>\n<span class=\"sd\">            &gt;&gt;&gt; blob.resolved_state()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span></div></div>\n\n\n<div class=\"viewcode-block\" id=\"blob\"><a class=\"viewcode-back\" href=\"../../../../../api/python/blob/#runhouse.blob\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">blob</span><span class=\"p\">(</span>\n    <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Path</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">system</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Env</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">data_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">load</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">dryrun</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n<span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Returns a Blob object, which can be used to interact with the resource at the given path</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        data: Blob data. The data to persist either on the cluster or in the filesystem.</span>\n<span class=\"sd\">        name (Optional[str]): Name to give the blob object, to be reused later on.</span>\n<span class=\"sd\">        path (Optional[str or Path]): Path (or path) to the blob object. Specfying a path will force the blob to be</span>\n<span class=\"sd\">            saved to the filesystem rather than persist in the cluster&#39;s object store.</span>\n<span class=\"sd\">        system (Optional[str or Cluster]): File system or cluster name. If providing a file system this must be one of:</span>\n<span class=\"sd\">            [``file``, ``github``, ``sftp``, ``ssh``, ``s3``, ``gs``, ``azure``].</span>\n<span class=\"sd\">            We are working to add additional file system support. If providing a cluster, this must be a cluster object</span>\n<span class=\"sd\">            or name, and whether the data is saved to the object store or filesystem depends on whether a path is</span>\n<span class=\"sd\">            specified.</span>\n<span class=\"sd\">        env (Optional[Env or str]): Environment for the blob. If left empty, defaults to base environment.</span>\n<span class=\"sd\">            (Default: ``None``)</span>\n<span class=\"sd\">        data_config (Optional[Dict]): The data config to pass to the underlying fsspec handler (in the case of</span>\n<span class=\"sd\">            saving the the filesystem).</span>\n<span class=\"sd\">        load (bool): Whether to try to load the Blob object from RNS. (Default: ``True``)</span>\n<span class=\"sd\">        dryrun (bool): Whether to create the Blob if it doesn&#39;t exist, or load a Blob object as a dryrun.</span>\n<span class=\"sd\">            (Default: ``False``)</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        Blob: The resulting blob.</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; import runhouse as rh</span>\n<span class=\"sd\">        &gt;&gt;&gt; import json</span>\n<span class=\"sd\">        &gt;&gt;&gt;</span>\n<span class=\"sd\">        &gt;&gt;&gt; data = list(range(50)</span>\n<span class=\"sd\">        &gt;&gt;&gt; serialized_data = json.dumps(data)</span>\n<span class=\"sd\">        &gt;&gt;&gt;</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Local blob with name and no path (saved to Runhouse object store)</span>\n<span class=\"sd\">        &gt;&gt;&gt; rh.blob(name=&quot;@/my-blob&quot;, data=data)</span>\n<span class=\"sd\">        &gt;&gt;&gt;</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Remote blob with name and no path (saved to cluster&#39;s Runhouse object store)</span>\n<span class=\"sd\">        &gt;&gt;&gt; rh.blob(name=&quot;@/my-blob&quot;, data=data, system=my_cluster)</span>\n<span class=\"sd\">        &gt;&gt;&gt;</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Remote blob with name, filesystem, and no path (saved to filesystem with default path)</span>\n<span class=\"sd\">        &gt;&gt;&gt; rh.blob(name=&quot;@/my-blob&quot;, data=serialized_data, system=&quot;s3&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt;</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Remote blob with name and path (saved to remote filesystem)</span>\n<span class=\"sd\">        &gt;&gt;&gt; rh.blob(name=&#39;@/my-blob&#39;, data=serialized_data, path=&#39;/runhouse-tests/my_blob.pickle&#39;, system=&#39;s3&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt;</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Local blob with path and no system (saved to local filesystem)</span>\n<span class=\"sd\">        &gt;&gt;&gt; rh.blob(data=serialized_data, path=str(Path.cwd() / &quot;my_blob.pickle&quot;))</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; # Loading a blob</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_local_blob = rh.blob(name=&quot;~/my_blob&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_s3_blob = rh.blob(name=&quot;@/my_blob&quot;)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">and</span> <span class=\"n\">load</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"nb\">any</span><span class=\"p\">([</span><span class=\"n\">data</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">data_config</span><span class=\"p\">]):</span>\n        <span class=\"c1\"># Try reloading existing blob</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">Blob</span><span class=\"o\">.</span><span class=\"n\">from_name</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n            <span class=\"c1\"># This is a rare instance where passing no constructor params is actually valid</span>\n            <span class=\"c1\"># (e.g. rh.blob(name=key).write(data)), so if we don&#39;t find the name, we still want to</span>\n            <span class=\"c1\"># create a new blob.</span>\n            <span class=\"k\">pass</span>\n\n    <span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"n\">_get_cluster_from</span><span class=\"p\">(</span><span class=\"n\">system</span> <span class=\"ow\">or</span> <span class=\"n\">_current_cluster</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s2\">&quot;config&quot;</span><span class=\"p\">),</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span>\n    <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">env</span> <span class=\"ow\">or</span> <span class=\"n\">_get_env_from</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"ow\">not</span> <span class=\"n\">system</span> <span class=\"ow\">or</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">))</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">path</span> <span class=\"ow\">and</span> <span class=\"n\">data_config</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Blobs must be named, or we don&#39;t have a key for the kv store</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span> <span class=\"ow\">or</span> <span class=\"n\">_generate_default_name</span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s2\">&quot;blob&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">new_blob</span> <span class=\"o\">=</span> <span class=\"n\">Blob</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">data</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">new_blob</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">data</span>\n        <span class=\"k\">return</span> <span class=\"n\">new_blob</span>\n\n    <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">path</span> <span class=\"ow\">or</span> <span class=\"n\">_generate_default_path</span><span class=\"p\">(</span><span class=\"n\">Blob</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">system</span><span class=\"p\">))</span>\n\n    <span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.blobs.file</span> <span class=\"kn\">import</span> <span class=\"n\">File</span>\n\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span> <span class=\"ow\">or</span> <span class=\"n\">_generate_default_name</span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s2\">&quot;file&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">new_blob</span> <span class=\"o\">=</span> <span class=\"n\">File</span><span class=\"p\">(</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span>\n        <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">path</span><span class=\"p\">,</span>\n        <span class=\"n\">system</span><span class=\"o\">=</span><span class=\"n\">system</span><span class=\"p\">,</span>\n        <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"n\">env</span><span class=\"p\">,</span>\n        <span class=\"n\">data_config</span><span class=\"o\">=</span><span class=\"n\">data_config</span><span class=\"p\">,</span>\n        <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">):</span>\n        <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">put_resource</span><span class=\"p\">(</span><span class=\"n\">new_blob</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">data</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">new_blob</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">new_blob</span></div>\n</pre></div>", "current_page_name": "_modules/runhouse/resources/blobs/blob", "sidebars": ["about.html", "navigation.html", "relations.html", "searchbox.html", "donate.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12"}