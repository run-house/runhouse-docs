{"parents": [{"link": "../../../../", "title": "Module code"}], "title": "runhouse.resources.blobs.file", "body": "<h1>Source code for runhouse.resources.blobs.file</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pickle</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">,</span> <span class=\"n\">Union</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.blobs.blob</span> <span class=\"kn\">import</span> <span class=\"n\">Blob</span><span class=\"p\">,</span> <span class=\"n\">blob</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.envs</span> <span class=\"kn\">import</span> <span class=\"n\">_get_env_from</span><span class=\"p\">,</span> <span class=\"n\">Env</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.folders</span> <span class=\"kn\">import</span> <span class=\"n\">Folder</span><span class=\"p\">,</span> <span class=\"n\">folder</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.hardware</span> <span class=\"kn\">import</span> <span class=\"n\">_current_cluster</span><span class=\"p\">,</span> <span class=\"n\">_get_cluster_from</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.rns.utils.names</span> <span class=\"kn\">import</span> <span class=\"n\">_generate_default_name</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"File\"><a class=\"viewcode-back\" href=\"../../../../../api/python/file/#runhouse.File\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">File</span><span class=\"p\">(</span><span class=\"n\">Blob</span><span class=\"p\">):</span>\n<div class=\"viewcode-block\" id=\"File.__init__\"><a class=\"viewcode-back\" href=\"../../../../../api/python/file/#runhouse.File.__init__\">[docs]</a>    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">system</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Folder</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_FS</span><span class=\"p\">,</span>\n        <span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Env</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">data_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">dryrun</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Runhouse File object</span>\n\n<span class=\"sd\">        .. note::</span>\n<span class=\"sd\">                To build a File, please use the factory method :func:`file`.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_filename</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">path</span> <span class=\"k\">else</span> <span class=\"n\">name</span>\n        <span class=\"c1\"># Use factory method so correct subclass for system is returned</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_folder</span> <span class=\"o\">=</span> <span class=\"n\">folder</span><span class=\"p\">(</span>\n            <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">path</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"k\">else</span> <span class=\"n\">path</span><span class=\"p\">,</span>\n            <span class=\"n\">system</span><span class=\"o\">=</span><span class=\"n\">system</span><span class=\"p\">,</span>\n            <span class=\"n\">data_config</span><span class=\"o\">=</span><span class=\"n\">data_config</span><span class=\"p\">,</span>\n            <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">,</span> <span class=\"n\">system</span><span class=\"o\">=</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span></div>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">config_for_rns</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">config_for_rns</span>\n        <span class=\"n\">file_config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;path&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">,</span>  <span class=\"c1\"># pair with data source to create the physical URL</span>\n            <span class=\"s2\">&quot;data_config&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data_config</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">file_config</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">config</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_config</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">Blob</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">system</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_folder</span><span class=\"o\">.</span><span class=\"n\">system</span>\n\n    <span class=\"nd\">@system</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">system</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">new_system</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_folder</span><span class=\"o\">.</span><span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"n\">new_system</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_folder</span><span class=\"o\">.</span><span class=\"n\">path</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_filename</span>\n\n    <span class=\"nd\">@path</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">new_path</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_folder</span><span class=\"o\">.</span><span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">new_path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_filename</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">new_path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">data_config</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_folder</span><span class=\"o\">.</span><span class=\"n\">data_config</span>\n\n    <span class=\"nd\">@data_config</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">data_config</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">new_data_config</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_folder</span><span class=\"o\">.</span><span class=\"n\">data_config</span> <span class=\"o\">=</span> <span class=\"n\">new_data_config</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">fsspec_url</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_folder</span><span class=\"o\">.</span><span class=\"n\">fsspec_url</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_filename</span>\n\n<div class=\"viewcode-block\" id=\"File.open\"><a class=\"viewcode-back\" href=\"../../../../../api/python/file/#runhouse.File.open\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;rb&quot;</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Get a file-like (OpenFile container object) of the file data.</span>\n<span class=\"sd\">        User must close the file, or use this method inside of a with statement.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; with my_file.open(mode=&quot;wb&quot;) as f:</span>\n<span class=\"sd\">            &gt;&gt;&gt;     f.write(data)</span>\n<span class=\"sd\">            &gt;&gt;&gt;</span>\n<span class=\"sd\">            &gt;&gt;&gt; obj = my_file.open()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_folder</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_filename</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"n\">mode</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"File.to\"><a class=\"viewcode-back\" href=\"../../../../../api/python/file/#runhouse.File.to\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">to</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">system</span><span class=\"p\">,</span>\n        <span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Env</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">data_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Return a copy of the file on the destination system and path.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; local_file = rh.file(data)</span>\n<span class=\"sd\">            &gt;&gt;&gt; s3_file = file.to(&quot;s3&quot;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; cluster_file = file.to(my_cluster)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">system</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;here&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">path</span><span class=\"p\">:</span>\n                <span class=\"n\">current_cluster_config</span> <span class=\"o\">=</span> <span class=\"n\">_current_cluster</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s2\">&quot;config&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">current_cluster_config</span><span class=\"p\">:</span>\n                    <span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"n\">Cluster</span><span class=\"o\">.</span><span class=\"n\">from_config</span><span class=\"p\">(</span><span class=\"n\">current_cluster_config</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;file&quot;</span>\n\n        <span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"n\">_get_cluster_from</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">)</span>\n        <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">_get_env_from</span><span class=\"p\">(</span><span class=\"n\">env</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">env</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"ow\">not</span> <span class=\"n\">system</span> <span class=\"ow\">or</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">))</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">path</span><span class=\"p\">:</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"ow\">or</span> <span class=\"n\">_generate_default_name</span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s2\">&quot;blob&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">data_backup</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">()</span>\n            <span class=\"n\">new_blob</span> <span class=\"o\">=</span> <span class=\"n\">Blob</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"p\">)</span>\n            <span class=\"n\">new_blob</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">data_backup</span>\n            <span class=\"k\">return</span> <span class=\"n\">new_blob</span>\n\n        <span class=\"n\">new_file</span> <span class=\"o\">=</span> <span class=\"n\">file</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">system</span><span class=\"o\">=</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">data_config</span><span class=\"o\">=</span><span class=\"n\">data_config</span><span class=\"p\">)</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">new_file</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s2\">&quot;r&quot;</span><span class=\"p\">,</span> <span class=\"n\">deserialize</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">),</span> <span class=\"n\">serialize</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s2\">&quot;w&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">UnicodeDecodeError</span><span class=\"p\">:</span>\n            <span class=\"n\">new_file</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">())</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">new_file</span></div>\n\n<div class=\"viewcode-block\" id=\"File.resolved_state\"><a class=\"viewcode-back\" href=\"../../../../../api/python/file/#runhouse.File.resolved_state\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">resolved_state</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">deserialize</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;rb&quot;</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Return the data for the user to deserialize. Primarily used to define the behavior of the ``fetch`` method.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; data = file.fetch()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_folder</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_filename</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"n\">mode</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">deserialize</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">pickle</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">data</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_save_sub_resources</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n<div class=\"viewcode-block\" id=\"File.write\"><a class=\"viewcode-back\" href=\"../../../../../api/python/file/#runhouse.File.write\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">serialize</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;wb&quot;</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Save the underlying file to its specified fsspec URL.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; rh.file(system=&quot;s3&quot;, path=&quot;path/to/save&quot;).write(data)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_folder</span><span class=\"o\">.</span><span class=\"n\">mkdir</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">serialize</span><span class=\"p\">:</span>\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">pickle</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"n\">mode</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n            <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span></div>\n\n<div class=\"viewcode-block\" id=\"File.rm\"><a class=\"viewcode-back\" href=\"../../../../../api/python/file/#runhouse.File.rm\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">rm</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Delete the file and the folder it lives in from the file system.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; file = rh.file(data, path=&quot;saved/path&quot;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; file.rm()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_folder</span><span class=\"o\">.</span><span class=\"n\">rm</span><span class=\"p\">(</span><span class=\"n\">contents</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_filename</span><span class=\"p\">],</span> <span class=\"n\">recursive</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"File.exists_in_system\"><a class=\"viewcode-back\" href=\"../../../../../api/python/file/#runhouse.File.exists_in_system\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">exists_in_system</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Check whether the file exists in the file system</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; file = rh.file(data, path=&quot;saved/path&quot;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; file.exists_in_system()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_folder</span><span class=\"o\">.</span><span class=\"n\">fsspec_fs</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fsspec_url</span><span class=\"p\">)</span></div></div>\n\n\n<div class=\"viewcode-block\" id=\"file\"><a class=\"viewcode-back\" href=\"../../../../../api/python/file/#runhouse.file\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">file</span><span class=\"p\">(</span>\n    <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">system</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">data_config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">dryrun</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n<span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Returns a File object, which can be used to interact with the resource at the given path</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        data: File data. This should be a serializable object.</span>\n<span class=\"sd\">        name (Optional[str]): Name to give the file object, to be reused later on.</span>\n<span class=\"sd\">        path (Optional[str]): Path (or path) of the file object.</span>\n<span class=\"sd\">        system (Optional[str or Cluster]): File system or cluster name. If providing a file system this must be one of:</span>\n<span class=\"sd\">            [``file``, ``github``, ``sftp``, ``ssh``, ``s3``, ``gs``, ``azure``].</span>\n<span class=\"sd\">            We are working to add additional file system support.</span>\n<span class=\"sd\">        data_config (Optional[Dict]): The data config to pass to the underlying fsspec handler.</span>\n<span class=\"sd\">        dryrun (bool): Whether to create the File if it doesn&#39;t exist, or load a File object as a dryrun.</span>\n<span class=\"sd\">            (Default: ``False``)</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        File: The resulting file.</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; import runhouse as rh</span>\n<span class=\"sd\">        &gt;&gt;&gt; import json</span>\n<span class=\"sd\">        &gt;&gt;&gt; data = json.dumps(list(range(50))</span>\n<span class=\"sd\">        &gt;&gt;&gt;</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Remote file with name and no path (saved to bucket called runhouse/blobs/my-file)</span>\n<span class=\"sd\">        &gt;&gt;&gt; rh.file(name=&quot;@/my-file&quot;, data=data, system=&#39;s3&#39;).write()</span>\n<span class=\"sd\">        &gt;&gt;&gt;</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Remote file with name and path</span>\n<span class=\"sd\">        &gt;&gt;&gt; rh.file(name=&#39;@/my-file&#39;, path=&#39;/runhouse-tests/my_file.pickle&#39;, system=&#39;s3&#39;).save()</span>\n<span class=\"sd\">        &gt;&gt;&gt;</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Local file with name and path, save to local filesystem</span>\n<span class=\"sd\">        &gt;&gt;&gt; rh.file(data=data, path=str(Path.cwd() / &quot;my_file.pickle&quot;)).write()</span>\n<span class=\"sd\">        &gt;&gt;&gt;</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Local file with name and no path (saved to ~/.cache/blobs/my-file)</span>\n<span class=\"sd\">        &gt;&gt;&gt; rh.file(name=&quot;~/my-file&quot;, data=data).write().save()</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; # Loading a file</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_local_file = rh.file(name=&quot;~/my_file&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_s3_file = rh.file(name=&quot;@/my_file&quot;)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">return</span> <span class=\"n\">blob</span><span class=\"p\">(</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span>\n        <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">,</span>\n        <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">path</span><span class=\"p\">,</span>\n        <span class=\"n\">system</span><span class=\"o\">=</span><span class=\"n\">system</span><span class=\"p\">,</span>\n        <span class=\"n\">data_config</span><span class=\"o\">=</span><span class=\"n\">data_config</span> <span class=\"ow\">or</span> <span class=\"p\">{},</span>  <span class=\"c1\"># Trick to force blob factory to create a File</span>\n        <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span></div>\n</pre></div>", "current_page_name": "_modules/runhouse/resources/blobs/file", "sidebars": ["about.html", "navigation.html", "relations.html", "searchbox.html", "donate.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12"}