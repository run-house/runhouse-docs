{"parents": [{"link": "../../../", "title": "Module code"}], "title": "runhouse.resources.resource", "body": "<h1>Source code for runhouse.resources.resource</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">pprint</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">warnings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">enum</span> <span class=\"kn\">import</span> <span class=\"n\">Enum</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">,</span> <span class=\"n\">Union</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.globals</span> <span class=\"kn\">import</span> <span class=\"n\">obj_store</span><span class=\"p\">,</span> <span class=\"n\">rns_client</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.rns.top_level_rns_fns</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">resolve_rns_path</span><span class=\"p\">,</span>\n    <span class=\"n\">save</span><span class=\"p\">,</span>\n    <span class=\"n\">split_rns_name_and_path</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.rns.utils.api</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">load_resp_content</span><span class=\"p\">,</span>\n    <span class=\"n\">read_resp_data</span><span class=\"p\">,</span>\n    <span class=\"n\">ResourceAccess</span><span class=\"p\">,</span>\n    <span class=\"n\">ResourceVisibility</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"Resource\"><a class=\"viewcode-back\" href=\"../../../../api/python/resource/#runhouse.resources.resource.Resource\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Resource</span><span class=\"p\">:</span>\n    <span class=\"n\">RESOURCE_TYPE</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;resource&quot;</span>\n\n<div class=\"viewcode-block\" id=\"Resource.__init__\"><a class=\"viewcode-back\" href=\"../../../../api/python/resource/#runhouse.resources.resource.Resource.__init__\">[docs]</a>    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">dryrun</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">provenance</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">access_level</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">ResourceAccess</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ResourceAccess</span><span class=\"o\">.</span><span class=\"n\">WRITE</span><span class=\"p\">,</span>\n        <span class=\"n\">visibility</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">ResourceVisibility</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ResourceVisibility</span><span class=\"o\">.</span><span class=\"n\">PRIVATE</span><span class=\"p\">,</span>\n        <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Runhouse abstraction for objects that can be saved, shared, and reused.</span>\n\n<span class=\"sd\">        Runhouse currently supports the following builtin Resource types:</span>\n\n<span class=\"sd\">        - Compute Abstractions</span>\n<span class=\"sd\">            - Cluster :py:class:`.cluster.Cluster`</span>\n<span class=\"sd\">            - Function :py:class:`.function.Function`</span>\n<span class=\"sd\">            - Module :py:class:`.module.Module`</span>\n<span class=\"sd\">            - Package :py:class:`.package.Package`</span>\n<span class=\"sd\">            - Env: :py:class:`.env.Env`</span>\n\n<span class=\"sd\">        - Data Abstractions</span>\n<span class=\"sd\">            - Blob :py:class:`.blob.Blob`</span>\n<span class=\"sd\">            - File :py:class:`.file.File`</span>\n<span class=\"sd\">            - Folder :py:class:`.folder.Folder`</span>\n<span class=\"sd\">            - Table :py:class:`.table.Table`</span>\n\n<span class=\"sd\">        - Secret Abstractions</span>\n<span class=\"sd\">            - Secret :py:class:`.secret.Secret`</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rns_folder</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"c1\"># TODO validate that name complies with a simple regex</span>\n            <span class=\"k\">if</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;/builtins/&quot;</span><span class=\"p\">):</span>\n                <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"p\">[</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"s2\">&quot;/builtins/&quot;</span><span class=\"p\">)</span> <span class=\"p\">:]</span>\n            <span class=\"k\">if</span> <span class=\"n\">name</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;^&quot;</span> <span class=\"ow\">and</span> <span class=\"n\">name</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;^&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rns_folder</span> <span class=\"o\">=</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">split_rns_name_and_path</span><span class=\"p\">(</span>\n                <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">resolve_rns_path</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.provenance</span> <span class=\"kn\">import</span> <span class=\"n\">Run</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dryrun</span> <span class=\"o\">=</span> <span class=\"n\">dryrun</span>\n        <span class=\"c1\"># dryrun is true here so we don&#39;t spend time calling check on the server</span>\n        <span class=\"c1\"># if we&#39;re just loading down the resource (e.g. with .remote)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">provenance</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"n\">Run</span><span class=\"o\">.</span><span class=\"n\">from_config</span><span class=\"p\">(</span><span class=\"n\">provenance</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">provenance</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span> <span class=\"n\">provenance</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">access_level</span> <span class=\"o\">=</span> <span class=\"n\">access_level</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_visibility</span> <span class=\"o\">=</span> <span class=\"n\">visibility</span></div>\n\n    <span class=\"c1\"># TODO add a utility to allow a parameter to be specified as &quot;default&quot; and then use the default value</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">config</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rns_address</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;resource_type&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">RESOURCE_TYPE</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;resource_subtype&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;provenance&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">provenance</span><span class=\"o\">.</span><span class=\"n\">config</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">provenance</span> <span class=\"k\">else</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">save_attrs_to_config</span><span class=\"p\">(</span>\n            <span class=\"n\">config</span><span class=\"p\">,</span>\n            <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;visibility&quot;</span><span class=\"p\">,</span>  <span class=\"c1\"># Handles Enum to string conversion</span>\n            <span class=\"p\">],</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">config</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_resource_string_for_subconfig</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">resource</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Resource&quot;</span><span class=\"p\">]):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Returns a string representation of a sub-resource for use in a config.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">resource</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">resource</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">resource</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">resource</span><span class=\"p\">,</span> <span class=\"n\">Resource</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"n\">rns_address</span><span class=\"p\">:</span>\n                <span class=\"c1\"># We operate on the assumption that rns_address is only populated once a resource has been saved.</span>\n                <span class=\"c1\"># That way, if rns_address is not None, we have reasonable likelihood that the resource was saved and</span>\n                <span class=\"c1\"># we can just pass the address. The only exception here is if the resource is a built-in.</span>\n                <span class=\"k\">if</span> <span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"n\">rns_address</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;^&quot;</span><span class=\"p\">):</span>\n                    <span class=\"c1\"># Fork the resource if it&#39;s a built-in and consider it a new resource</span>\n                    <span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"n\">_rns_folder</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n                    <span class=\"k\">return</span> <span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">()</span>\n                <span class=\"k\">return</span> <span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"n\">rns_address</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"c1\"># If the resource doesn&#39;t have an rns_address, we consider it unsaved and put the whole config into</span>\n                <span class=\"c1\"># the parent config.</span>\n                <span class=\"k\">return</span> <span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">()</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n            <span class=\"sa\">f</span><span class=\"s2\">&quot;Resource </span><span class=\"si\">{</span><span class=\"n\">resource</span><span class=\"si\">}</span><span class=\"s2\"> is not a valid sub-resource for </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">rns_address</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Traverse up the filesystem until reaching one of the directories in rns_base_folders,</span>\n<span class=\"sd\">        then compute the relative path to that.</span>\n\n<span class=\"sd\">        Maybe later, account for folders along the path with a different RNS name.&quot;&quot;&quot;</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rns_folder</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n        <span class=\"p\">):</span>  <span class=\"c1\"># Anonymous folders have no rns address</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n        <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rns_folder</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span>\n\n    <span class=\"nd\">@name</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Split the name and rns path if path is given (concat with current_folder if just stem is given)</span>\n        <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rns_folder</span> <span class=\"o\">=</span> <span class=\"n\">split_rns_name_and_path</span><span class=\"p\">(</span>\n                <span class=\"n\">resolve_rns_path</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">visibility</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_visibility</span>\n\n    <span class=\"nd\">@visibility</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">visibility</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">visibility</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_visibility</span> <span class=\"o\">=</span> <span class=\"n\">visibility</span>\n\n    <span class=\"nd\">@rns_address</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">rns_address</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">new_address</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">new_address</span>  <span class=\"c1\"># Note, this saves the resource to the new address!</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_save_sub_resources</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Overload by child resources to save any resources they hold internally.&quot;&quot;&quot;</span>\n        <span class=\"k\">pass</span>\n\n<div class=\"viewcode-block\" id=\"Resource.pin\"><a class=\"viewcode-back\" href=\"../../../../api/python/resource/#runhouse.resources.resource.Resource.pin\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">pin</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Write the resource to the object store.&quot;&quot;&quot;</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.hardware.utils</span> <span class=\"kn\">import</span> <span class=\"n\">_current_cluster</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">_current_cluster</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">has_local_storage</span><span class=\"p\">:</span>\n                <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">put_local</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Cannot pin a resource outside of a cluster.&quot;</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Resource.refresh\"><a class=\"viewcode-back\" href=\"../../../../api/python/resource/#runhouse.resources.resource.Resource.refresh\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">refresh</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Update the resource in the object store.&quot;&quot;&quot;</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.hardware.utils</span> <span class=\"kn\">import</span> <span class=\"n\">_current_cluster</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">_current_cluster</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span></div>\n\n<div class=\"viewcode-block\" id=\"Resource.save\"><a class=\"viewcode-back\" href=\"../../../../api/python/resource/#runhouse.resources.resource.Resource.save\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">save</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">overwrite</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Register the resource, saving it to local working_dir config and RNS config store. Uses the resource&#39;s</span>\n<span class=\"sd\">        `self.config_for_rns` to generate the dict to save.&quot;&quot;&quot;</span>\n\n        <span class=\"c1\"># add this resource this run&#39;s downstream artifact registry if it&#39;s being saved as part of a run</span>\n        <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">add_downstream_resource</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_save_sub_resources</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n\n        <span class=\"c1\"># TODO handle self.access == &#39;read&#39; instead of this weird overwrite argument</span>\n        <span class=\"n\">save</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">overwrite</span><span class=\"o\">=</span><span class=\"n\">overwrite</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">self</span></div>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">pprint</span><span class=\"o\">.</span><span class=\"n\">pformat</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_check_for_child_configs</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Overload by child resources to load any resources they hold internally.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">config</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_compare_config_with_alt_options</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">alt_options</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Overload by child resources to compare their config with the alt_options. If the user specifies alternate</span>\n<span class=\"sd\">        options, compare the config with the options. It&#39;s generally up to the child class to decide how to handle the</span>\n<span class=\"sd\">        options, but default behavior is provided. The default behavior simply checks if any of the alt_options are</span>\n<span class=\"sd\">        present in the config (with awareness of resources), and if their values differ, return None.</span>\n\n<span class=\"sd\">        If the child class returns None, it&#39;s deciding to override the config</span>\n<span class=\"sd\">        with the options. If the child class returns a config, it&#39;s deciding to use the config and ignore the options</span>\n<span class=\"sd\">        (or somehow incorporate them, rarely). Note that if alt_options are provided and the config is not found,</span>\n<span class=\"sd\">        no error is raised, while if alt_options are not provided and the config is not found, an error is raised.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">str_dict_or_resource_to_str</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"n\">Resource</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">rns_address</span>\n            <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n                <span class=\"c1\"># This can either be a sub-resource which hasn&#39;t been converted to a resource yet, or an</span>\n                <span class=\"c1\"># actual user-provided dict</span>\n                <span class=\"k\">if</span> <span class=\"s2\">&quot;rns_address&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">val</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"n\">val</span><span class=\"p\">[</span><span class=\"s2\">&quot;rns_address&quot;</span><span class=\"p\">]</span>\n                <span class=\"k\">if</span> <span class=\"s2\">&quot;name&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">val</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># convert a user-provided name to an rns_address</span>\n                    <span class=\"k\">return</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">resolve_rns_path</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">[</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">])</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"n\">val</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">val</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">alt_options</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">config</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">str_dict_or_resource_to_str</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"n\">str_dict_or_resource_to_str</span><span class=\"p\">(</span>\n                    <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n                <span class=\"p\">):</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">None</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"kc\">None</span>\n        <span class=\"k\">return</span> <span class=\"n\">config</span>\n\n<div class=\"viewcode-block\" id=\"Resource.from_name\"><a class=\"viewcode-back\" href=\"../../../../api/python/resource/#runhouse.resources.resource.Resource.from_name\">[docs]</a>    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_name</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">alt_options</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Load existing Resource via its name.&quot;&quot;&quot;</span>\n        <span class=\"c1\"># TODO is this the right priority order?</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.hardware.utils</span> <span class=\"kn\">import</span> <span class=\"n\">_current_cluster</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">_current_cluster</span><span class=\"p\">()</span> <span class=\"ow\">and</span> <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">load_config</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">alt_options</span><span class=\"p\">:</span>\n            <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">_compare_config_with_alt_options</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">alt_options</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">config</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">config</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Resource </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\"> not found.&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">_check_for_child_configs</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Add this resource&#39;s name to the resource artifact registry if part of a run</span>\n        <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">add_upstream_resource</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Uses child class&#39;s from_config</span>\n        <span class=\"k\">return</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">from_config</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span></div>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_config</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"n\">resource_type</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;resource_type&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">dryrun</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;dryrun&quot;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">dryrun</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">resource_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;resource&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">Resource</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span>\n\n        <span class=\"n\">resource_class</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span>\n            <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"p\">[</span><span class=\"s2\">&quot;runhouse&quot;</span><span class=\"p\">],</span> <span class=\"n\">resource_type</span><span class=\"o\">.</span><span class=\"n\">capitalize</span><span class=\"p\">(),</span> <span class=\"kc\">None</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">resource_class</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Could not find module associated with </span><span class=\"si\">{</span><span class=\"n\">resource_type</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">resource_class</span><span class=\"o\">.</span><span class=\"n\">_check_for_child_configs</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n\n        <span class=\"n\">loaded</span> <span class=\"o\">=</span> <span class=\"n\">resource_class</span><span class=\"o\">.</span><span class=\"n\">from_config</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">loaded</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">add_upstream_resource</span><span class=\"p\">(</span><span class=\"n\">loaded</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">loaded</span>\n\n<div class=\"viewcode-block\" id=\"Resource.unname\"><a class=\"viewcode-back\" href=\"../../../../api/python/resource/#runhouse.resources.resource.Resource.unname\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">unname</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Remove the name of the resource. This changes the resource name to anonymous and deletes any local</span>\n<span class=\"sd\">        or RNS configs for the resource.&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">delete_configs</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></div>\n\n<div class=\"viewcode-block\" id=\"Resource.history\"><a class=\"viewcode-back\" href=\"../../../../api/python/resource/#runhouse.resources.resource.Resource.history\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">history</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Return the history of the resource, including specific config fields (e.g. blob path) and which runs</span>\n<span class=\"sd\">        have overwritten it.</span>\n<span class=\"sd\">        If ``limit`` is specified, return the last ``limit`` number of entries in the history.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rns_address</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Resource must have a name in order to have a history&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rns_address</span><span class=\"p\">[:</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;~/&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Resource must be saved to Den (not local) in order to have a history&quot;</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"n\">resource_uri</span> <span class=\"o\">=</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">resource_uri</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rns_address</span><span class=\"p\">)</span>\n        <span class=\"n\">base_uri</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">api_server_url</span><span class=\"si\">}</span><span class=\"s2\">/resource/history/</span><span class=\"si\">{</span><span class=\"n\">resource_uri</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n        <span class=\"n\">uri</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">base_uri</span><span class=\"si\">}</span><span class=\"s2\">?limit=</span><span class=\"si\">{</span><span class=\"n\">limit</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span> <span class=\"k\">if</span> <span class=\"n\">limit</span> <span class=\"k\">else</span> <span class=\"n\">base_uri</span>\n\n        <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">uri</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">request_headers</span><span class=\"p\">())</span>\n        <span class=\"k\">if</span> <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">status_code</span> <span class=\"o\">!=</span> <span class=\"mi\">200</span><span class=\"p\">:</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;No resource history found: </span><span class=\"si\">{</span><span class=\"n\">load_resp_content</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"p\">[]</span>\n\n        <span class=\"n\">resource_history</span> <span class=\"o\">=</span> <span class=\"n\">read_resp_data</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">resource_history</span></div>\n\n    <span class=\"c1\"># TODO delete sub-resources</span>\n<div class=\"viewcode-block\" id=\"Resource.delete_configs\"><a class=\"viewcode-back\" href=\"../../../../api/python/resource/#runhouse.resources.resource.Resource.delete_configs\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">delete_configs</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Delete the resource&#39;s config from local working_dir and RNS config store.&quot;&quot;&quot;</span>\n        <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">delete_configs</span><span class=\"p\">(</span><span class=\"n\">resource</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Resource.save_attrs_to_config\"><a class=\"viewcode-back\" href=\"../../../../api/python/resource/#runhouse.resources.resource.Resource.save_attrs_to_config\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">save_attrs_to_config</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">attrs</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Save the given attributes to the config&quot;&quot;&quot;</span>\n        <span class=\"k\">for</span> <span class=\"n\">attr</span> <span class=\"ow\">in</span> <span class=\"n\">attrs</span><span class=\"p\">:</span>\n            <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"n\">attr</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">val</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"n\">Enum</span><span class=\"p\">):</span>\n                    <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">value</span>\n                <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"n\">attr</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">val</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">is_local</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span>\n            <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s2\">&quot;install_target&quot;</span><span class=\"p\">)</span>\n            <span class=\"ow\">and</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">install_target</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)</span>\n            <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">install_target</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;~&quot;</span><span class=\"p\">)</span>\n            <span class=\"ow\">or</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s2\">&quot;system&quot;</span><span class=\"p\">)</span>\n            <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;file&quot;</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"c1\"># TODO [DG] Implement proper sharing of subresources (with an overload of some kind)</span>\n<div class=\"viewcode-block\" id=\"Resource.share\"><a class=\"viewcode-back\" href=\"../../../../api/python/resource/#runhouse.resources.resource.Resource.share\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">share</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">users</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">access_level</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">ResourceAccess</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ResourceAccess</span><span class=\"o\">.</span><span class=\"n\">READ</span><span class=\"p\">,</span>\n        <span class=\"n\">visibility</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">ResourceVisibility</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">notify_users</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">headers</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"c1\"># Deprecated</span>\n        <span class=\"n\">access_type</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">ResourceAccess</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ResourceAccess</span><span class=\"p\">],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ResourceAccess</span><span class=\"p\">]]:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Grant access to the resource for a list of users (or a single user). If a user has a Runhouse account they</span>\n<span class=\"sd\">        will receive an email notifying them of their new access. If the user does not have a Runhouse account they will</span>\n<span class=\"sd\">        also receive instructions on creating one, after which they will be able to have access to the Resource. If</span>\n<span class=\"sd\">        ``visibility`` is set to ``public``, users will not be notified.</span>\n\n<span class=\"sd\">        .. note::</span>\n<span class=\"sd\">            You can only grant access to other users if you have write access to the resource.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            users (Union[str, list], optional): Single user or list of user emails and / or runhouse account usernames.</span>\n<span class=\"sd\">                If none are provided and ``visibility`` is set to ``public``, resource will be made publicly</span>\n<span class=\"sd\">                available to all users.</span>\n<span class=\"sd\">            access_level (:obj:`ResourceAccess`, optional): Access level to provide for the resource.</span>\n<span class=\"sd\">                Defaults to ``read``.</span>\n<span class=\"sd\">            visibility (:obj:`ResourceVisibility`, optional): Type of visibility to provide for the shared</span>\n<span class=\"sd\">                resource. Defaults to ``private``.</span>\n<span class=\"sd\">            notify_users (bool, optional): Whether to send an email notification to users who have been given access.</span>\n<span class=\"sd\">                Note: This is relevant for resources which are not ``shareable``. Defaults to ``True``.</span>\n<span class=\"sd\">            headers (dict, optional): Request headers to provide for the request to RNS. Contains the user&#39;s auth token.</span>\n<span class=\"sd\">                Example: ``{&quot;Authorization&quot;: f&quot;Bearer {token}&quot;}``</span>\n\n<span class=\"sd\">        Returns:</span>\n<span class=\"sd\">            Tuple(Dict, Dict, Set):</span>\n\n<span class=\"sd\">            `added_users`:</span>\n<span class=\"sd\">                Users who already have a Runhouse account and have been granted access to the resource.</span>\n<span class=\"sd\">            `new_users`:</span>\n<span class=\"sd\">                Users who do not have Runhouse accounts and received notifications via their emails.</span>\n<span class=\"sd\">            `valid_users`:</span>\n<span class=\"sd\">                Set of valid usernames and emails from ``users`` parameter.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # Write access to the resource for these specific users.</span>\n<span class=\"sd\">            &gt;&gt;&gt; # Visibility will be set to private (users can search for and view resource in Den dashboard)</span>\n<span class=\"sd\">            &gt;&gt;&gt; my_resource.share(users=[&quot;username1&quot;, &quot;user2@gmail.com&quot;], access_level=&#39;write&#39;)</span>\n\n<span class=\"sd\">            &gt;&gt;&gt; # Make resource public, with read access to the resource for all users</span>\n<span class=\"sd\">            &gt;&gt;&gt; my_resource.share(visibility=&#39;public&#39;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Resource must have a name in order to share&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">users</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">visibility</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Must specify `visibility` for the resource if no users are provided.&quot;</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s2\">&quot;system&quot;</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;ssh&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;sftp&quot;</span><span class=\"p\">]:</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Sharing a resource located on a cluster is not recommended. For persistence, we suggest&quot;</span>\n                <span class=\"s2\">&quot;saving to a cloud storage system (ex: `s3` or `gs`). You can copy your cluster based &quot;</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">RESOURCE_TYPE</span><span class=\"si\">}</span><span class=\"s2\"> to your desired storage provider using the `.to()` method. &quot;</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;For example: `</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">RESOURCE_TYPE</span><span class=\"si\">}</span><span class=\"s2\">.to(system=&#39;rh-cpu&#39;)`&quot;</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_local</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">RESOURCE_TYPE</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;package&quot;</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;Unable to share a local </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">RESOURCE_TYPE</span><span class=\"si\">}</span><span class=\"s2\">. Please make sure the </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">RESOURCE_TYPE</span><span class=\"si\">}</span><span class=\"s2\"> is &quot;</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;located on a cluster. You can use the `.to()` method to do so. &quot;</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;For example: `</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">.to(system=&#39;rh-cpu&#39;)`&quot;</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;Unable to share a local </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">RESOURCE_TYPE</span><span class=\"si\">}</span><span class=\"s2\">. Please make sure the </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">RESOURCE_TYPE</span><span class=\"si\">}</span><span class=\"s2\"> is &quot;</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;located on a cluster or a remote system. You can use the `.to()` method to do so. &quot;</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;For example: `</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">.to(system=&#39;s3&#39;)`&quot;</span>\n                <span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">access_type</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span><span class=\"s2\">&quot;`access_type` is deprecated, please use `access_level`&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">access_level</span> <span class=\"o\">=</span> <span class=\"n\">access_type</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">access_level</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">access_level</span> <span class=\"o\">=</span> <span class=\"n\">ResourceAccess</span><span class=\"p\">(</span><span class=\"n\">access_level</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">visibility</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Update the resource in Den with this global visibility value</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">visibility</span> <span class=\"o\">=</span> <span class=\"n\">visibility</span>\n\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Updating resource with visibility: </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">visibility</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">users</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">users</span><span class=\"p\">]</span>\n\n        <span class=\"n\">added_users</span><span class=\"p\">,</span> <span class=\"n\">new_users</span><span class=\"p\">,</span> <span class=\"n\">valid_users</span> <span class=\"o\">=</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">grant_resource_access</span><span class=\"p\">(</span>\n            <span class=\"n\">rns_address</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rns_address</span><span class=\"p\">,</span>\n            <span class=\"n\">user_emails</span><span class=\"o\">=</span><span class=\"n\">users</span><span class=\"p\">,</span>\n            <span class=\"n\">access_level</span><span class=\"o\">=</span><span class=\"n\">access_level</span><span class=\"p\">,</span>\n            <span class=\"n\">notify_users</span><span class=\"o\">=</span><span class=\"n\">notify_users</span><span class=\"p\">,</span>\n            <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">added_users</span><span class=\"p\">,</span> <span class=\"n\">new_users</span><span class=\"p\">,</span> <span class=\"n\">valid_users</span></div>\n\n<div class=\"viewcode-block\" id=\"Resource.revoke\"><a class=\"viewcode-back\" href=\"../../../../api/python/resource/#runhouse.resources.resource.Resource.revoke\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">revoke</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">users</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Revoke access to the resource.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            users (Union[str, str], optional): List of user emails and / or runhouse account usernames</span>\n<span class=\"sd\">                (or a single user). If no users are specified will revoke access for all users.</span>\n<span class=\"sd\">            headers (Optional[Dict]): Request headers to provide for the request to RNS. Contains the user&#39;s auth token.</span>\n<span class=\"sd\">                Example: ``{&quot;Authorization&quot;: f&quot;Bearer {token}&quot;}``</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">users</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">users</span><span class=\"p\">]</span>\n\n        <span class=\"n\">request_uri</span> <span class=\"o\">=</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">resource_uri</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rns_address</span><span class=\"p\">)</span>\n        <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span>\n            <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">api_server_url</span><span class=\"si\">}</span><span class=\"s2\">/resource/</span><span class=\"si\">{</span><span class=\"n\">request_uri</span><span class=\"si\">}</span><span class=\"s2\">/users/access&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">json</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;users&quot;</span><span class=\"p\">:</span> <span class=\"n\">users</span><span class=\"p\">,</span> <span class=\"s2\">&quot;access_level&quot;</span><span class=\"p\">:</span> <span class=\"n\">ResourceAccess</span><span class=\"o\">.</span><span class=\"n\">DENIED</span><span class=\"p\">},</span>\n            <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span> <span class=\"ow\">or</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">request_headers</span><span class=\"p\">(),</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">status_code</span> <span class=\"o\">!=</span> <span class=\"mi\">200</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;Failed to revoke access for resource: </span><span class=\"si\">{</span><span class=\"n\">load_resp_content</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n            <span class=\"p\">)</span></div></div>\n</pre></div>", "current_page_name": "_modules/runhouse/resources/resource", "sidebars": ["about.html", "navigation.html", "relations.html", "searchbox.html", "donate.html"], "customsidebar": null, "alabaster_version": "0.7.16", "alabaster_version_info": [0, 7, 16]}