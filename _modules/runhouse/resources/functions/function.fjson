{"parents": [{"link": "../../../../", "title": "Module code"}], "title": "runhouse.resources.functions.function", "body": "<h1>Source code for runhouse.resources.functions.function</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">inspect</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">,</span> <span class=\"n\">Union</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse</span> <span class=\"kn\">import</span> <span class=\"nb\">globals</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.logger</span> <span class=\"kn\">import</span> <span class=\"n\">logger</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.envs</span> <span class=\"kn\">import</span> <span class=\"n\">Env</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.hardware</span> <span class=\"kn\">import</span> <span class=\"n\">Cluster</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.module</span> <span class=\"kn\">import</span> <span class=\"n\">Module</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.resource</span> <span class=\"kn\">import</span> <span class=\"n\">Resource</span>\n\n\n<div class=\"viewcode-block\" id=\"Function\"><a class=\"viewcode-back\" href=\"../../../../../api/python/function/#runhouse.Function\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Function</span><span class=\"p\">(</span><span class=\"n\">Module</span><span class=\"p\">):</span>\n    <span class=\"n\">RESOURCE_TYPE</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;function&quot;</span>\n\n<div class=\"viewcode-block\" id=\"Function.__init__\"><a class=\"viewcode-back\" href=\"../../../../../api/python/function/#runhouse.Function.__init__\">[docs]</a>    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">fn_pointers</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">system</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Cluster</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Env</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">dryrun</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>  <span class=\"c1\"># We have this here to ignore extra arguments when calling from from_config</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Runhouse Function object. It is comprised of the entrypoint, system/cluster,</span>\n<span class=\"sd\">        and dependencies necessary to run the service.</span>\n\n<span class=\"sd\">        .. note::</span>\n<span class=\"sd\">                To create a Function, please use the factory method :func:`function`.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fn_pointers</span> <span class=\"o\">=</span> <span class=\"n\">fn_pointers</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_loaded_fn</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">,</span> <span class=\"n\">system</span><span class=\"o\">=</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span></div>\n\n    <span class=\"c1\"># ----------------- Constructor helper methods -----------------</span>\n\n<div class=\"viewcode-block\" id=\"Function.from_config\"><a class=\"viewcode-back\" href=\"../../../../../api/python/function/#runhouse.Function.from_config\">[docs]</a>    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_config</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">_resolve_children</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Create a Function object from a config dictionary.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;system&quot;</span><span class=\"p\">],</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n            <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;system&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Cluster</span><span class=\"o\">.</span><span class=\"n\">from_config</span><span class=\"p\">(</span>\n                <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;system&quot;</span><span class=\"p\">],</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">,</span> <span class=\"n\">_resolve_children</span><span class=\"o\">=</span><span class=\"n\">_resolve_children</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;env&quot;</span><span class=\"p\">],</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n            <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;env&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Env</span><span class=\"o\">.</span><span class=\"n\">from_config</span><span class=\"p\">(</span>\n                <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;env&quot;</span><span class=\"p\">],</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">,</span> <span class=\"n\">_resolve_children</span><span class=\"o\">=</span><span class=\"n\">_resolve_children</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;resource_subtype&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">Function</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Function.share\"><a class=\"viewcode-back\" href=\"../../../../../api/python/function/#runhouse.Function.share\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">share</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">visibility</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">visibility</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">visibility</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">visibility</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">visibility</span> <span class=\"o\">=</span> <span class=\"n\">visibility</span>\n            <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">remote</span><span class=\"o\">.</span><span class=\"n\">visibility</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                <span class=\"n\">visibility</span>  <span class=\"c1\"># do this to avoid hitting Function&#39;s .remote</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">share</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span> <span class=\"n\">visibility</span><span class=\"o\">=</span><span class=\"n\">visibility</span><span class=\"p\">)</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">default_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fn_pointers</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fn_pointers</span> <span class=\"k\">else</span> <span class=\"kc\">None</span>\n        <span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">default_name</span><span class=\"p\">()</span>\n\n<div class=\"viewcode-block\" id=\"Function.to\"><a class=\"viewcode-back\" href=\"../../../../../api/python/function/#runhouse.Function.to\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">to</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">system</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">],</span>\n        <span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">Env</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">force_install</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;to(system: str | Cluster | None = None, env: List[str] | Env = [], force_install: bool = False)</span>\n\n<span class=\"sd\">        Set up a Function and Env on the given system.</span>\n<span class=\"sd\">        If the function is sent to AWS, the system should be ``aws_lambda``</span>\n<span class=\"sd\">        See the args of the factory method :func:`function` for more information.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; rh.function(fn=local_fn).to(gpu_cluster)</span>\n<span class=\"sd\">            &gt;&gt;&gt; rh.function(fn=local_fn).to(system=gpu_cluster, env=my_conda_env)</span>\n<span class=\"sd\">            &gt;&gt;&gt; rh.function(fn=local_fn).to(system=&#39;aws_lambda&#39;)  # will deploy the rh.function to AWS as a Lambda.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>  <span class=\"c1\"># noqa: E501</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;lambda_function&quot;</span><span class=\"p\">:</span>\n            <span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.functions.aws_lambda_factory</span> <span class=\"kn\">import</span> <span class=\"n\">aws_lambda_fn</span>\n\n            <span class=\"k\">return</span> <span class=\"n\">aws_lambda_fn</span><span class=\"p\">(</span>\n                <span class=\"n\">fn</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_obj_from_pointers</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fn_pointers</span><span class=\"p\">),</span> <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"n\">env</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span>\n            <span class=\"n\">system</span><span class=\"o\">=</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">force_install</span><span class=\"o\">=</span><span class=\"n\">force_install</span>\n        <span class=\"p\">)</span></div>\n\n    <span class=\"c1\"># ----------------- Function call methods -----------------</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Any</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Call the function on its system</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">             *args: Optional args for the Function</span>\n<span class=\"sd\">             stream_logs (bool): Whether to stream the logs from the Function&#39;s execution.</span>\n<span class=\"sd\">                Defaults to ``True``.</span>\n<span class=\"sd\">             run_name (Optional[str]): Name of the Run to create. If provided, a Run will be created</span>\n<span class=\"sd\">                for this function call, which will be executed synchronously on the cluster before returning its result</span>\n<span class=\"sd\">             **kwargs: Optional kwargs for the Function</span>\n\n<span class=\"sd\">        Returns:</span>\n<span class=\"sd\">            The Function&#39;s return value</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">call</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Any</span><span class=\"p\">:</span>\n        <span class=\"c1\"># We need this strictly because Module&#39;s __getattribute__ overload can&#39;t pick up the __call__ method</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_loaded_fn</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_loaded_fn</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_obj_from_pointers</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fn_pointers</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_loaded_fn</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"Function.method_signature\"><a class=\"viewcode-back\" href=\"../../../../../api/python/function/#runhouse.Function.method_signature\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">method_signature</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">callable</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">method</span><span class=\"o\">.</span><span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;call&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">method_signature</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_obj_from_pointers</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fn_pointers</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">method_signature</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"p\">)</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">map</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Map a function over a list of arguments.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; def local_sum(arg1, arg2, arg3):</span>\n<span class=\"sd\">            &gt;&gt;&gt;     return arg1 + arg2 + arg3</span>\n<span class=\"sd\">            &gt;&gt;&gt;</span>\n<span class=\"sd\">            &gt;&gt;&gt; remote_fn = rh.function(local_fn).to(gpu)</span>\n<span class=\"sd\">            &gt;&gt;&gt; remote_fn.map([1, 2], [1, 4], [2, 3])</span>\n<span class=\"sd\">            &gt;&gt;&gt; # output: [4, 9]</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">ray</span>\n\n        <span class=\"n\">fn</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_obj_from_pointers</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fn_pointers</span><span class=\"p\">)</span>\n        <span class=\"n\">ray_wrapped_fn</span> <span class=\"o\">=</span> <span class=\"n\">ray</span><span class=\"o\">.</span><span class=\"n\">remote</span><span class=\"p\">(</span><span class=\"n\">fn</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">ray</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">([</span><span class=\"n\">ray_wrapped_fn</span><span class=\"o\">.</span><span class=\"n\">remote</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">args</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)])</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">starmap</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">args_lists</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Like :func:`map` except that the elements of the iterable are expected to be iterables</span>\n<span class=\"sd\">        that are unpacked as arguments. An iterable of [(1,2), (3, 4)] results in [func(1,2), func(3,4)].</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; arg_list = [(1,2), (3, 4)]</span>\n<span class=\"sd\">            &gt;&gt;&gt; # runs the function twice, once with args (1, 2) and once with args (3, 4)</span>\n<span class=\"sd\">            &gt;&gt;&gt; remote_fn.starmap(arg_list)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">ray</span>\n\n        <span class=\"n\">fn</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_obj_from_pointers</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fn_pointers</span><span class=\"p\">)</span>\n        <span class=\"n\">ray_wrapped_fn</span> <span class=\"o\">=</span> <span class=\"n\">ray</span><span class=\"o\">.</span><span class=\"n\">remote</span><span class=\"p\">(</span><span class=\"n\">fn</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">ray</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">([</span><span class=\"n\">ray_wrapped_fn</span><span class=\"o\">.</span><span class=\"n\">remote</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">args</span> <span class=\"ow\">in</span> <span class=\"n\">args_lists</span><span class=\"p\">])</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">local</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">key</span>\n\n<div class=\"viewcode-block\" id=\"Function.get\"><a class=\"viewcode-back\" href=\"../../../../../api/python/function/#runhouse.Function.get\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">run_key</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Get the result of a Function call that was submitted as async using `run`.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            run_key: A single or list of runhouse run_key strings returned by calling ``.call.remote()`` on the</span>\n<span class=\"sd\">                Function. The ObjectRefs must be from the cluster that this Function is running on.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; remote_fn = rh.function(local_fn).to(gpu)</span>\n<span class=\"sd\">            &gt;&gt;&gt; remote_fn_run = remote_fn.run()</span>\n<span class=\"sd\">            &gt;&gt;&gt; remote_fn.get(remote_fn_run.name)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">run_key</span><span class=\"p\">)</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">config</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">condensed</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">(</span><span class=\"n\">condensed</span><span class=\"p\">)</span>\n        <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span>\n            <span class=\"p\">{</span>\n                <span class=\"s2\">&quot;fn_pointers&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fn_pointers</span><span class=\"p\">,</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">config</span>\n\n<div class=\"viewcode-block\" id=\"Function.http_url\"><a class=\"viewcode-back\" href=\"../../../../../api/python/function/#runhouse.Function.http_url\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">http_url</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">curl_command</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return the endpoint needed to run the Function on the remote cluster, or provide the curl command if requested.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span><span class=\"s2\">&quot;http_url not yet implemented for Function&quot;</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Function.notebook\"><a class=\"viewcode-back\" href=\"../../../../../api/python/function/#runhouse.Function.notebook\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">notebook</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">persist</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">sync_package_on_close</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">port_forward</span><span class=\"o\">=</span><span class=\"mi\">8888</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Tunnel into and launch notebook from the system.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Cannot SSH, running locally&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">notebook</span><span class=\"p\">(</span>\n            <span class=\"n\">persist</span><span class=\"o\">=</span><span class=\"n\">persist</span><span class=\"p\">,</span>\n            <span class=\"n\">sync_package_on_close</span><span class=\"o\">=</span><span class=\"n\">sync_package_on_close</span><span class=\"p\">,</span>\n            <span class=\"n\">port_forward</span><span class=\"o\">=</span><span class=\"n\">port_forward</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_or_call</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">run_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">load</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">local</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Any</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Check if object already exists on cluster or rns, and if so return the result. If not, run the function.</span>\n<span class=\"sd\">        Keep in mind this can be called with any of the usual method call modifiers - `remote=True`, `run_async=True`,</span>\n<span class=\"sd\">        `stream_logs=False`, etc.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            run_name (Optional[str]): Name of a particular run for this function.</span>\n<span class=\"sd\">                If not provided will use the function&#39;s name.</span>\n<span class=\"sd\">            load (bool): Whether to load the name from the RNS if it exists.</span>\n<span class=\"sd\">            *args: Arguments to pass to the function for the run (relevant if creating a new run).</span>\n<span class=\"sd\">            **kwargs: Keyword arguments to pass to the function for the run (relevant if creating a new run).</span>\n\n<span class=\"sd\">        Returns:</span>\n<span class=\"sd\">            Any: Result of the Run</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # previously, remote_fn.run(arg1, arg2, run_name=&quot;my_async_run&quot;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; remote_fn.get_or_call()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># TODO let&#39;s just do this for functions initially, and decide if we want to support it for calls on modules</span>\n        <span class=\"c1\">#  as well. Right now this only works with remote=True, we should decide if we want to fix that later.</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">load</span><span class=\"p\">:</span>\n            <span class=\"n\">resource</span> <span class=\"o\">=</span> <span class=\"nb\">globals</span><span class=\"o\">.</span><span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">load_config</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">run_name</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">resource</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">Resource</span><span class=\"o\">.</span><span class=\"n\">from_name</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">run_name</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dryrun</span><span class=\"p\">)</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">run_name</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"ne\">KeyError</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Item </span><span class=\"si\">{</span><span class=\"n\">run_name</span><span class=\"si\">}</span><span class=\"s2\"> not found on cluster. Running function.&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span> <span class=\"n\">run_name</span><span class=\"o\">=</span><span class=\"n\">run_name</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"Function.keep_warm\"><a class=\"viewcode-back\" href=\"../../../../../api/python/function/#runhouse.Function.keep_warm\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">keep_warm</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">autostop_mins</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Keep the system warm for autostop_mins. If autostop_mins is ``None`` or -1, keep warm indefinitely.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # keep gpu warm for 30 mins</span>\n<span class=\"sd\">            &gt;&gt;&gt; remote_fn = rh.function(local_fn).to(gpu)</span>\n<span class=\"sd\">            &gt;&gt;&gt; remote_fn.keep_warm(autostop_mins=30)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">autostop_mins</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Keeping </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\"> indefinitely warm&quot;</span><span class=\"p\">)</span>\n            <span class=\"c1\"># keep indefinitely warm if user doesn&#39;t specify</span>\n            <span class=\"n\">autostop_mins</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">keep_warm</span><span class=\"p\">(</span><span class=\"n\">autostop_mins</span><span class=\"o\">=</span><span class=\"n\">autostop_mins</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">self</span></div>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_handle_nb_fn</span><span class=\"p\">(</span><span class=\"n\">fn</span><span class=\"p\">,</span> <span class=\"n\">fn_pointers</span><span class=\"p\">,</span> <span class=\"n\">serialize_notebook_fn</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Handle the case where the user passes in a notebook function&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">serialize_notebook_fn</span><span class=\"p\">:</span>\n            <span class=\"c1\"># This will all be cloudpickled by the RPC client and unpickled by the RPC server</span>\n            <span class=\"c1\"># Note that this means the function cannot be saved, and it&#39;s better that way because</span>\n            <span class=\"c1\"># pickling functions is not meant for long term storage. Case in point, this method will be</span>\n            <span class=\"c1\"># sensitive to differences in minor Python versions between the serializing and deserializing envs.</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;notebook&quot;</span><span class=\"p\">,</span> <span class=\"n\">fn</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">module_path</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"o\">.</span><span class=\"n\">cwd</span><span class=\"p\">()</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">_fn.py&quot;</span> <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;sent_fn.py&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;Because this function is defined in a notebook, writing it out to </span><span class=\"si\">{</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">module_path</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\"> &quot;</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;to make it importable. Please make sure the function does not rely on any local variables, &quot;</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;including imports (which should be moved inside the function body). &quot;</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;This restriction does not apply to functions defined in normal Python files.&quot;</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n                <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;You should name Functions that are created in notebooks to avoid naming collisions &quot;</span>\n                    <span class=\"s2\">&quot;between the modules that are created to hold their functions &quot;</span>\n                    <span class=\"s1\">&#39;(i.e. &quot;sent_fn.py&quot; errors.&#39;</span>\n                <span class=\"p\">)</span>\n            <span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">getsource</span><span class=\"p\">(</span><span class=\"n\">fn</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n            <span class=\"k\">with</span> <span class=\"n\">module_path</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s2\">&quot;w&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n                <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">fn_pointers</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">module_path</span><span class=\"o\">.</span><span class=\"n\">stem</span><span class=\"p\">,</span> <span class=\"n\">fn_pointers</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span></div>\n</pre></div>", "current_page_name": "_modules/runhouse/resources/functions/function", "sidebars": ["about.html", "navigation.html", "relations.html", "searchbox.html", "donate.html"], "customsidebar": null, "alabaster_version": "0.7.16", "alabaster_version_info": [0, 7, 16]}