{"parents": [{"link": "../../../../", "title": "Module code"}], "title": "runhouse.resources.functions.function_factory", "body": "<h1>Source code for runhouse.resources.functions.function_factory</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">re</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">,</span> <span class=\"n\">Union</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.logger</span> <span class=\"kn\">import</span> <span class=\"n\">get_logger</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.envs</span> <span class=\"kn\">import</span> <span class=\"n\">_get_env_from</span><span class=\"p\">,</span> <span class=\"n\">Env</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.functions.function</span> <span class=\"kn\">import</span> <span class=\"n\">Function</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.packages</span> <span class=\"kn\">import</span> <span class=\"n\">git_package</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">get_logger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"function\"><a class=\"viewcode-back\" href=\"../../../../../api/python/function/#runhouse.function\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">function</span><span class=\"p\">(</span>\n    <span class=\"n\">fn</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Callable</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">Env</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">load_from_den</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">dryrun</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">serialize_notebook_fn</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n<span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;runhouse.function(fn: str | Callable | None = None, name: str | None = None, system: str | Cluster | None = None, env: str | List[str] | Env | None = None, dryrun: bool = False, load_secrets: bool = False, serialize_notebook_fn: bool = False)</span>\n\n<span class=\"sd\">    Builds an instance of :class:`Function`.</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        fn (Optional[str or Callable]): The function to execute on the remote system when the function is called.</span>\n<span class=\"sd\">        name (str, optional): Name of the Function to create or retrieve.</span>\n<span class=\"sd\">            This can be either from a local config or from the RNS. (Default: ``None``)</span>\n<span class=\"sd\">        env (Optional[List[str] or Env or str], optional): List of requirements to install on the remote cluster,</span>\n<span class=\"sd\">            or path to the requirements.txt file, or Env object or string name of an Env object. (Default: ``None``)</span>\n<span class=\"sd\">        load_from_den (bool, optional): Whether to try loading the function from Den. (Default: ``True``)</span>\n<span class=\"sd\">        dryrun (bool, optional): Whether to create the Function if it doesn&#39;t exist, or load the Function object as</span>\n<span class=\"sd\">            a dryrun. (Default: ``False``)</span>\n<span class=\"sd\">        serialize_notebook_fn (bool, optional): If function is of a notebook setting, whether or not to serialized the</span>\n<span class=\"sd\">            function. (Default: ``False``)</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        Function: The resulting Function object.</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; import runhouse as rh</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; cluster = rh.ondemand_cluster(name=&quot;my_cluster&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; def sum(a, b):</span>\n<span class=\"sd\">        &gt;&gt;&gt;    return a + b</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; summer = rh.function(fn=sum, name=&quot;my_func&quot;).to(cluster, env=[&#39;requirements.txt&#39;]).save()</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; # using the function</span>\n<span class=\"sd\">        &gt;&gt;&gt; res = summer(5, 8)  # returns 13</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; # Load function from above</span>\n<span class=\"sd\">        &gt;&gt;&gt; reloaded_function = rh.function(name=&quot;my_func&quot;)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>  <span class=\"c1\"># noqa: E501</span>\n    <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"nb\">any</span><span class=\"p\">([</span><span class=\"n\">fn</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"p\">]):</span>\n        <span class=\"c1\"># Try reloading existing function</span>\n        <span class=\"k\">return</span> <span class=\"n\">Function</span><span class=\"o\">.</span><span class=\"n\">from_name</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">load_from_den</span><span class=\"o\">=</span><span class=\"n\">load_from_den</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">env</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;The `env` argument is deprecated and will be removed in a future version. Please first &quot;</span>\n            <span class=\"s2\">&quot;construct your module and then do `module.to(system=system, system=env)` to set the environment. &quot;</span>\n            <span class=\"s2\">&quot;You can do `module.to(system=rh.here, env=env)` to set the environment on the local system.&quot;</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"n\">Env</span><span class=\"p\">):</span>\n        <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">_get_env_from</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">Env</span><span class=\"p\">()</span>\n\n    <span class=\"n\">fn_pointers</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"k\">if</span> <span class=\"nb\">callable</span><span class=\"p\">(</span><span class=\"n\">fn</span><span class=\"p\">):</span>\n        <span class=\"n\">fn_pointers</span> <span class=\"o\">=</span> <span class=\"n\">Function</span><span class=\"o\">.</span><span class=\"n\">_extract_pointers</span><span class=\"p\">(</span><span class=\"n\">fn</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"n\">Env</span><span class=\"p\">):</span>\n            <span class=\"c1\"># Sometimes env may still be a string, in which case it won&#39;t be modified</span>\n            <span class=\"p\">(</span>\n                <span class=\"n\">local_path_containing_module</span><span class=\"p\">,</span>\n                <span class=\"n\">should_add</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">Function</span><span class=\"o\">.</span><span class=\"n\">_get_local_path_containing_module</span><span class=\"p\">(</span><span class=\"n\">fn_pointers</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">reqs</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">should_add</span><span class=\"p\">:</span>\n                <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">reqs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">local_path_containing_module</span><span class=\"p\">)]</span> <span class=\"o\">+</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">reqs</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">fn_pointers</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;notebook&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">fn_pointers</span> <span class=\"o\">=</span> <span class=\"n\">Function</span><span class=\"o\">.</span><span class=\"n\">_handle_nb_fn</span><span class=\"p\">(</span>\n                <span class=\"n\">fn</span><span class=\"p\">,</span>\n                <span class=\"n\">fn_pointers</span><span class=\"o\">=</span><span class=\"n\">fn_pointers</span><span class=\"p\">,</span>\n                <span class=\"n\">serialize_notebook_fn</span><span class=\"o\">=</span><span class=\"n\">serialize_notebook_fn</span><span class=\"p\">,</span>\n                <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">fn_pointers</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"ow\">or</span> <span class=\"n\">name</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">fn</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Url must match a regex of the form</span>\n        <span class=\"c1\"># &#39;https://github.com/username/repo_name/blob/branch_name/path/to/file.py:func_name&#39;</span>\n        <span class=\"c1\"># Use a regex to extract username, repo_name, branch_name, path/to/file.py, and func_name</span>\n        <span class=\"n\">pattern</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"sa\">r</span><span class=\"s2\">&quot;https://github\\.com/(?P&lt;username&gt;[^/]+)/(?P&lt;repo_name&gt;[^/]+)/blob/&quot;</span>\n            <span class=\"sa\">r</span><span class=\"s2\">&quot;(?P&lt;branch_name&gt;[^/]+)/(?P&lt;path&gt;[^:]+):(?P&lt;func_name&gt;.+)&quot;</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">match</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">,</span> <span class=\"n\">fn</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">match</span><span class=\"p\">:</span>\n            <span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"s2\">&quot;username&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">repo_name</span> <span class=\"o\">=</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"s2\">&quot;repo_name&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">branch_name</span> <span class=\"o\">=</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"s2\">&quot;branch_name&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"s2\">&quot;path&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">func_name</span> <span class=\"o\">=</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"s2\">&quot;func_name&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;fn must be a callable or string of the form &quot;</span>\n                <span class=\"s1\">&#39;&quot;https://github.com/username/repo_name/blob/branch_name/path/to/file.py:func_name&quot;&#39;</span>\n            <span class=\"p\">)</span>\n        <span class=\"n\">module_name</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">stem</span>\n        <span class=\"n\">relative_path</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">repo_name</span> <span class=\"o\">/</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"p\">)</span>\n        <span class=\"n\">fn_pointers</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">relative_path</span><span class=\"p\">,</span> <span class=\"n\">module_name</span><span class=\"p\">,</span> <span class=\"n\">func_name</span><span class=\"p\">)</span>\n        <span class=\"c1\"># TODO [DG] check if the user already added this in their reqs</span>\n        <span class=\"n\">repo_package</span> <span class=\"o\">=</span> <span class=\"n\">git_package</span><span class=\"p\">(</span>\n            <span class=\"n\">git_url</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s2\">&quot;https://github.com/</span><span class=\"si\">{</span><span class=\"n\">username</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">{</span><span class=\"n\">repo_name</span><span class=\"si\">}</span><span class=\"s2\">.git&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">revision</span><span class=\"o\">=</span><span class=\"n\">branch_name</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">reqs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">repo_package</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">reqs</span>\n\n    <span class=\"n\">new_function</span> <span class=\"o\">=</span> <span class=\"n\">Function</span><span class=\"p\">(</span><span class=\"n\">fn_pointers</span><span class=\"o\">=</span><span class=\"n\">fn_pointers</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"n\">env</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">new_function</span></div>\n</pre></div>", "current_page_name": "_modules/runhouse/resources/functions/function_factory", "sidebars": ["about.html", "navigation.html", "relations.html", "searchbox.html", "donate.html"], "customsidebar": null, "alabaster_version": "0.7.16", "alabaster_version_info": [0, 7, 16]}