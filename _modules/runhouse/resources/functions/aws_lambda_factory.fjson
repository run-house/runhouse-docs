{"parents": [{"link": "../../../../", "title": "Module code"}], "title": "runhouse.resources.functions.aws_lambda_factory", "body": "<h1>Source code for runhouse.resources.functions.aws_lambda_factory</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">,</span> <span class=\"n\">Union</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.envs</span> <span class=\"kn\">import</span> <span class=\"n\">Env</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.functions.aws_lambda</span> <span class=\"kn\">import</span> <span class=\"n\">LambdaFunction</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.functions.function</span> <span class=\"kn\">import</span> <span class=\"n\">Function</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"n\">CRED_PATH</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">Path</span><span class=\"o\">.</span><span class=\"n\">home</span><span class=\"p\">()</span><span class=\"si\">}</span><span class=\"s2\">/.aws/credentials&quot;</span>\n<span class=\"n\">DEFAULT_PY_VERSION</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;python3.9&quot;</span>\n<span class=\"n\">LOG_GROUP_PREFIX</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;/aws/lambda/&quot;</span>\n\n\n<div class=\"viewcode-block\" id=\"aws_lambda_fn\"><a class=\"viewcode-back\" href=\"../../../../../api/python/function/#runhouse.aws_lambda_fn\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">aws_lambda_fn</span><span class=\"p\">(</span>\n    <span class=\"n\">fn</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">Env</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">runtime</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">memory_size</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">tmp_size</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">retention_time</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">dryrun</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n<span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Builds an instance of :class:`LambdaFunction`.</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        fn (Optional[Callable]): The Lambda function to be executed.</span>\n<span class=\"sd\">        name (Optional[str]): Name of the Lambda Function to create or retrieve.</span>\n<span class=\"sd\">            This can be either from a local config or from the RNS.</span>\n<span class=\"sd\">        env (Optional[Dict or List[str] or Env]): Specifies the requirements that will be installed, and the environment</span>\n<span class=\"sd\">            vars that should be attached to the Lambda. Accepts three possible types:\\n</span>\n<span class=\"sd\">            1. A dict which should contain the following keys:\\n</span>\n<span class=\"sd\">               a. reqs: a list of the python libraries, to be installed by the Lambda, or just a ``requirements.txt``</span>\n<span class=\"sd\">                  string.\\n</span>\n<span class=\"sd\">               b. env_vars: dictionary containing the env_vars that will be a part of the lambda configuration.\\n</span>\n<span class=\"sd\">            2. A list of strings, containing all the required python packages.\\n</span>\n<span class=\"sd\">            3. An instance of Runhouse Env class.\\n</span>\n<span class=\"sd\">            By default, ``runhouse`` package will be installed, and env_vars will include ``{HOME: /tmp/home}``.</span>\n<span class=\"sd\">        runtime: (Optional[str]): The coding language of the function. Should be one of the following:</span>\n<span class=\"sd\">            python3.7, python3.8, python3.9, python3.10, python3.11. (Default: ``python3.9``)</span>\n<span class=\"sd\">        timeout: Optional[int]: The maximum amount of time (in seconds) during which the Lambda will run in AWS</span>\n<span class=\"sd\">            without timing-out. (Default: ``900``, Min: ``3``, Max: ``900``)</span>\n<span class=\"sd\">        memory_size: Optional[int], The amount of memory (in MB) to be allocated to the Lambda.</span>\n<span class=\"sd\">             (Default: ``1024``, Min: ``128``, Max: ``10240``)</span>\n<span class=\"sd\">        tmp_size: Optional[int], This size of the /tmp folder in the aws lambda file system.</span>\n<span class=\"sd\">             (Default: ``3072``, Min: ``512``, Max: ``10240``).</span>\n<span class=\"sd\">        retention_time: Optional[int] The time (in days) the Lambda execution logs will be saved in AWS</span>\n<span class=\"sd\">            cloudwatch. After that, they will be deleted. (Default: ``30`` days)</span>\n<span class=\"sd\">        dryrun (bool): Whether to create the Function if it doesn&#39;t exist, or load the Function object as a dryrun.</span>\n<span class=\"sd\">            (Default: ``False``).</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        LambdaFunction: The resulting AWS Lambda Function object.</span>\n\n<span class=\"sd\">        .. note::</span>\n<span class=\"sd\">            When creating a Lambda function for the first time (not reloading it), a callable function is a mandatory</span>\n<span class=\"sd\">            argument.</span>\n\n<span class=\"sd\">    Examples:</span>\n<span class=\"sd\">        &gt;&gt;&gt; import runhouse as rh</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; # Pass in a callable function  when creating a Lambda</span>\n<span class=\"sd\">        &gt;&gt;&gt; def multiply(a, b):</span>\n<span class=\"sd\">        &gt;&gt;&gt;     return a * b</span>\n<span class=\"sd\">        &gt;&gt;&gt; multiply_lambda = rh.aws_lambda_fn(fn=multiply, name=&quot;lambdas_mult_func&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; mult_res = multiply_lambda(4, 5)  # returns &quot;20&quot;.</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; # Load function from above</span>\n<span class=\"sd\">        &gt;&gt;&gt; reloaded_function = rh.aws_lambda_fn(name=&quot;lambdas_mult_func&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; reloaded_function_res = reloaded_function(3, 4)  # returns &quot;12&quot;.</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># TODO: [SB] in the next phase, maybe add the option to create func from git.</span>\n    <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"nb\">any</span><span class=\"p\">([</span><span class=\"n\">runtime</span><span class=\"p\">,</span> <span class=\"n\">fn</span><span class=\"p\">]):</span>\n        <span class=\"c1\"># Try reloading existing function</span>\n        <span class=\"k\">return</span> <span class=\"n\">LambdaFunction</span><span class=\"o\">.</span><span class=\"n\">from_name</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">fn</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">fn</span><span class=\"p\">,</span> <span class=\"n\">Callable</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;Please provide a callable function OR use from_handler_file method&quot;</span>\n            <span class=\"o\">+</span> <span class=\"s2\">&quot;in order to create a Lambda function.&quot;</span>\n        <span class=\"p\">)</span>\n    <span class=\"c1\"># Env setup.</span>\n    <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">LambdaFunction</span><span class=\"o\">.</span><span class=\"n\">_validate_and_create_env</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># extract function pointers, path to code and arg names from callable function.</span>\n    <span class=\"n\">handler_function_name</span> <span class=\"o\">=</span> <span class=\"n\">fn</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n    <span class=\"n\">fn_pointers</span> <span class=\"o\">=</span> <span class=\"n\">Function</span><span class=\"o\">.</span><span class=\"n\">_extract_pointers</span><span class=\"p\">(</span><span class=\"n\">fn</span><span class=\"p\">,</span> <span class=\"n\">reqs</span><span class=\"o\">=</span><span class=\"p\">[]</span> <span class=\"k\">if</span> <span class=\"n\">env</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"k\">else</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">reqs</span><span class=\"p\">)</span>\n    <span class=\"n\">paths_to_code</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">Function</span><span class=\"o\">.</span><span class=\"n\">_extract_module_path</span><span class=\"p\">(</span><span class=\"n\">fn</span><span class=\"p\">)]</span>\n    <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">fn</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n\n    <span class=\"c1\"># ------- arguments validation -------</span>\n    <span class=\"p\">(</span>\n        <span class=\"n\">paths_to_code</span><span class=\"p\">,</span>\n        <span class=\"n\">env</span><span class=\"p\">,</span>\n        <span class=\"n\">runtime</span><span class=\"p\">,</span>\n        <span class=\"n\">timeout</span><span class=\"p\">,</span>\n        <span class=\"n\">memory_size</span><span class=\"p\">,</span>\n        <span class=\"n\">tmp_size</span><span class=\"p\">,</span>\n        <span class=\"n\">retention_time</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">LambdaFunction</span><span class=\"o\">.</span><span class=\"n\">arguments_validation</span><span class=\"p\">(</span>\n        <span class=\"n\">paths_to_code</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"n\">runtime</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"p\">,</span> <span class=\"n\">memory_size</span><span class=\"p\">,</span> <span class=\"n\">tmp_size</span><span class=\"p\">,</span> <span class=\"n\">retention_time</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">new_function</span> <span class=\"o\">=</span> <span class=\"n\">LambdaFunction</span><span class=\"p\">(</span>\n        <span class=\"n\">fn_pointers</span><span class=\"o\">=</span><span class=\"n\">fn_pointers</span><span class=\"p\">,</span>\n        <span class=\"n\">paths_to_code</span><span class=\"o\">=</span><span class=\"n\">paths_to_code</span><span class=\"p\">,</span>\n        <span class=\"n\">handler_function_name</span><span class=\"o\">=</span><span class=\"n\">handler_function_name</span><span class=\"p\">,</span>\n        <span class=\"n\">runtime</span><span class=\"o\">=</span><span class=\"n\">runtime</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span>\n        <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"n\">env</span><span class=\"p\">,</span>\n        <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">,</span>\n        <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"n\">timeout</span><span class=\"p\">,</span>\n        <span class=\"n\">memory_size</span><span class=\"o\">=</span><span class=\"n\">memory_size</span><span class=\"p\">,</span>\n        <span class=\"n\">tmp_size</span><span class=\"o\">=</span><span class=\"n\">tmp_size</span><span class=\"p\">,</span>\n        <span class=\"n\">retention_time</span><span class=\"o\">=</span><span class=\"n\">retention_time</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">dryrun</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">new_function</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">new_function</span><span class=\"o\">.</span><span class=\"n\">deploy</span><span class=\"p\">()</span></div>\n</pre></div>", "current_page_name": "_modules/runhouse/resources/functions/aws_lambda_factory", "sidebars": ["about.html", "navigation.html", "relations.html", "searchbox.html", "donate.html"], "customsidebar": null, "alabaster_version": "0.7.16", "alabaster_version_info": [0, 7, 16]}