{"parents": [{"link": "../../../../", "title": "Module code"}], "title": "runhouse.resources.functions.aws_lambda", "body": "<h1>Source code for runhouse.resources.functions.aws_lambda</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">base64</span>\n<span class=\"kn\">import</span> <span class=\"nn\">contextlib</span>\n<span class=\"kn\">import</span> <span class=\"nn\">copy</span>\n<span class=\"kn\">import</span> <span class=\"nn\">importlib</span>\n<span class=\"kn\">import</span> <span class=\"nn\">inspect</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">warnings</span>\n<span class=\"kn\">import</span> <span class=\"nn\">zipfile</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Optional</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">boto3</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">botocore.exceptions</span>\n<span class=\"k\">except</span> <span class=\"ne\">ImportError</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.globals</span> <span class=\"kn\">import</span> <span class=\"n\">rns_client</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.envs</span> <span class=\"kn\">import</span> <span class=\"n\">_get_env_from</span><span class=\"p\">,</span> <span class=\"n\">Env</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.functions.function</span> <span class=\"kn\">import</span> <span class=\"n\">Function</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"n\">CRED_PATH</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">Path</span><span class=\"o\">.</span><span class=\"n\">home</span><span class=\"p\">()</span><span class=\"si\">}</span><span class=\"s2\">/.aws/credentials&quot;</span>\n<span class=\"n\">LOG_GROUP_PREFIX</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;/aws/lambda/&quot;</span>\n\n\n<div class=\"viewcode-block\" id=\"LambdaFunction\"><a class=\"viewcode-back\" href=\"../../../../../api/python/function/#runhouse.LambdaFunction\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">LambdaFunction</span><span class=\"p\">(</span><span class=\"n\">Function</span><span class=\"p\">):</span>\n    <span class=\"n\">RESOURCE_TYPE</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;lambda_function&quot;</span>\n    <span class=\"n\">DEFAULT_ACCESS</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;write&quot;</span>\n    <span class=\"n\">DEFAULT_ROLE_POLICIES</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"s2\">&quot;cloudwatch:*&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;lambda:Invoke&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;lambda:InvokeAsync&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;lambda:InvokeFunction&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;lambda:PublishVersion&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;logs:*&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;s3:DeleteObject&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;s3:GetObject&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;s3:ListBucket&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;s3:PutObject&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;kms:Decrypt&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">MAX_WAIT_TIME</span> <span class=\"o\">=</span> <span class=\"mi\">60</span>  <span class=\"c1\"># seconds, max time that can pass before we raise an exception that AWS update takes too long.</span>\n    <span class=\"n\">DEFAULT_REGION</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;us-east-1&quot;</span>\n    <span class=\"n\">DEFAULT_RETENTION</span> <span class=\"o\">=</span> <span class=\"mi\">30</span>  <span class=\"c1\"># one month, for lambdas log groups.</span>\n    <span class=\"n\">DEFAULT_TIMEOUT</span> <span class=\"o\">=</span> <span class=\"mi\">900</span>  <span class=\"c1\"># sec. meaning 15 min.</span>\n    <span class=\"n\">DEFAULT_MEMORY_SIZE</span> <span class=\"o\">=</span> <span class=\"mi\">10240</span>  <span class=\"c1\"># MB</span>\n    <span class=\"n\">DEFAULT_TMP_SIZE</span> <span class=\"o\">=</span> <span class=\"mi\">10240</span>  <span class=\"c1\"># MB, meaning 10G</span>\n    <span class=\"n\">HOME_DIR</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;/tmp/home&quot;</span>\n    <span class=\"n\">SUPPORTED_RUNTIMES</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"s2\">&quot;python3.7&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;python3.8&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;python3.9&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;python3.10&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;python3.11&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">DEFAULT_PY_VERSION</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;python3.9&quot;</span>\n\n<div class=\"viewcode-block\" id=\"LambdaFunction.__init__\"><a class=\"viewcode-back\" href=\"../../../../../api/python/function/#runhouse.LambdaFunction.__init__\">[docs]</a>    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">paths_to_code</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span>\n        <span class=\"n\">handler_function_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n        <span class=\"n\">runtime</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n        <span class=\"n\">fn_pointers</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n        <span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">Env</span><span class=\"p\">,</span>\n        <span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span>  <span class=\"c1\"># seconds</span>\n        <span class=\"n\">memory_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span>  <span class=\"c1\"># MB</span>\n        <span class=\"n\">tmp_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span>  <span class=\"c1\"># MB</span>\n        <span class=\"n\">retention_time</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"n\">DEFAULT_RETENTION</span><span class=\"p\">,</span>  <span class=\"c1\"># days</span>\n        <span class=\"n\">dryrun</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">access</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>  <span class=\"c1\"># We have this here to ignore extra arguments when calling from from_config</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Runhouse AWS Lambda object. It is comprised of the entry point, configuration,</span>\n<span class=\"sd\">        and dependencies necessary to run the service on AWS infra.</span>\n\n<span class=\"sd\">        .. note::</span>\n<span class=\"sd\">                To create an AWS lambda resource, please use the factory method :func:`aws_lambda_fn`.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span>\n            <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">,</span>\n            <span class=\"n\">system</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">RESOURCE_TYPE</span><span class=\"p\">,</span>\n            <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"n\">env</span><span class=\"p\">,</span>\n            <span class=\"n\">fn_pointers</span><span class=\"o\">=</span><span class=\"n\">fn_pointers</span><span class=\"p\">,</span>\n            <span class=\"n\">access</span><span class=\"o\">=</span><span class=\"n\">access</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_ACCESS</span><span class=\"p\">,</span>\n            <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">local_path_to_code</span> <span class=\"o\">=</span> <span class=\"n\">paths_to_code</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">handler_function_name</span> <span class=\"o\">=</span> <span class=\"n\">handler_function_name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">runtime</span> <span class=\"o\">=</span> <span class=\"n\">runtime</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">timeout</span> <span class=\"o\">=</span> <span class=\"n\">timeout</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">memory_size</span> <span class=\"o\">=</span> <span class=\"n\">memory_size</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tmp_size</span> <span class=\"o\">=</span> <span class=\"n\">tmp_size</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">aws_lambda_config</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"kc\">None</span>  <span class=\"c1\"># Lambda config and role arn from aws will be saved here</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">retention_time</span> <span class=\"o\">=</span> <span class=\"n\">retention_time</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">args_names</span> <span class=\"o\">=</span> <span class=\"n\">LambdaFunction</span><span class=\"o\">.</span><span class=\"n\">extract_args_from_file</span><span class=\"p\">(</span>\n            <span class=\"n\">paths_to_code</span><span class=\"p\">,</span> <span class=\"n\">handler_function_name</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"c1\"># set-up in order to prevent read timeout during lambda invocations</span>\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">botocore</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">Config</span><span class=\"p\">(</span><span class=\"n\">read_timeout</span><span class=\"o\">=</span><span class=\"mi\">900</span><span class=\"p\">,</span> <span class=\"n\">connect_timeout</span><span class=\"o\">=</span><span class=\"mi\">900</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># will be used for reloading shared functions from other regions.</span>\n        <span class=\"n\">function_arn</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;function_arn&quot;</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"s2\">&quot;function_arn&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span> <span class=\"k\">else</span> <span class=\"kc\">None</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">function_arn</span><span class=\"p\">:</span>\n            <span class=\"n\">region</span> <span class=\"o\">=</span> <span class=\"n\">function_arn</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;:&quot;</span><span class=\"p\">)[</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lambda_client</span> <span class=\"o\">=</span> <span class=\"n\">boto3</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;lambda&quot;</span><span class=\"p\">,</span> <span class=\"n\">region_name</span><span class=\"o\">=</span><span class=\"n\">region</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">config</span>\n            <span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logs_client</span> <span class=\"o\">=</span> <span class=\"n\">boto3</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"p\">(</span><span class=\"s2\">&quot;logs&quot;</span><span class=\"p\">,</span> <span class=\"n\">region_name</span><span class=\"o\">=</span><span class=\"n\">region</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">CRED_PATH</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">is_file</span><span class=\"p\">():</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lambda_client</span> <span class=\"o\">=</span> <span class=\"n\">boto3</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"p\">(</span><span class=\"s2\">&quot;lambda&quot;</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logs_client</span> <span class=\"o\">=</span> <span class=\"n\">boto3</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"p\">(</span><span class=\"s2\">&quot;logs&quot;</span><span class=\"p\">)</span>\n\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lambda_client</span> <span class=\"o\">=</span> <span class=\"n\">boto3</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;lambda&quot;</span><span class=\"p\">,</span> <span class=\"n\">region_name</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_REGION</span>\n                <span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logs_client</span> <span class=\"o\">=</span> <span class=\"n\">boto3</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"p\">(</span><span class=\"s2\">&quot;logs&quot;</span><span class=\"p\">,</span> <span class=\"n\">region_name</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_REGION</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">iam_client</span> <span class=\"o\">=</span> <span class=\"n\">boto3</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"p\">(</span><span class=\"s2\">&quot;iam&quot;</span><span class=\"p\">)</span></div>\n\n    <span class=\"c1\"># --------------------------------------</span>\n    <span class=\"c1\"># Constructor helper methods</span>\n    <span class=\"c1\"># --------------------------------------</span>\n\n<div class=\"viewcode-block\" id=\"LambdaFunction.from_config\"><a class=\"viewcode-back\" href=\"../../../../../api/python/function/#runhouse.LambdaFunction.from_config\">[docs]</a>    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_config</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Create an AWS Lambda object from a config dictionary.&quot;&quot;&quot;</span>\n\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;resource_subtype&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">():</span>\n            <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;resource_subtype&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;system&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">():</span>\n            <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;system&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"n\">keys</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;fn_pointers&quot;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">keys</span><span class=\"p\">:</span>\n            <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;fn_pointers&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;timeout&quot;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">keys</span><span class=\"p\">:</span>\n            <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;timeout&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">LambdaFunction</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_TIMEOUT</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;memory_size&quot;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">keys</span><span class=\"p\">:</span>\n            <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;memory_size&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">LambdaFunction</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_MEMORY_SIZE</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;env&quot;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">keys</span><span class=\"p\">:</span>\n            <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;env&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Env</span><span class=\"p\">(</span>\n                <span class=\"n\">reqs</span><span class=\"o\">=</span><span class=\"p\">[],</span>\n                <span class=\"n\">env_vars</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;HOME&quot;</span><span class=\"p\">:</span> <span class=\"n\">LambdaFunction</span><span class=\"o\">.</span><span class=\"n\">HOME_DIR</span><span class=\"p\">},</span>\n                <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">Env</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_NAME</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;env&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Env</span><span class=\"o\">.</span><span class=\"n\">from_config</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;env&quot;</span><span class=\"p\">])</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">LambdaFunction</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">deploy</span><span class=\"p\">()</span></div>\n\n<div class=\"viewcode-block\" id=\"LambdaFunction.from_name\"><a class=\"viewcode-back\" href=\"../../../../../api/python/function/#runhouse.LambdaFunction.from_name\">[docs]</a>    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_name</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">alt_options</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">load_config</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">config</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Could not find a Lambda called </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">from_config</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"LambdaFunction.from_handler_file\"><a class=\"viewcode-back\" href=\"../../../../../api/python/function/#runhouse.LambdaFunction.from_handler_file\">[docs]</a>    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_handler_file</span><span class=\"p\">(</span>\n        <span class=\"bp\">cls</span><span class=\"p\">,</span>\n        <span class=\"n\">paths_to_code</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span>\n        <span class=\"n\">handler_function_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span> <span class=\"ow\">or</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"ow\">or</span> <span class=\"n\">Env</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">runtime</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">memory_size</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">tmp_size</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">retention_time</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">dryrun</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Creates an AWS Lambda function from a Python file.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            paths_to_code: (Optional[List[str]]): List of the FULL paths to the Python code file(s) that should be</span>\n<span class=\"sd\">                sent to AWS Lambda. First path in the list should be the path to the handler file which contains</span>\n<span class=\"sd\">                the main (handler) function. If ``fn`` is provided, this argument is ignored.</span>\n<span class=\"sd\">            handler_function_name: (Optional[str]): The name of the function in the handler file that will be executed</span>\n<span class=\"sd\">                by the Lambda. If ``fn`` is provided, this argument is ignored.</span>\n<span class=\"sd\">            runtime: (Optional[str]): The coding language of the function. Should be one of the following:</span>\n<span class=\"sd\">                python3.7, python3.8, python3.9, python3.10, python3.11. (Default: ``python3.9``)</span>\n<span class=\"sd\">            name (Optional[str]): Name of the Lambda Function to create or retrieve.</span>\n<span class=\"sd\">                This can be either from a local config or from the RNS.</span>\n<span class=\"sd\">            env (Optional[Dict or List[str] or Env]): Specifies the requirements that will be installed, and the</span>\n<span class=\"sd\">                environment vars that should be attached to the Lambda. Accepts three possible types:</span>\n\n<span class=\"sd\">                1. A dict which should contain the following keys:</span>\n\n<span class=\"sd\">                    reqs: a list of the python libraries, to be installed by the Lambda, or just a</span>\n<span class=\"sd\">                    ``requirements.txt``string.</span>\n\n<span class=\"sd\">                    env_vars: dictionary containing the env_vars that will be a part of the lambda configuration.</span>\n\n<span class=\"sd\">                2. A list of strings, containing all the required python packages.</span>\n\n<span class=\"sd\">                3. An instance of Runhouse Env class. By default, ``runhouse`` package will be installed, and env_vars</span>\n<span class=\"sd\">                   will include ``{HOME: /tmp/home}``.</span>\n\n<span class=\"sd\">            timeout: Optional[int]: The maximum amount of time (in seconds) during which the Lambda will run in AWS</span>\n<span class=\"sd\">                without timing-out. (Default: ``900``, Min: ``3``, Max: ``900``)</span>\n<span class=\"sd\">            memory_size: Optional[int], The amount of memory (in MB) to be allocated to the Lambda.</span>\n<span class=\"sd\">                (Default: ``10240``, Min: ``128``, Max: ``10240``)</span>\n<span class=\"sd\">            tmp_size: Optional[int], This size of the /tmp folder in the aws lambda file system.</span>\n<span class=\"sd\">                (Default: ``10240``, Min: ``512``, Max: ``10240``).</span>\n<span class=\"sd\">            retention_time: Optional[int] The time (in days) the Lambda execution logs will be saved in AWS</span>\n<span class=\"sd\">                cloudwatch. After that, they will be deleted. (Default: ``30`` days)</span>\n<span class=\"sd\">            dryrun (bool): Whether to create the Function if it doesn&#39;t exist, or load the Function object as a dryrun.</span>\n<span class=\"sd\">                (Default: ``False``).</span>\n\n<span class=\"sd\">        Returns:</span>\n<span class=\"sd\">            LambdaFunction: The resulting AWS Lambda Function object.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # handler_file.py</span>\n<span class=\"sd\">            &gt;&gt;&gt; def summer(a, b):</span>\n<span class=\"sd\">            &gt;&gt;&gt;    return a + b</span>\n\n<span class=\"sd\">            &gt;&gt;&gt; # your &#39;main&#39; python file, where you are using runhouse</span>\n<span class=\"sd\">            &gt;&gt;&gt; summer_lambda = rh.LambdaFunction.from_handler_file(</span>\n<span class=\"sd\">            &gt;&gt;&gt;                     paths_to_code=[&#39;/full/path/to/handler_file.py&#39;],</span>\n<span class=\"sd\">            &gt;&gt;&gt;                     handler_function_name = &#39;summer&#39;,</span>\n<span class=\"sd\">            &gt;&gt;&gt;                     runtime = &#39;python3.9&#39;,</span>\n<span class=\"sd\">            &gt;&gt;&gt;                     name=&quot;my_func&quot;).save()</span>\n\n<span class=\"sd\">            &gt;&gt;&gt; # invoking the function</span>\n<span class=\"sd\">            &gt;&gt;&gt; summer_res = summer_lambda(5, 8)  # returns 13.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">handler_function_name</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;.&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">LambdaFunction</span><span class=\"o\">.</span><span class=\"n\">_validate_and_create_env</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span>\n            <span class=\"n\">paths_to_code</span><span class=\"p\">,</span>\n            <span class=\"n\">env</span><span class=\"p\">,</span>\n            <span class=\"n\">runtime</span><span class=\"p\">,</span>\n            <span class=\"n\">timeout</span><span class=\"p\">,</span>\n            <span class=\"n\">memory_size</span><span class=\"p\">,</span>\n            <span class=\"n\">tmp_size</span><span class=\"p\">,</span>\n            <span class=\"n\">retention_time</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">LambdaFunction</span><span class=\"o\">.</span><span class=\"n\">arguments_validation</span><span class=\"p\">(</span>\n            <span class=\"n\">paths_to_code</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"n\">runtime</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"p\">,</span> <span class=\"n\">memory_size</span><span class=\"p\">,</span> <span class=\"n\">tmp_size</span><span class=\"p\">,</span> <span class=\"n\">retention_time</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">new_function</span> <span class=\"o\">=</span> <span class=\"n\">LambdaFunction</span><span class=\"p\">(</span>\n            <span class=\"n\">fn_pointers</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"n\">paths_to_code</span><span class=\"o\">=</span><span class=\"n\">paths_to_code</span><span class=\"p\">,</span>\n            <span class=\"n\">handler_function_name</span><span class=\"o\">=</span><span class=\"n\">handler_function_name</span><span class=\"p\">,</span>\n            <span class=\"n\">runtime</span><span class=\"o\">=</span><span class=\"n\">runtime</span><span class=\"p\">,</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span>\n            <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"n\">env</span><span class=\"p\">,</span>\n            <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">,</span>\n            <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"n\">timeout</span><span class=\"p\">,</span>\n            <span class=\"n\">memory_size</span><span class=\"o\">=</span><span class=\"n\">memory_size</span><span class=\"p\">,</span>\n            <span class=\"n\">tmp_size</span><span class=\"o\">=</span><span class=\"n\">tmp_size</span><span class=\"p\">,</span>\n            <span class=\"n\">retention_time</span><span class=\"o\">=</span><span class=\"n\">retention_time</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">dryrun</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">new_function</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">new_function</span><span class=\"o\">.</span><span class=\"n\">deploy</span><span class=\"p\">()</span></div>\n\n    <span class=\"c1\"># --------------------------------------</span>\n    <span class=\"c1\"># Private helping methods</span>\n    <span class=\"c1\"># --------------------------------------</span>\n\n    <span class=\"c1\"># Arguments validation and arguments creation methods</span>\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_validate_and_create_env</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Env</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Validates the passed env argument, and creates a Runhouse env instance if needed.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            env (Optional[Env]): The environment to validate and create.</span>\n\n<span class=\"sd\">        Returns:</span>\n<span class=\"sd\">            Env: a Runhouse env object</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">env</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"n\">Env</span><span class=\"p\">):</span>\n            <span class=\"n\">original_env</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">original_env</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"s2\">&quot;env_vars&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">original_env</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">():</span>\n                <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">_get_env_from</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">[</span><span class=\"s2\">&quot;reqs&quot;</span><span class=\"p\">])</span> <span class=\"ow\">or</span> <span class=\"n\">Env</span><span class=\"p\">(</span>\n                    <span class=\"n\">working_dir</span><span class=\"o\">=</span><span class=\"s2\">&quot;./&quot;</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">Env</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_NAME</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">original_env</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n                <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">_get_env_from</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">_get_env_from</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">Env</span><span class=\"p\">(</span><span class=\"n\">working_dir</span><span class=\"o\">=</span><span class=\"s2\">&quot;./&quot;</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">Env</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_NAME</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">env</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">Env</span><span class=\"p\">(</span>\n                <span class=\"n\">reqs</span><span class=\"o\">=</span><span class=\"p\">[],</span>\n                <span class=\"n\">env_vars</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;HOME&quot;</span><span class=\"p\">:</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">HOME_DIR</span><span class=\"p\">},</span>\n                <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">Env</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_NAME</span><span class=\"p\">,</span>\n                <span class=\"n\">working_dir</span><span class=\"o\">=</span><span class=\"s2\">&quot;./&quot;</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"n\">Env</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"s2\">&quot;HOME&quot;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">env_vars</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">():</span>\n            <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">env_vars</span><span class=\"p\">[</span><span class=\"s2\">&quot;HOME&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">HOME_DIR</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">env</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">extract_args_from_file</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">paths_to_code</span><span class=\"p\">,</span> <span class=\"n\">handler_function_name</span><span class=\"p\">):</span>\n        <span class=\"n\">file_path</span> <span class=\"o\">=</span> <span class=\"n\">paths_to_code</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">file_path</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;/&quot;</span><span class=\"p\">)[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;.&quot;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n        <span class=\"n\">spec</span> <span class=\"o\">=</span> <span class=\"n\">importlib</span><span class=\"o\">.</span><span class=\"n\">util</span><span class=\"o\">.</span><span class=\"n\">spec_from_file_location</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">file_path</span><span class=\"p\">)</span>\n        <span class=\"n\">module</span> <span class=\"o\">=</span> <span class=\"n\">importlib</span><span class=\"o\">.</span><span class=\"n\">util</span><span class=\"o\">.</span><span class=\"n\">module_from_spec</span><span class=\"p\">(</span><span class=\"n\">spec</span><span class=\"p\">)</span>\n        <span class=\"n\">spec</span><span class=\"o\">.</span><span class=\"n\">loader</span><span class=\"o\">.</span><span class=\"n\">exec_module</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Extract the function and its arguments</span>\n        <span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">,</span> <span class=\"n\">handler_function_name</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"n\">args_names</span> <span class=\"o\">=</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">getfullargspec</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">args</span>\n        <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n            <span class=\"sa\">f</span><span class=\"s2\">&quot;Arguments names were not provided. Extracted the following args names: </span><span class=\"si\">{</span><span class=\"n\">args_names</span><span class=\"si\">}</span><span class=\"s2\">.&quot;</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">args_names</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">arguments_validation</span><span class=\"p\">(</span>\n        <span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">paths_to_code</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"n\">runtime</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"p\">,</span> <span class=\"n\">memory_size</span><span class=\"p\">,</span> <span class=\"n\">tmp_size</span><span class=\"p\">,</span> <span class=\"n\">retention_time</span>\n    <span class=\"p\">):</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"s2\">&quot;requirements.txt&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">env</span><span class=\"p\">:</span>\n            <span class=\"n\">paths_to_code</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">absolute</span><span class=\"p\">())</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">runtime</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"n\">runtime</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">LambdaFunction</span><span class=\"o\">.</span><span class=\"n\">SUPPORTED_RUNTIMES</span><span class=\"p\">:</span>\n            <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">runtime</span><span class=\"si\">}</span><span class=\"s2\"> is not a supported by AWS Lambda. Setting runtime to python3.9.&quot;</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">runtime</span> <span class=\"o\">=</span> <span class=\"n\">LambdaFunction</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_PY_VERSION</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">timeout</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span><span class=\"s2\">&quot;Timeout set to 15 min.&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">timeout</span> <span class=\"o\">=</span> <span class=\"n\">LambdaFunction</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_TIMEOUT</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">reqs</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">reqs</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">timeout</span> <span class=\"o\">&lt;</span> <span class=\"mi\">600</span><span class=\"p\">:</span>\n                <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;Increasing the timeout to 600 sec, in order to enable the packages setup.&quot;</span>\n                <span class=\"p\">)</span>\n                <span class=\"n\">timeout</span> <span class=\"o\">=</span> <span class=\"mi\">600</span>\n            <span class=\"k\">if</span> <span class=\"n\">timeout</span> <span class=\"o\">&gt;</span> <span class=\"mi\">900</span><span class=\"p\">:</span>\n                <span class=\"n\">timeout</span> <span class=\"o\">=</span> <span class=\"mi\">900</span>\n                <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;Timeout can not be more then 900 sec, setting to 900 sec.&quot;</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">timeout</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span><span class=\"p\">:</span>\n                <span class=\"n\">timeout</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n                <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span><span class=\"s2\">&quot;Timeout can not be less then 3 sec, setting to 3 sec.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">memory_size</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span><span class=\"s2\">&quot;Memory size set to 10 GB.&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">memory_size</span> <span class=\"o\">=</span> <span class=\"n\">LambdaFunction</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_MEMORY_SIZE</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span>\n                <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">reqs</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">reqs</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>\n            <span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">memory_size</span> <span class=\"o\">&lt;</span> <span class=\"n\">LambdaFunction</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_MEMORY_SIZE</span><span class=\"p\">:</span>\n                <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;Increasing the memory size to 10240 MB, in order to enable the packages setup.&quot;</span>\n                <span class=\"p\">)</span>\n                <span class=\"n\">memory_size</span> <span class=\"o\">=</span> <span class=\"n\">LambdaFunction</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_MEMORY_SIZE</span>\n            <span class=\"k\">if</span> <span class=\"n\">memory_size</span> <span class=\"o\">&lt;</span> <span class=\"mi\">128</span><span class=\"p\">:</span>\n                <span class=\"n\">memory_size</span> <span class=\"o\">=</span> <span class=\"mi\">128</span>\n                <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;Memory size can not be less then 128 MB, setting to 128 MB.&quot;</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">memory_size</span> <span class=\"o\">&gt;</span> <span class=\"mi\">10240</span><span class=\"p\">:</span>\n                <span class=\"n\">memory_size</span> <span class=\"o\">=</span> <span class=\"mi\">10240</span>\n                <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;Memory size can not be more then 10240 MB, setting to 10240 MB.&quot;</span>\n                <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">tmp_size</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"n\">tmp_size</span> <span class=\"o\">&lt;</span> <span class=\"n\">LambdaFunction</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_TMP_SIZE</span><span class=\"p\">:</span>\n            <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Setting /tmp size to 10GB, in order to enable the packages setup.&quot;</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">tmp_size</span> <span class=\"o\">=</span> <span class=\"n\">LambdaFunction</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_TMP_SIZE</span>\n        <span class=\"k\">elif</span> <span class=\"n\">tmp_size</span> <span class=\"o\">&gt;</span> <span class=\"mi\">10240</span><span class=\"p\">:</span>\n            <span class=\"n\">tmp_size</span> <span class=\"o\">=</span> <span class=\"mi\">10240</span>\n            <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;/tmp size can not be more then 10240 MB, setting to 10240 MB.&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">retention_time</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">retention_time</span> <span class=\"o\">=</span> <span class=\"n\">LambdaFunction</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_RETENTION</span>\n\n        <span class=\"k\">return</span> <span class=\"p\">(</span>\n            <span class=\"n\">paths_to_code</span><span class=\"p\">,</span>\n            <span class=\"n\">env</span><span class=\"p\">,</span>\n            <span class=\"n\">runtime</span><span class=\"p\">,</span>\n            <span class=\"n\">timeout</span><span class=\"p\">,</span>\n            <span class=\"n\">memory_size</span><span class=\"p\">,</span>\n            <span class=\"n\">tmp_size</span><span class=\"p\">,</span>\n            <span class=\"n\">retention_time</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_lambda_exist</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Checks if a Lambda with the name given during init is already exists in AWS&quot;&quot;&quot;</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">aws_lambda</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lambda_client</span><span class=\"o\">.</span><span class=\"n\">get_function</span><span class=\"p\">(</span><span class=\"n\">FunctionName</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">aws_lambda</span>\n        <span class=\"k\">except</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lambda_client</span><span class=\"o\">.</span><span class=\"n\">exceptions</span><span class=\"o\">.</span><span class=\"n\">ResourceNotFoundException</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"nd\">@contextlib</span><span class=\"o\">.</span><span class=\"n\">contextmanager</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_wait_until_lambda_update_is_finished</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Verifies that a running update of the function (in AWS) is finished (so the next one could be executed)&quot;&quot;&quot;</span>\n\n        <span class=\"n\">time_passed</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>  <span class=\"c1\"># seconds</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lambda_client</span><span class=\"o\">.</span><span class=\"n\">get_function</span><span class=\"p\">(</span><span class=\"n\">FunctionName</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s2\">&quot;Configuration&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;State&quot;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Active&quot;</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">last_update_status</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                <span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s2\">&quot;Configuration&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;LastUpdateStatus&quot;</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;InProgress&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n            <span class=\"n\">last_update_status</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">state</span> <span class=\"ow\">and</span> <span class=\"n\">last_update_status</span><span class=\"p\">:</span>\n                <span class=\"k\">break</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">time_passed</span> <span class=\"o\">&gt;</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">MAX_WAIT_TIME</span><span class=\"p\">:</span>\n                    <span class=\"k\">raise</span> <span class=\"ne\">TimeoutError</span><span class=\"p\">(</span>\n                        <span class=\"sa\">f</span><span class=\"s2\">&quot;Lambda function called </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\"> is being deployed in AWS for too long. &quot;</span>\n                        <span class=\"o\">+</span> <span class=\"s2\">&quot; Please check the resource in AWS console, delete relevant resource(s) &quot;</span>\n                        <span class=\"o\">+</span> <span class=\"s2\">&quot;if necessary, and re-run your Runhouse code.&quot;</span>\n                    <span class=\"p\">)</span>\n                <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n                <span class=\"n\">time_passed</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lambda_client</span><span class=\"o\">.</span><span class=\"n\">get_function</span><span class=\"p\">(</span><span class=\"n\">FunctionName</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">)</span>\n                <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s2\">&quot;Configuration&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;State&quot;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Active&quot;</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"n\">last_update_status</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                        <span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s2\">&quot;Configuration&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;LastUpdateStatus&quot;</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;InProgress&quot;</span>\n                    <span class=\"p\">)</span>\n                <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n                    <span class=\"n\">last_update_status</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">yield</span> <span class=\"kc\">True</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_rh_wrapper</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Creates a runhouse wrapper to the handler function&quot;&quot;&quot;</span>\n        <span class=\"n\">handler_path</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">local_path_to_code</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">wrapper_path</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">handler_path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">parent</span> <span class=\"o\">/</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;rh_handler_</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">.py&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">handler_name</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">handler_path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">stem</span>\n        <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">handler_path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">touch</span><span class=\"p\">()</span>\n\n        <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">wrapper_path</span><span class=\"p\">,</span> <span class=\"s2\">&quot;w&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s2\">&quot;import subprocess</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"s2\">&quot;import sys</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"s2\">&quot;import os</span><span class=\"se\">\\n\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s2\">&quot;def lambda_handler(event, context):</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"se\">\\t</span><span class=\"s2\">if not os.path.isdir(&#39;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">HOME_DIR</span><span class=\"si\">}</span><span class=\"s2\">&#39;):</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"se\">\\t\\t</span><span class=\"s2\">os.mkdir(&#39;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">HOME_DIR</span><span class=\"si\">}</span><span class=\"s2\">&#39;)</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># adding code for installing python libraries</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;</span><span class=\"se\">\\t</span><span class=\"s2\">subprocess.call([&#39;pip&#39;, &#39;install&#39;, &#39;-r&#39;, &#39;requirements.txt&#39;,&quot;</span>\n                <span class=\"o\">+</span> <span class=\"s2\">&quot; &#39;--ignore-installed&#39;, &#39;-t&#39;, &#39;</span><span class=\"si\">{self.HOME_DIR}</span><span class=\"s2\">/&#39;])</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"se\">\\t</span><span class=\"s2\">if not os.path.isdir(&#39;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">HOME_DIR</span><span class=\"si\">}</span><span class=\"s2\">/runhouse&#39;):</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"se\">\\t\\t</span><span class=\"s2\">subprocess.call([&#39;pip&#39;, &#39;install&#39;, &#39;runhouse&#39;, &#39;-t&#39;, &#39;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">HOME_DIR</span><span class=\"si\">}</span><span class=\"s2\">/&#39;])</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"se\">\\t</span><span class=\"s2\">sys.path.insert(1, &#39;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">HOME_DIR</span><span class=\"si\">}</span><span class=\"s2\">/&#39;)</span><span class=\"se\">\\n\\n</span><span class=\"s2\">&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">reqs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">reqs</span>\n            <span class=\"k\">if</span> <span class=\"s2\">&quot;runhouse&quot;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">reqs</span><span class=\"p\">:</span>\n                <span class=\"n\">reqs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;runhouse&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"s2\">&quot;./&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">reqs</span><span class=\"p\">:</span>\n                <span class=\"n\">reqs</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"s2\">&quot;./&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">req</span> <span class=\"ow\">in</span> <span class=\"n\">reqs</span><span class=\"p\">:</span>\n                <span class=\"n\">req</span> <span class=\"o\">=</span> <span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()</span>\n                <span class=\"n\">dir_name</span> <span class=\"o\">=</span> <span class=\"n\">req</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                    <span class=\"n\">req</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"s2\">&quot;&#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;, &quot;</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"n\">req</span><span class=\"p\">)[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">req</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;&#39;</span><span class=\"si\">{</span><span class=\"n\">req</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">&#39;,&quot;</span>\n                <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"se\">\\t</span><span class=\"s2\">if not os.path.isdir(&#39;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">HOME_DIR</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">{</span><span class=\"n\">dir_name</span><span class=\"si\">}</span><span class=\"s2\">&#39;):</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"se\">\\t\\t</span><span class=\"s2\">subprocess.call([&#39;pip&#39;, &#39;install&#39;, </span><span class=\"si\">{</span><span class=\"n\">req</span><span class=\"si\">}</span><span class=\"s2\"> &#39;-t&#39;, &#39;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">HOME_DIR</span><span class=\"si\">}</span><span class=\"s2\">/&#39;])</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">reqs</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">reqs</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"se\">\\t</span><span class=\"s2\">sys.path.insert(1, &#39;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">HOME_DIR</span><span class=\"si\">}</span><span class=\"s2\">/&#39;)</span><span class=\"se\">\\n\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;</span><span class=\"se\">\\t</span><span class=\"s2\">import runhouse</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span>\n            <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"se\">\\t</span><span class=\"s2\">from </span><span class=\"si\">{</span><span class=\"n\">handler_name</span><span class=\"si\">}</span><span class=\"s2\"> import </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">handler_function_name</span><span class=\"si\">}</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span>\n            <span class=\"s2\">&quot;</span><span class=\"se\">\\t</span><span class=\"s2\">return {</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span>\n            <span class=\"s2\">&quot;</span><span class=\"se\">\\t\\t</span><span class=\"s2\">&#39;status_code&#39;: 200,</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span>\n            <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"se\">\\t\\t</span><span class=\"s2\">&#39;body&#39;: </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">handler_function_name</span><span class=\"si\">}</span><span class=\"s2\">(**event)</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span>\n            <span class=\"s2\">&quot;</span><span class=\"se\">\\t</span><span class=\"s2\">}&quot;</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">wrapper_path</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_supported_python_libs</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Returns a list of the supported python libs by the AWS Lambda resource&quot;&quot;&quot;</span>\n        <span class=\"c1\"># TODO [SB]: think what is the better implementation: via website, or AWS lambda. For now it is hard-coded.</span>\n        <span class=\"n\">supported_libs</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;urllib3&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;six&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;simplejson&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;s3transfer&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;python-dateutil&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;jmespath&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;botocore&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;boto3&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;awslambdaric&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;setuptools&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;pip&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">]</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">supported_libs</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_update_lambda_config</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">env_vars</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Updates existing Lambda in AWS (config) that was provided in the init.&quot;&quot;&quot;</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Updating a Lambda called </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">lambda_config</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lambda_client</span><span class=\"o\">.</span><span class=\"n\">update_function_configuration</span><span class=\"p\">(</span>\n            <span class=\"n\">FunctionName</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n            <span class=\"n\">Runtime</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">runtime</span><span class=\"p\">,</span>\n            <span class=\"n\">Timeout</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">timeout</span><span class=\"p\">,</span>\n            <span class=\"n\">MemorySize</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">memory_size</span><span class=\"p\">,</span>\n            <span class=\"n\">Environment</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;Variables&quot;</span><span class=\"p\">:</span> <span class=\"n\">env_vars</span><span class=\"p\">},</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"c1\"># TODO [SB]: in the next phase, enable for other to update the Lambda code.</span>\n        <span class=\"c1\"># wait for the config update process to finish, and then update the code (Lambda logic).</span>\n        <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_wait_until_lambda_update_is_finished</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">):</span>\n            <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">local_path_to_code</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">absolute</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;/&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"n\">path_e</span> <span class=\"k\">for</span> <span class=\"n\">path_e</span> <span class=\"ow\">in</span> <span class=\"n\">path</span><span class=\"p\">]</span>\n            <span class=\"n\">path</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n            <span class=\"n\">zip_file_name</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"s1\">&#39;&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">_code_files.zip&quot;</span>\n            <span class=\"n\">zf</span> <span class=\"o\">=</span> <span class=\"n\">zipfile</span><span class=\"o\">.</span><span class=\"n\">ZipFile</span><span class=\"p\">(</span><span class=\"n\">zip_file_name</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s2\">&quot;w&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"k\">for</span> <span class=\"n\">file_name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">local_path_to_code</span><span class=\"p\">:</span>\n                    <span class=\"n\">zf</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">file_name</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">file_name</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">))</span>\n\n            <span class=\"k\">except</span> <span class=\"ne\">FileNotFoundError</span><span class=\"p\">:</span>\n                <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Could not find </span><span class=\"si\">{</span><span class=\"ne\">FileNotFoundError</span><span class=\"o\">.</span><span class=\"n\">filename</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">finally</span><span class=\"p\">:</span>\n                <span class=\"n\">zf</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n            <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">zip_file_name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;rb&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n                <span class=\"n\">zipped_code</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n\n            <span class=\"n\">lambda_config</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lambda_client</span><span class=\"o\">.</span><span class=\"n\">update_function_code</span><span class=\"p\">(</span>\n                <span class=\"n\">FunctionName</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">ZipFile</span><span class=\"o\">=</span><span class=\"n\">zipped_code</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">&#39;</span><span class=\"si\">{</span><span class=\"n\">lambda_config</span><span class=\"p\">[</span><span class=\"s2\">&quot;FunctionName&quot;</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s1\"> was updated successfully.&#39;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">lambda_config</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_deploy_lambda_to_aws_helper</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">role_res</span><span class=\"p\">,</span> <span class=\"n\">zipped_code</span><span class=\"p\">,</span> <span class=\"n\">env_vars</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Deploying new lambda to AWS helping function&quot;&quot;&quot;</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">lambda_config</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lambda_client</span><span class=\"o\">.</span><span class=\"n\">create_function</span><span class=\"p\">(</span>\n                <span class=\"n\">FunctionName</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n                <span class=\"n\">Runtime</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">runtime</span><span class=\"p\">,</span>\n                <span class=\"n\">Role</span><span class=\"o\">=</span><span class=\"n\">role_res</span><span class=\"p\">[</span><span class=\"s2\">&quot;Role&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Arn&quot;</span><span class=\"p\">],</span>\n                <span class=\"n\">Handler</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s2\">&quot;rh_handler_</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">.lambda_handler&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">Code</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;ZipFile&quot;</span><span class=\"p\">:</span> <span class=\"n\">zipped_code</span><span class=\"p\">},</span>\n                <span class=\"n\">Timeout</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">timeout</span><span class=\"p\">,</span>\n                <span class=\"n\">MemorySize</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">memory_size</span><span class=\"p\">,</span>\n                <span class=\"n\">Environment</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;Variables&quot;</span><span class=\"p\">:</span> <span class=\"n\">env_vars</span><span class=\"p\">},</span>\n                <span class=\"n\">EphemeralStorage</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;Size&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tmp_size</span><span class=\"p\">},</span>  <span class=\"c1\"># size of /tmp folder.</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">func_name</span> <span class=\"o\">=</span> <span class=\"n\">lambda_config</span><span class=\"p\">[</span><span class=\"s2\">&quot;FunctionName&quot;</span><span class=\"p\">]</span>\n            <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_wait_until_lambda_update_is_finished</span><span class=\"p\">(</span><span class=\"n\">func_name</span><span class=\"p\">):</span>\n                <span class=\"n\">lambda_config</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lambda_client</span><span class=\"o\">.</span><span class=\"n\">get_function</span><span class=\"p\">(</span><span class=\"n\">FunctionName</span><span class=\"o\">=</span><span class=\"n\">func_name</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"n\">lambda_config</span>\n        <span class=\"k\">except</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lambda_client</span><span class=\"o\">.</span><span class=\"n\">exceptions</span><span class=\"o\">.</span><span class=\"n\">InvalidParameterValueException</span> <span class=\"ow\">or</span> <span class=\"n\">botocore</span><span class=\"o\">.</span><span class=\"n\">exceptions</span><span class=\"o\">.</span><span class=\"n\">ClientError</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"nd\">@contextlib</span><span class=\"o\">.</span><span class=\"n\">contextmanager</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_deploy_lambda_to_aws</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">role_res</span><span class=\"p\">,</span> <span class=\"n\">zipped_code</span><span class=\"p\">,</span> <span class=\"n\">env_vars</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Deploying new lambda to AWS&quot;&quot;&quot;</span>\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_deploy_lambda_to_aws_helper</span><span class=\"p\">(</span><span class=\"n\">role_res</span><span class=\"p\">,</span> <span class=\"n\">zipped_code</span><span class=\"p\">,</span> <span class=\"n\">env_vars</span><span class=\"p\">)</span>\n        <span class=\"n\">time_passed</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">while</span> <span class=\"n\">config</span> <span class=\"ow\">is</span> <span class=\"kc\">False</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">time_passed</span> <span class=\"o\">&gt;</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">MAX_WAIT_TIME</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">TimeoutError</span><span class=\"p\">(</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;Role called </span><span class=\"si\">{</span><span class=\"n\">role_res</span><span class=\"p\">[</span><span class=\"s1\">&#39;RoleName&#39;</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\"> is being created AWS for too long.&quot;</span>\n                    <span class=\"o\">+</span> <span class=\"s2\">&quot; Please check the resource in AWS console, delete relevant resource(s) &quot;</span>\n                    <span class=\"o\">+</span> <span class=\"s2\">&quot;if necessary, and re-run your Runhouse code.&quot;</span>\n                <span class=\"p\">)</span>\n            <span class=\"n\">time_passed</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_deploy_lambda_to_aws_helper</span><span class=\"p\">(</span><span class=\"n\">role_res</span><span class=\"p\">,</span> <span class=\"n\">zipped_code</span><span class=\"p\">,</span> <span class=\"n\">env_vars</span><span class=\"p\">)</span>\n        <span class=\"k\">yield</span> <span class=\"n\">config</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_create_role_in_aws</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;create a new role for the lambda function. If already exists - returns it.&quot;&quot;&quot;</span>\n\n        <span class=\"n\">role_policy</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;Version&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;2012-10-17&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Statement&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"p\">{</span>\n                    <span class=\"s2\">&quot;Action&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_ROLE_POLICIES</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;Resource&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;*&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;Effect&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Allow&quot;</span><span class=\"p\">,</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">],</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">assume_role_policy_document</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;Version&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;2012-10-17&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Statement&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"p\">{</span>\n                    <span class=\"s2\">&quot;Effect&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Allow&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;Principal&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">&quot;Service&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;lambda.amazonaws.com&quot;</span><span class=\"p\">},</span>\n                    <span class=\"s2\">&quot;Action&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;sts:AssumeRole&quot;</span><span class=\"p\">,</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">],</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">role_res</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">iam_client</span><span class=\"o\">.</span><span class=\"n\">create_role</span><span class=\"p\">(</span>\n                <span class=\"n\">RoleName</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">_Role&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">AssumeRolePolicyDocument</span><span class=\"o\">=</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">assume_role_policy_document</span><span class=\"p\">),</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">&#39;</span><span class=\"si\">{</span><span class=\"n\">role_res</span><span class=\"p\">[</span><span class=\"s2\">&quot;Role&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;RoleName&quot;</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s1\"> was created successfully.&#39;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">except</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">iam_client</span><span class=\"o\">.</span><span class=\"n\">exceptions</span><span class=\"o\">.</span><span class=\"n\">EntityAlreadyExistsException</span><span class=\"p\">:</span>\n            <span class=\"n\">role_res</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">iam_client</span><span class=\"o\">.</span><span class=\"n\">get_role</span><span class=\"p\">(</span><span class=\"n\">RoleName</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">_Role&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">iam_client</span><span class=\"o\">.</span><span class=\"n\">put_role_policy</span><span class=\"p\">(</span>\n            <span class=\"n\">RoleName</span><span class=\"o\">=</span><span class=\"n\">role_res</span><span class=\"p\">[</span><span class=\"s2\">&quot;Role&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;RoleName&quot;</span><span class=\"p\">],</span>\n            <span class=\"n\">PolicyName</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">_Policy&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">PolicyDocument</span><span class=\"o\">=</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">role_policy</span><span class=\"p\">),</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">role_res</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_create_new_lambda</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">env_vars</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Creates new AWS Lambda.&quot;&quot;&quot;</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Creating a new Lambda called </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">local_path_to_code</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">absolute</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;/&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"n\">path_e</span> <span class=\"k\">for</span> <span class=\"n\">path_e</span> <span class=\"ow\">in</span> <span class=\"n\">path</span><span class=\"p\">]</span>\n        <span class=\"n\">path</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n        <span class=\"n\">zip_file_name</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"s1\">&#39;&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">_code_files.zip&quot;</span>\n        <span class=\"n\">zf</span> <span class=\"o\">=</span> <span class=\"n\">zipfile</span><span class=\"o\">.</span><span class=\"n\">ZipFile</span><span class=\"p\">(</span><span class=\"n\">zip_file_name</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s2\">&quot;w&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">file_name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">local_path_to_code</span><span class=\"p\">:</span>\n                <span class=\"n\">zf</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">file_name</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">file_name</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">))</span>\n        <span class=\"k\">except</span> <span class=\"ne\">FileNotFoundError</span><span class=\"p\">:</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Could not find </span><span class=\"si\">{</span><span class=\"ne\">FileNotFoundError</span><span class=\"o\">.</span><span class=\"n\">filename</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">finally</span><span class=\"p\">:</span>\n            <span class=\"n\">zf</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n        <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">zip_file_name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;rb&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n            <span class=\"n\">zipped_code</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># creating a role for the Lambda, using default policy.</span>\n        <span class=\"c1\"># TODO [SB]: in the next phase, enable the user to update the default policy</span>\n        <span class=\"n\">role_res</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_create_role_in_aws</span><span class=\"p\">()</span>\n\n        <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_deploy_lambda_to_aws</span><span class=\"p\">(</span>\n            <span class=\"n\">role_res</span><span class=\"p\">,</span> <span class=\"n\">zipped_code</span><span class=\"p\">,</span> <span class=\"n\">env_vars</span>\n        <span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">lambda_config</span><span class=\"p\">:</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s1\">&#39;</span><span class=\"si\">{</span><span class=\"n\">lambda_config</span><span class=\"p\">[</span><span class=\"s2\">&quot;Configuration&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;FunctionName&quot;</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s1\"> was created successfully.&#39;</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">zip_file_name</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">absolute</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">unlink</span><span class=\"p\">()</span>\n            <span class=\"k\">return</span> <span class=\"n\">lambda_config</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">deploy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">to</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"p\">[],</span>\n        <span class=\"n\">cloud</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;aws_lambda&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">force_install</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Set up a function on AWS as a Lambda function.</span>\n\n<span class=\"sd\">        See the args of the factory method :func:`aws_lambda_fn` for more information.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"c1\"># Checking if the user have a credentials file</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">CRED_PATH</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">is_file</span><span class=\"p\">():</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;No credentials found&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">FileNotFoundError</span><span class=\"p\">(</span><span class=\"s2\">&quot;No credentials found&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">rh_handler_wrapper</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rh_wrapper</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">local_path_to_code</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">rh_handler_wrapper</span><span class=\"p\">)</span>\n\n        <span class=\"n\">env_vars</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">env_vars</span> <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"n\">Env</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"p\">{</span><span class=\"s2\">&quot;HOME&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">HOME_DIR</span><span class=\"p\">}</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"c1\"># if function exist - return its aws config. Else, a new one will be created.</span>\n        <span class=\"n\">lambda_config</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_lambda_exist</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">lambda_config</span><span class=\"p\">:</span>\n            <span class=\"c1\"># creating a new Lambda function, since it&#39;s not existing in the AWS account which is configured locally.</span>\n            <span class=\"n\">lambda_config</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_create_new_lambda</span><span class=\"p\">(</span><span class=\"n\">env_vars</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># TODO [SB]: in the next phase, enable the user to change the config of the Lambda.</span>\n        <span class=\"c1\"># updating the configuration with the initial configuration.</span>\n        <span class=\"c1\"># lambda_config = self._update_lambda_config(env_vars)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">aws_lambda_config</span> <span class=\"o\">=</span> <span class=\"n\">lambda_config</span>\n        <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">rh_handler_wrapper</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">absolute</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">unlink</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n    <span class=\"c1\"># --------------------------------------</span>\n    <span class=\"c1\"># Lambda Function call methods</span>\n    <span class=\"c1\"># --------------------------------------</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Any</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Call (invoke) the Lambdas function</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">             *args: Optional args for the Function</span>\n<span class=\"sd\">             **kwargs: Optional kwargs for the Function</span>\n\n<span class=\"sd\">        Returns:</span>\n<span class=\"sd\">            The Function&#39;s return value</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_invoke</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_get_log_group_names</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">lambdas_log_groups</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logs_client</span><span class=\"o\">.</span><span class=\"n\">describe_log_groups</span><span class=\"p\">(</span>\n            <span class=\"n\">logGroupNamePrefix</span><span class=\"o\">=</span><span class=\"n\">LOG_GROUP_PREFIX</span>\n        <span class=\"p\">)[</span><span class=\"s2\">&quot;logGroups&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">lambdas_log_groups</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">group</span><span class=\"p\">[</span><span class=\"s2\">&quot;logGroupName&quot;</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">group</span> <span class=\"ow\">in</span> <span class=\"n\">lambdas_log_groups</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">lambdas_log_groups</span>\n\n    <span class=\"nd\">@contextlib</span><span class=\"o\">.</span><span class=\"n\">contextmanager</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_wait_till_log_group_is_created</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">curr_lambda_log_group</span><span class=\"p\">,</span> <span class=\"n\">lambdas_log_groups</span>\n    <span class=\"p\">):</span>\n        <span class=\"n\">time_passed</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">while</span> <span class=\"n\">curr_lambda_log_group</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">lambdas_log_groups</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">time_passed</span> <span class=\"o\">&gt;</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">MAX_WAIT_TIME</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">TimeoutError</span><span class=\"p\">(</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;The log group called </span><span class=\"si\">{</span><span class=\"n\">curr_lambda_log_group</span><span class=\"si\">}</span><span class=\"s2\"> is being deployed in AWS cloudwatch for too long. &quot;</span>\n                    <span class=\"o\">+</span> <span class=\"s2\">&quot; Please check the resource in AWS console, delete relevant resource(s) &quot;</span>\n                    <span class=\"o\">+</span> <span class=\"s2\">&quot;if necessary, and re-run your Runhouse code.&quot;</span>\n                <span class=\"p\">)</span>\n            <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"n\">lambdas_log_groups</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_log_group_names</span><span class=\"p\">()</span>\n            <span class=\"n\">time_passed</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">yield</span> <span class=\"kc\">True</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_invoke</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Any</span><span class=\"p\">:</span>\n        <span class=\"n\">lambdas_log_groups</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_log_group_names</span><span class=\"p\">()</span>\n        <span class=\"n\">curr_lambda_log_group</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">LOG_GROUP_PREFIX</span><span class=\"si\">}{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n        <span class=\"n\">invoke_for_the_first_time</span> <span class=\"o\">=</span> <span class=\"n\">curr_lambda_log_group</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">lambdas_log_groups</span>\n\n        <span class=\"n\">payload_invoke</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">args_names</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">payload_invoke</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">args_names</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]:</span> <span class=\"n\">args</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">))}</span>\n        <span class=\"n\">invoke_res</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lambda_client</span><span class=\"o\">.</span><span class=\"n\">invoke</span><span class=\"p\">(</span>\n            <span class=\"n\">FunctionName</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n            <span class=\"n\">Payload</span><span class=\"o\">=</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">({</span><span class=\"o\">**</span><span class=\"n\">payload_invoke</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">}),</span>\n            <span class=\"n\">LogType</span><span class=\"o\">=</span><span class=\"s2\">&quot;Tail&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">return_value</span> <span class=\"o\">=</span> <span class=\"n\">invoke_res</span><span class=\"p\">[</span><span class=\"s2\">&quot;Payload&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s2\">&quot;utf-8&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"n\">invoke_res</span><span class=\"p\">[</span><span class=\"s2\">&quot;FunctionError&quot;</span><span class=\"p\">])</span>\n            <span class=\"n\">return_value</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">return_value</span><span class=\"p\">)</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;Failed to run </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">. Error: </span><span class=\"si\">{</span><span class=\"n\">return_value</span><span class=\"p\">[</span><span class=\"s1\">&#39;errorType&#39;</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">, </span><span class=\"si\">{</span><span class=\"n\">return_value</span><span class=\"p\">[</span><span class=\"s1\">&#39;errorMessage&#39;</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">invoke_for_the_first_time</span><span class=\"p\">:</span>\n                <span class=\"n\">lambdas_log_groups</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_log_group_names</span><span class=\"p\">()</span>\n                <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_wait_till_log_group_is_created</span><span class=\"p\">(</span>\n                    <span class=\"n\">curr_lambda_log_group</span><span class=\"p\">,</span> <span class=\"n\">lambdas_log_groups</span>\n                <span class=\"p\">):</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logs_client</span><span class=\"o\">.</span><span class=\"n\">put_retention_policy</span><span class=\"p\">(</span>\n                        <span class=\"n\">logGroupName</span><span class=\"o\">=</span><span class=\"n\">curr_lambda_log_group</span><span class=\"p\">,</span>\n                        <span class=\"n\">retentionInDays</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">retention_time</span><span class=\"p\">,</span>\n                    <span class=\"p\">)</span>\n\n            <span class=\"n\">log_lines</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Function Logs are:</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"o\">+</span> <span class=\"n\">base64</span><span class=\"o\">.</span><span class=\"n\">b64decode</span><span class=\"p\">(</span>\n                <span class=\"n\">invoke_res</span><span class=\"p\">[</span><span class=\"s2\">&quot;LogResult&quot;</span><span class=\"p\">]</span>\n            <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s2\">&quot;utf-8&quot;</span><span class=\"p\">)</span>\n\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">log_lines</span><span class=\"p\">)</span>\n            <span class=\"n\">return_value</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">return_value</span><span class=\"p\">)[</span><span class=\"s2\">&quot;body&quot;</span><span class=\"p\">]</span>\n            <span class=\"k\">return</span> <span class=\"n\">return_value</span>\n\n<div class=\"viewcode-block\" id=\"LambdaFunction.map\"><a class=\"viewcode-back\" href=\"../../../../../api/python/function/#runhouse.LambdaFunction.map\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">map</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Map a function over a list of arguments.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # The my_lambda_handler.py file</span>\n<span class=\"sd\">            &gt;&gt;&gt; def my_summer(arg1, arg2, arg3):</span>\n<span class=\"sd\">            &gt;&gt;&gt;     return arg1 + arg2 + arg3</span>\n<span class=\"sd\">            &gt;&gt;&gt;</span>\n<span class=\"sd\">            &gt;&gt;&gt; # your &#39;main&#39; python file, where you are using runhouse</span>\n<span class=\"sd\">            &gt;&gt;&gt; summer_lambda = rh.aws_lambda_fn(</span>\n<span class=\"sd\">            &gt;&gt;&gt;                     fn=my_summer,</span>\n<span class=\"sd\">            &gt;&gt;&gt;                     runtime = &#39;python3.9&#39;,</span>\n<span class=\"sd\">            &gt;&gt;&gt;                     name=&quot;my_func&quot;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; output = summer_lambda.map([1, 2], [1, 4], [2, 3])  # output = [4, 9]</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_invoke</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">args</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)]</span></div>\n\n    <span class=\"c1\">#</span>\n<div class=\"viewcode-block\" id=\"LambdaFunction.starmap\"><a class=\"viewcode-back\" href=\"../../../../../api/python/function/#runhouse.LambdaFunction.starmap\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">starmap</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">args_lists</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Like :func:`map` except that the elements of the iterable are expected to be iterables</span>\n<span class=\"sd\">        that are unpacked as arguments. An iterable of [(1,2), (3, 4)] results in [func(1,2), func(3,4)].</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; arg_list = [(1,2, 3), (3, 4, 5)]</span>\n<span class=\"sd\">            &gt;&gt;&gt; # invokes the Lambda function twice, once with args (1, 2, 3) and once with args (3, 4, 5)</span>\n<span class=\"sd\">            &gt;&gt;&gt; output = summer_lambda.starmap(arg_list) # output = [6, 12]</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_invoke</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">args</span> <span class=\"ow\">in</span> <span class=\"n\">args_lists</span><span class=\"p\">]</span></div>\n\n    <span class=\"c1\"># --------------------------------------</span>\n    <span class=\"c1\"># Lambda Function delete methods</span>\n    <span class=\"c1\"># --------------------------------------</span>\n<div class=\"viewcode-block\" id=\"LambdaFunction.teardown\"><a class=\"viewcode-back\" href=\"../../../../../api/python/function/#runhouse.LambdaFunction.teardown\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">teardown</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Deletes a Lambda function instance from AWS. All relevant AWS resources</span>\n<span class=\"sd\">        (role, log group) are deleted as well.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; def multiply(a, b):</span>\n<span class=\"sd\">            &gt;&gt;&gt;     return a * b</span>\n<span class=\"sd\">            &gt;&gt;&gt; multiply_lambda = rh.aws_lambda_fn(fn=multiply, name=&quot;lambdas_mult_func&quot;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; mult_res = multiply_lambda(4, 5)  # returns 20.</span>\n<span class=\"sd\">            &gt;&gt;&gt; multiply_lambda.teardown()  # returns true if succeeded, raises an exception otherwise.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">lambda_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n            <span class=\"c1\"># delete from aws console</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_lambda_exist</span><span class=\"p\">(</span><span class=\"n\">lambda_name</span><span class=\"p\">):</span>\n                <span class=\"n\">policy_name</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">lambda_name</span><span class=\"si\">}</span><span class=\"s2\">_Policy&quot;</span>\n                <span class=\"n\">role_name</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">lambda_name</span><span class=\"si\">}</span><span class=\"s2\">_Role&quot;</span>\n                <span class=\"n\">log_group_name</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;/aws/lambda/</span><span class=\"si\">{</span><span class=\"n\">lambda_name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n\n                <span class=\"c1\"># TODO: do we want to delete role and log group?</span>\n                <span class=\"c1\">#  maybe we want to reuse the role or save logs even if the lambda was deleted.</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">iam_client</span><span class=\"o\">.</span><span class=\"n\">delete_role_policy</span><span class=\"p\">(</span>\n                    <span class=\"n\">RoleName</span><span class=\"o\">=</span><span class=\"n\">role_name</span><span class=\"p\">,</span> <span class=\"n\">PolicyName</span><span class=\"o\">=</span><span class=\"n\">policy_name</span>\n                <span class=\"p\">)</span>\n\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">iam_client</span><span class=\"o\">.</span><span class=\"n\">delete_role</span><span class=\"p\">(</span><span class=\"n\">RoleName</span><span class=\"o\">=</span><span class=\"n\">role_name</span><span class=\"p\">)</span>\n\n                <span class=\"n\">log_groups</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_log_group_names</span><span class=\"p\">()</span>\n                <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">log_groups</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"n\">log_group_name</span> <span class=\"ow\">in</span> <span class=\"n\">log_groups</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logs_client</span><span class=\"o\">.</span><span class=\"n\">delete_log_group</span><span class=\"p\">(</span><span class=\"n\">logGroupName</span><span class=\"o\">=</span><span class=\"n\">log_group_name</span><span class=\"p\">)</span>\n\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lambda_client</span><span class=\"o\">.</span><span class=\"n\">delete_function</span><span class=\"p\">(</span><span class=\"n\">FunctionName</span><span class=\"o\">=</span><span class=\"n\">lambda_name</span><span class=\"p\">)</span>\n\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"k\">except</span> <span class=\"n\">botocore</span><span class=\"o\">.</span><span class=\"n\">exceptions</span><span class=\"o\">.</span><span class=\"n\">ClientError</span> <span class=\"k\">as</span> <span class=\"n\">aws_exception</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;Could nor delete an AWS resource, got </span><span class=\"si\">{</span><span class=\"n\">aws_exception</span><span class=\"o\">.</span><span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s1\">&#39;Error&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;Message&#39;</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n            <span class=\"p\">)</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">config</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">condensed</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">(</span><span class=\"n\">condensed</span><span class=\"p\">)</span>\n        <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span>\n            <span class=\"p\">{</span>\n                <span class=\"s2\">&quot;paths_to_code&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">local_path_to_code</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;handler_function_name&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">handler_function_name</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;runtime&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">runtime</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;timeout&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">timeout</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;memory_size&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">memory_size</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;tmp_size&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tmp_size</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;args_names&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">args_names</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;function_arn&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">aws_lambda_config</span><span class=\"p\">[</span><span class=\"s2\">&quot;Configuration&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;FunctionArn&quot;</span><span class=\"p\">],</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">config</span>\n\n    <span class=\"c1\"># --------------------------------------</span>\n    <span class=\"c1\"># Properties setup</span>\n    <span class=\"c1\"># --------------------------------------</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">handler_path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">local_path_to_code</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span></div>\n</pre></div>", "current_page_name": "_modules/runhouse/resources/functions/aws_lambda", "sidebars": ["about.html", "navigation.html", "relations.html", "searchbox.html", "donate.html"], "customsidebar": null, "alabaster_version": "0.7.13"}