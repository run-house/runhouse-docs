{"parents": [{"link": "../../../../", "title": "Module code"}], "title": "runhouse.resources.serverless.aws_lambda_function", "body": "<h1>Source code for runhouse.resources.serverless.aws_lambda_function</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">base64</span>\n<span class=\"kn\">import</span> <span class=\"nn\">inspect</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">shutil</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">zipfile</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Optional</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">boto3</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.globals</span> <span class=\"kn\">import</span> <span class=\"n\">rns_client</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.function</span> <span class=\"kn\">import</span> <span class=\"n\">Function</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">CRED_PATH_MAC</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">Path</span><span class=\"o\">.</span><span class=\"n\">home</span><span class=\"p\">()</span><span class=\"si\">}</span><span class=\"s2\">/.aws/credentials&quot;</span>\n<span class=\"n\">CRED_PATH_WIN</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">Path</span><span class=\"o\">.</span><span class=\"n\">home</span><span class=\"p\">()</span><span class=\"si\">}</span><span class=\"s2\">\\.aws\\credentials&quot;</span>\n<span class=\"n\">DEFAULT_REGION</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;us-east-1&quot;</span>\n\n<span class=\"k\">if</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">CRED_PATH_MAC</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">is_file</span><span class=\"p\">()</span> <span class=\"ow\">or</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">CRED_PATH_WIN</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">is_file</span><span class=\"p\">():</span>\n    <span class=\"n\">LAMBDA_CLIENT</span> <span class=\"o\">=</span> <span class=\"n\">boto3</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"p\">(</span><span class=\"s2\">&quot;lambda&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"n\">LAMBDA_CLIENT</span> <span class=\"o\">=</span> <span class=\"n\">boto3</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"p\">(</span><span class=\"s2\">&quot;lambda&quot;</span><span class=\"p\">,</span> <span class=\"n\">region_name</span><span class=\"o\">=</span><span class=\"n\">DEFAULT_REGION</span><span class=\"p\">)</span>\n<span class=\"n\">SUPPORTED_RUNTIMES</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s2\">&quot;python3.7&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;python3.8&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;python3.9&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;python3.10&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;python 3.11&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n\n\n<div class=\"viewcode-block\" id=\"AWSLambdaFunction\"><a class=\"viewcode-back\" href=\"../../../../../api/python/aws_lambda_function/#runhouse.AWSLambdaFunction\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">AWSLambdaFunction</span><span class=\"p\">(</span><span class=\"n\">Function</span><span class=\"p\">):</span>\n    <span class=\"n\">RESOURCE_TYPE</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;aws_lambda&quot;</span>\n    <span class=\"n\">DEFAULT_ROLE_POLICIES</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"s2\">&quot;cloudwatch:*&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;lambda:Invoke&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;lambda:InvokeAsync&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;lambda:InvokeFunction&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;lambda:PublishLayerVersion&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;lambda:PublishVersion&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;lambda:GetLayerVersion&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;lambda:GetLayerVersionPolicy&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;lambda:ListLayers&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;lambda:ListLayerVersions&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;logs:*&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;s3:DeleteObject&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;s3:GetObject&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;s3:ListBucket&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;s3:PutObject&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">GEN_ERROR</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;could not create or update the AWS Lambda.&quot;</span>\n    <span class=\"n\">FAIL_CODE</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">DEFAULT_REGION</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;us-east-1&quot;</span>\n    <span class=\"n\">DEFAULT_PY_VERSION</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;python3.9&quot;</span>\n    <span class=\"n\">EMPTY_ZIP</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n\n<div class=\"viewcode-block\" id=\"AWSLambdaFunction.__init__\"><a class=\"viewcode-back\" href=\"../../../../../api/python/aws_lambda_function/#runhouse.AWSLambdaFunction.__init__\">[docs]</a>    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">paths_to_code</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">handler_function_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">runtime</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">args_names</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">fn</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">fn_pointers</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"ow\">or</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">env_vars</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">dryrun</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">30</span><span class=\"p\">,</span>  <span class=\"c1\"># seconds</span>\n        <span class=\"n\">memory_size</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">128</span><span class=\"p\">,</span>  <span class=\"c1\"># MB</span>\n        <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>  <span class=\"c1\"># We have this here to ignore extra arguments when calling from from_config</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Runhouse AWS Lambda object. It is comprised of the entry point, configuration,</span>\n<span class=\"sd\">        and dependencies necessary to run the service.</span>\n\n<span class=\"sd\">        .. note::</span>\n<span class=\"sd\">                To create an AWS lambda resource, please use the factory method :func:`aws_lambda_function`.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">fn</span><span class=\"p\">,</span> <span class=\"n\">Callable</span><span class=\"p\">):</span>\n            <span class=\"n\">handler_function_name</span> <span class=\"o\">=</span> <span class=\"n\">fn</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n            <span class=\"n\">fn_pointers</span> <span class=\"o\">=</span> <span class=\"n\">Function</span><span class=\"o\">.</span><span class=\"n\">_extract_pointers</span><span class=\"p\">(</span><span class=\"n\">fn</span><span class=\"p\">,</span> <span class=\"n\">reqs</span><span class=\"o\">=</span><span class=\"n\">env</span> <span class=\"ow\">or</span> <span class=\"p\">[])</span>\n            <span class=\"n\">paths_to_code</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_paths_to_code_from_fn_pointers</span><span class=\"p\">(</span><span class=\"n\">fn_pointers</span><span class=\"p\">)</span>\n            <span class=\"n\">args_names</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"n\">param</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"k\">for</span> <span class=\"n\">param</span> <span class=\"ow\">in</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">signature</span><span class=\"p\">(</span><span class=\"n\">fn</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">parameters</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()</span>\n            <span class=\"p\">]</span>\n        <span class=\"k\">elif</span> <span class=\"n\">fn_pointers</span><span class=\"p\">:</span>\n            <span class=\"n\">handler_function_name</span> <span class=\"o\">=</span> <span class=\"n\">fn_pointers</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n            <span class=\"n\">paths_to_code</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_paths_to_code_from_fn_pointers</span><span class=\"p\">(</span><span class=\"n\">fn_pointers</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">fn_pointers</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"k\">if</span> <span class=\"n\">handler_function_name</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"n\">paths_to_code</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;`handler_function_name` and `paths_to_code` must be provided if `fn` is not provided&quot;</span>\n                <span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">handler_function_name</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;.&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span>\n            <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">,</span>\n            <span class=\"n\">system</span><span class=\"o\">=</span><span class=\"s2\">&quot;AWS_lambda&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"n\">fn_pointers</span><span class=\"o\">=</span><span class=\"n\">fn_pointers</span><span class=\"p\">,</span>\n            <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">local_path_to_code</span> <span class=\"o\">=</span> <span class=\"n\">paths_to_code</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">handler_function_name</span> <span class=\"o\">=</span> <span class=\"n\">handler_function_name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">args_names</span> <span class=\"o\">=</span> <span class=\"n\">args_names</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">runtime</span> <span class=\"o\">=</span> <span class=\"n\">runtime</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_PY_VERSION</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">env_vars</span> <span class=\"o\">=</span> <span class=\"n\">env_vars</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">timeout</span> <span class=\"o\">&gt;</span> <span class=\"mi\">900</span><span class=\"p\">:</span>\n            <span class=\"n\">timeout</span> <span class=\"o\">=</span> <span class=\"mi\">900</span>\n        <span class=\"k\">if</span> <span class=\"n\">timeout</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span><span class=\"p\">:</span>\n            <span class=\"n\">timeout</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">timeout</span> <span class=\"o\">=</span> <span class=\"n\">timeout</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">memory_size</span> <span class=\"o\">&lt;</span> <span class=\"mi\">128</span><span class=\"p\">:</span>\n            <span class=\"n\">memory_size</span> <span class=\"o\">=</span> <span class=\"mi\">128</span>\n        <span class=\"k\">if</span> <span class=\"n\">memory_size</span> <span class=\"o\">&gt;</span> <span class=\"mi\">10240</span><span class=\"p\">:</span>\n            <span class=\"n\">memory_size</span> <span class=\"o\">=</span> <span class=\"mi\">10240</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">memory_size</span> <span class=\"o\">=</span> <span class=\"n\">memory_size</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">env</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"nb\">list</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">reqs</span> <span class=\"o\">=</span> <span class=\"n\">env</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">reqs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_reqs_to_list</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">)</span>\n            <span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layer</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layer_version</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">np_layer</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">np_layer_version</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_create_layer</span><span class=\"p\">()</span>  <span class=\"c1\"># returns layers ARNs and versions in AWS.</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">reqs</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layer</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layer_version</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">np_layer</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">np_layer_version</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">aws_lambda_config</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"kc\">None</span>  <span class=\"c1\"># Lambda config and role arn from aws will be saved here</span>\n        <span class=\"p\">)</span></div>\n\n    <span class=\"c1\"># ----------------- Constructor helper methods -----------------</span>\n\n<div class=\"viewcode-block\" id=\"AWSLambdaFunction.from_config\"><a class=\"viewcode-back\" href=\"../../../../../api/python/aws_lambda_function/#runhouse.AWSLambdaFunction.from_config\">[docs]</a>    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_config</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Create an AWS Lambda object from a config dictionary.&quot;&quot;&quot;</span>\n\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;resource_subtype&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">():</span>\n            <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;resource_subtype&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;system&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">():</span>\n            <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;system&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">AWSLambdaFunction</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">()</span></div>\n\n<div class=\"viewcode-block\" id=\"AWSLambdaFunction.from_name\"><a class=\"viewcode-back\" href=\"../../../../../api/python/aws_lambda_function/#runhouse.AWSLambdaFunction.from_name\">[docs]</a>    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_name</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">alt_options</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">_lambda_exist</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n            <span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">from_name</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">func</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;Could not find a Lambda called </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">. Please provide a name of an existing Lambda, &quot;</span>\n                <span class=\"o\">+</span> <span class=\"s2\">&quot;or paths_to_code, handler_function_name, runtime and args_names (and a name if you&quot;</span>\n                <span class=\"s2\">&quot; wish), in order to create a new lambda.&quot;</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;LambdaNotFoundInAWS&quot;</span></div>\n\n    <span class=\"c1\"># ----------------- Private helping methods -----------------</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_check_for_child_configs</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Overload this method of the function class.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">config</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_paths_to_code_from_fn_pointers</span><span class=\"p\">(</span><span class=\"n\">fn_pointers</span><span class=\"p\">):</span>\n        <span class=\"n\">root_dir</span> <span class=\"o\">=</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">locate_working_dir</span><span class=\"p\">()</span>\n        <span class=\"n\">file_path</span> <span class=\"o\">=</span> <span class=\"n\">fn_pointers</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;.&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;/&quot;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;.py&quot;</span>\n        <span class=\"n\">paths_to_code</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">root_dir</span><span class=\"p\">,</span> <span class=\"n\">file_path</span><span class=\"p\">)]</span>\n        <span class=\"k\">return</span> <span class=\"n\">paths_to_code</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_reqs_to_list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Converting requirements from requirements.txt to a list&quot;&quot;&quot;</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">_get_lib_name</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"s2\">&quot;&lt;&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">req</span><span class=\"p\">:</span>\n                <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"s2\">&quot;&lt;&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"s2\">&quot;&gt;&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">req</span><span class=\"p\">:</span>\n                <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"s2\">&quot;&gt;&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"s2\">&quot;=&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">req</span><span class=\"p\">:</span>\n                <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"s2\">&quot;=&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">req</span><span class=\"p\">[:</span><span class=\"n\">index</span><span class=\"p\">]</span>\n\n        <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"s2\">&quot;r&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n            <span class=\"n\">reqs</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">reqs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">_get_lib_name</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">req</span> <span class=\"ow\">in</span> <span class=\"n\">reqs</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">reqs</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_lambda_exist</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Checks if a Lambda with the name given during init is already exists in AWS&quot;&quot;&quot;</span>\n        <span class=\"n\">func_names</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">func</span><span class=\"p\">[</span><span class=\"s2\">&quot;FunctionName&quot;</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">func</span> <span class=\"ow\">in</span> <span class=\"n\">LAMBDA_CLIENT</span><span class=\"o\">.</span><span class=\"n\">list_functions</span><span class=\"p\">()[</span><span class=\"s2\">&quot;Functions&quot;</span><span class=\"p\">]</span>\n        <span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">func_names</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_wait_until_update_is_finished</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Verifies that a running update of the function (in AWS) is finished (so the next one could be executed)&quot;&quot;&quot;</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">LAMBDA_CLIENT</span><span class=\"o\">.</span><span class=\"n\">get_function</span><span class=\"p\">(</span><span class=\"n\">FunctionName</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s2\">&quot;Configuration&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;State&quot;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Active&quot;</span>\n        <span class=\"n\">last_update_status</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s2\">&quot;Configuration&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;LastUpdateStatus&quot;</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;InProgress&quot;</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">state</span> <span class=\"ow\">and</span> <span class=\"n\">last_update_status</span><span class=\"p\">:</span>\n                <span class=\"k\">break</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n                <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">LAMBDA_CLIENT</span><span class=\"o\">.</span><span class=\"n\">get_function</span><span class=\"p\">(</span><span class=\"n\">FunctionName</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">)</span>\n                <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s2\">&quot;Configuration&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;State&quot;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Active&quot;</span>\n                <span class=\"n\">last_update_status</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                    <span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s2\">&quot;Configuration&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;LastUpdateStatus&quot;</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;InProgress&quot;</span>\n                <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_rh_wrapper</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Creates a runhouse wrapper to the handler function&quot;&quot;&quot;</span>\n        <span class=\"n\">handler_path</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">local_path_to_code</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">wrapper_path</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">handler_path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">parent</span> <span class=\"o\">/</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;rh_handler_</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">.py&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">handler_name</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">handler_path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">stem</span>\n\n        <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">wrapper_path</span><span class=\"p\">,</span> <span class=\"s2\">&quot;w&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;from </span><span class=\"si\">{</span><span class=\"n\">handler_name</span><span class=\"si\">}</span><span class=\"s2\"> import </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">handler_function_name</span><span class=\"si\">}</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">wrapper_path</span><span class=\"p\">,</span> <span class=\"s2\">&quot;w&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;from </span><span class=\"si\">{</span><span class=\"n\">handler_name</span><span class=\"si\">}</span><span class=\"s2\"> import </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">handler_function_name</span><span class=\"si\">}</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">reqs</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">req</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">reqs</span><span class=\"p\">:</span>\n                <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;import </span><span class=\"si\">{</span><span class=\"n\">req</span><span class=\"si\">}</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;def lambda_handler(event, context):</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span>\n            <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"se\">\\t</span><span class=\"s2\">return </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">handler_function_name</span><span class=\"si\">}</span><span class=\"s2\">(**event)&quot;</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">wrapper_path</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_supported_python_libs</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot; &quot; Returns a list of the supported python libs by the AWS Lambda resource&quot;&quot;&quot;</span>\n        <span class=\"c1\"># TODO [SB]: think what is the better implementation: via website, or AWS lambda. for now, hard-coded.</span>\n        <span class=\"c1\"># url = &quot;https://www.feitsui.com/en/article/2&quot;</span>\n        <span class=\"c1\"># page = urlopen(url)</span>\n        <span class=\"c1\"># html_bytes = page.read()</span>\n        <span class=\"c1\"># html = html_bytes.decode(&quot;utf-8&quot;)</span>\n        <span class=\"c1\"># python_version = self.runtime[0].upper()+self.runtime[1:-3]+&quot; &quot;+self.runtime[-3:]</span>\n        <span class=\"c1\"># python_prev_version = python_version[:-1]+str(int(python_version[-1])-1)</span>\n        <span class=\"c1\"># # TODO [SB]: no indexes, last python version</span>\n        <span class=\"c1\"># start_index = html.index(python_version)</span>\n        <span class=\"c1\"># end_index = html.index(python_prev_version)</span>\n        <span class=\"c1\"># version_text = html[start_index:end_index]</span>\n        <span class=\"c1\"># version_text = version_text.split(&quot;\\n&quot;)</span>\n        <span class=\"c1\"># version_text = [v.strip() for v in version_text]</span>\n        <span class=\"c1\"># version_text = [v for v in version_text if &quot;&lt;td&gt;&quot; in v]</span>\n        <span class=\"c1\"># version_text = [v[4:-5] for v in version_text]</span>\n        <span class=\"n\">supported_libs</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;urllib3&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;six&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;simplejson&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;s3transfer&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;python-dateutil&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;jmespath&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;botocore&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;boto3&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;awslambdaric&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;setuptools&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;pip&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">]</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">supported_libs</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_download_packages_s3</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">dest_path</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Getting required layer resources from a s3 bucket.&quot;&quot;&quot;</span>\n        <span class=\"n\">bucket_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;runhouse-lambda-resources&quot;</span>\n        <span class=\"n\">remote_path</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;layer_helpers/</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">runtime</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n\n            <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;aws s3 cp s3://</span><span class=\"si\">{</span><span class=\"n\">bucket_name</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">{</span><span class=\"n\">remote_path</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">{</span><span class=\"n\">dest_path</span><span class=\"si\">}</span><span class=\"s2\"> --recursive&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n            <span class=\"n\">dir_name</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">parent</span> <span class=\"o\">/</span> <span class=\"s2\">&quot;all_reqs&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">shutil</span><span class=\"o\">.</span><span class=\"n\">rmtree</span><span class=\"p\">(</span><span class=\"n\">dir_name</span><span class=\"p\">)</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Try installing aws on your local machine (i.e brew install awscli) and rerun.&quot;</span>\n            <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_create_layer_zip</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Creates a zip of all required python libs, that will be sent to the Lambda as a layer&quot;&quot;&quot;</span>\n        <span class=\"n\">supported_libs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_supported_python_libs</span><span class=\"p\">()</span>\n        <span class=\"n\">reqs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">req</span> <span class=\"k\">for</span> <span class=\"n\">req</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">reqs</span> <span class=\"k\">if</span> <span class=\"n\">req</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">supported_libs</span><span class=\"p\">]</span>\n        <span class=\"n\">dir_name</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">parent</span> <span class=\"o\">/</span> <span class=\"s2\">&quot;all_reqs&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">all_req_dir</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">parent</span> <span class=\"o\">/</span> <span class=\"s2\">&quot;all_reqs&quot;</span> <span class=\"o\">/</span> <span class=\"s2\">&quot;python&quot;</span>\n        <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">all_req_dir</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mkdir</span><span class=\"p\">(</span><span class=\"n\">parents</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">exist_ok</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;numpy&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">reqs</span><span class=\"p\">:</span>\n            <span class=\"n\">reqs</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"s2\">&quot;numpy&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;pandas&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">reqs</span><span class=\"p\">:</span>\n            <span class=\"n\">reqs</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"s2\">&quot;pandas&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">reqs</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layer</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layer_version</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span>\n            <span class=\"n\">shutil</span><span class=\"o\">.</span><span class=\"n\">rmtree</span><span class=\"p\">(</span><span class=\"n\">dir_name</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">EMPTY_ZIP</span>\n        <span class=\"k\">for</span> <span class=\"n\">req</span> <span class=\"ow\">in</span> <span class=\"n\">reqs</span><span class=\"p\">:</span>\n            <span class=\"n\">folder_req</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"nb\">__import__</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"vm\">__file__</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"p\">)</span>\n            <span class=\"n\">folder_req</span> <span class=\"o\">=</span> <span class=\"n\">folder_req</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;/</span><span class=\"si\">{</span><span class=\"n\">req</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">sub_reqs</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">folder_req</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">iterdir</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">req</span> <span class=\"ow\">in</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n            <span class=\"p\">]</span>\n            <span class=\"k\">for</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"n\">sub_reqs</span><span class=\"p\">:</span>\n                <span class=\"n\">shutil</span><span class=\"o\">.</span><span class=\"n\">copytree</span><span class=\"p\">(</span><span class=\"n\">folder_req</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">all_req_dir</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"p\">)</span>\n\n        <span class=\"n\">shutil</span><span class=\"o\">.</span><span class=\"n\">make_archive</span><span class=\"p\">(</span><span class=\"n\">dir_name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;zip&quot;</span><span class=\"p\">,</span> <span class=\"n\">dir_name</span><span class=\"p\">)</span>\n        <span class=\"n\">shutil</span><span class=\"o\">.</span><span class=\"n\">rmtree</span><span class=\"p\">(</span><span class=\"n\">dir_name</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">dir_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;.zip&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_create_layer</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Creates a layer, which contains required python libs.</span>\n<span class=\"sd\">        If needed, pandas and numpy layer is also created and returned</span>\n<span class=\"sd\">        Returns layers&#39; ARNs and versions&quot;&quot;&quot;</span>\n\n        <span class=\"n\">layer_name</span><span class=\"p\">,</span> <span class=\"n\">layer_arn</span><span class=\"p\">,</span> <span class=\"n\">layer_version</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_layer&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span>\n        <span class=\"n\">zip_file_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_create_layer_zip</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Creating layer of python libs which are not np, pd and are not supported by AWS Lambda by default.</span>\n        <span class=\"k\">if</span> <span class=\"n\">zip_file_name</span> <span class=\"o\">!=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">EMPTY_ZIP</span><span class=\"p\">:</span>\n            <span class=\"n\">reqs_no_np</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">req</span> <span class=\"k\">for</span> <span class=\"n\">req</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">reqs</span> <span class=\"k\">if</span> <span class=\"n\">req</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;numpy&quot;</span> <span class=\"ow\">or</span> <span class=\"n\">req</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;pandas&quot;</span><span class=\"p\">]</span>\n            <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;This layer contains the following python libraries: </span><span class=\"si\">{</span><span class=\"s1\">&#39;, &#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">reqs_no_np</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n            <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">zip_file_name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;rb&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n                <span class=\"n\">layer_zf</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n            <span class=\"n\">layer</span> <span class=\"o\">=</span> <span class=\"n\">LAMBDA_CLIENT</span><span class=\"o\">.</span><span class=\"n\">publish_layer_version</span><span class=\"p\">(</span>\n                <span class=\"n\">LayerName</span><span class=\"o\">=</span><span class=\"n\">layer_name</span><span class=\"p\">,</span>\n                <span class=\"n\">Description</span><span class=\"o\">=</span><span class=\"n\">description</span><span class=\"p\">,</span>\n                <span class=\"n\">Content</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;ZipFile&quot;</span><span class=\"p\">:</span> <span class=\"n\">layer_zf</span><span class=\"p\">},</span>\n                <span class=\"n\">CompatibleRuntimes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">runtime</span><span class=\"p\">],</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">layer_arn</span><span class=\"p\">,</span> <span class=\"n\">layer_version</span> <span class=\"o\">=</span> <span class=\"n\">layer</span><span class=\"p\">[</span><span class=\"s2\">&quot;LayerVersionArn&quot;</span><span class=\"p\">],</span> <span class=\"nb\">int</span><span class=\"p\">(</span>\n                <span class=\"n\">layer</span><span class=\"p\">[</span><span class=\"s2\">&quot;LayerVersionArn&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;:&quot;</span><span class=\"p\">)[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">zip_file_name</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">unlink</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Creating and getting the np and pd layer, suitable to the runtime provided during init.</span>\n        <span class=\"n\">list_layers</span> <span class=\"o\">=</span> <span class=\"n\">LAMBDA_CLIENT</span><span class=\"o\">.</span><span class=\"n\">list_layers</span><span class=\"p\">(</span>\n            <span class=\"n\">CompatibleRuntime</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">runtime</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">CompatibleArchitecture</span><span class=\"o\">=</span><span class=\"s2\">&quot;x86_64&quot;</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">layer_names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">layer</span><span class=\"p\">[</span><span class=\"s2\">&quot;LayerName&quot;</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">layer</span> <span class=\"ow\">in</span> <span class=\"n\">list_layers</span><span class=\"p\">[</span><span class=\"s2\">&quot;Layers&quot;</span><span class=\"p\">]]</span>\n\n        <span class=\"n\">pd_np_layer_name</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;numpy_pandas_</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">runtime</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n        <span class=\"n\">pd_np_layer_name</span> <span class=\"o\">=</span> <span class=\"n\">pd_np_layer_name</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;.&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># create the layer if not existing in AWS.</span>\n        <span class=\"k\">if</span> <span class=\"n\">pd_np_layer_name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">layer_names</span><span class=\"p\">:</span>\n            <span class=\"n\">np_layer</span> <span class=\"o\">=</span> <span class=\"n\">LAMBDA_CLIENT</span><span class=\"o\">.</span><span class=\"n\">publish_layer_version</span><span class=\"p\">(</span>\n                <span class=\"n\">LayerName</span><span class=\"o\">=</span><span class=\"n\">pd_np_layer_name</span><span class=\"p\">,</span>\n                <span class=\"n\">Description</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s2\">&quot;This layer contains numpy and pandas suitable for </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">runtime</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">Content</span><span class=\"o\">=</span><span class=\"p\">{</span>\n                    <span class=\"s2\">&quot;S3Bucket&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;runhouse-lambda-resources&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;S3Key&quot;</span><span class=\"p\">:</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;layer_helpers/</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">runtime</span><span class=\"si\">}</span><span class=\"s2\">/python.zip&quot;</span><span class=\"p\">,</span>\n                <span class=\"p\">},</span>\n                <span class=\"n\">CompatibleRuntimes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">runtime</span><span class=\"p\">],</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">pd_np_layer_arn</span> <span class=\"o\">=</span> <span class=\"n\">np_layer</span><span class=\"p\">[</span><span class=\"s2\">&quot;LayerVersionArn&quot;</span><span class=\"p\">]</span>\n            <span class=\"n\">pd_np_layer_version</span> <span class=\"o\">=</span> <span class=\"n\">np_layer</span><span class=\"p\">[</span><span class=\"s2\">&quot;Version&quot;</span><span class=\"p\">]</span>\n\n        <span class=\"c1\"># get the layer version and ARN if existing in AWS.</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">pd_np_layer_arn</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"n\">layer</span><span class=\"p\">[</span><span class=\"s2\">&quot;LatestMatchingVersion&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;LayerVersionArn&quot;</span><span class=\"p\">]</span>\n                <span class=\"k\">for</span> <span class=\"n\">layer</span> <span class=\"ow\">in</span> <span class=\"n\">list_layers</span><span class=\"p\">[</span><span class=\"s2\">&quot;Layers&quot;</span><span class=\"p\">]</span>\n                <span class=\"k\">if</span> <span class=\"n\">layer</span><span class=\"p\">[</span><span class=\"s2\">&quot;LayerName&quot;</span> <span class=\"o\">==</span> <span class=\"n\">pd_np_layer_name</span><span class=\"p\">]</span>\n            <span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">pd_np_layer_version</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"n\">layer</span><span class=\"p\">[</span><span class=\"s2\">&quot;LayerArn&quot;</span><span class=\"p\">]</span>\n                <span class=\"k\">for</span> <span class=\"n\">layer</span> <span class=\"ow\">in</span> <span class=\"n\">list_layers</span><span class=\"p\">[</span><span class=\"s2\">&quot;Layers&quot;</span><span class=\"p\">]</span>\n                <span class=\"k\">if</span> <span class=\"n\">layer</span><span class=\"p\">[</span><span class=\"s2\">&quot;LayerName&quot;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">pd_np_layer_name</span>\n            <span class=\"p\">]</span>\n            <span class=\"n\">pd_np_layer_version</span> <span class=\"o\">=</span> <span class=\"n\">pd_np_layer_version</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;:&quot;</span><span class=\"p\">)[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">layer_arn</span><span class=\"p\">,</span> <span class=\"n\">layer_version</span><span class=\"p\">,</span> <span class=\"n\">pd_np_layer_arn</span><span class=\"p\">,</span> <span class=\"n\">pd_np_layer_version</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_update_lambda_config</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">env_vars</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Updates existing Lambda in AWS (config) that was provided in the init.&quot;&quot;&quot;</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Updating a Lambda called </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">layers</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layer</span><span class=\"p\">:</span>\n            <span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layer</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">np_layer</span><span class=\"p\">:</span>\n            <span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">np_layer</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">layers</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">lambda_config</span> <span class=\"o\">=</span> <span class=\"n\">LAMBDA_CLIENT</span><span class=\"o\">.</span><span class=\"n\">update_function_configuration</span><span class=\"p\">(</span>\n                <span class=\"n\">FunctionName</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n                <span class=\"n\">Runtime</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">runtime</span><span class=\"p\">,</span>\n                <span class=\"n\">Timeout</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">timeout</span><span class=\"p\">,</span>\n                <span class=\"n\">MemorySize</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">memory_size</span><span class=\"p\">,</span>\n                <span class=\"n\">Layers</span><span class=\"o\">=</span><span class=\"n\">layers</span><span class=\"p\">,</span>\n                <span class=\"n\">Environment</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;Variables&quot;</span><span class=\"p\">:</span> <span class=\"n\">env_vars</span><span class=\"p\">},</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">lambda_config</span> <span class=\"o\">=</span> <span class=\"n\">LAMBDA_CLIENT</span><span class=\"o\">.</span><span class=\"n\">update_function_configuration</span><span class=\"p\">(</span>\n                <span class=\"n\">FunctionName</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n                <span class=\"n\">Runtime</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">runtime</span><span class=\"p\">,</span>\n                <span class=\"n\">Timeout</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">timeout</span><span class=\"p\">,</span>\n                <span class=\"n\">MemorySize</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">memory_size</span><span class=\"p\">,</span>\n                <span class=\"n\">Environment</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;Variables&quot;</span><span class=\"p\">:</span> <span class=\"n\">env_vars</span><span class=\"p\">},</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"c1\"># TODO: enable for other to update the Lambda code.</span>\n        <span class=\"c1\"># wait for the config update process to finish, and then update the code (Lambda logic).</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_wait_until_update_is_finished</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">):</span>\n            <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">local_path_to_code</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">absolute</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;/&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"n\">path_e</span> <span class=\"k\">for</span> <span class=\"n\">path_e</span> <span class=\"ow\">in</span> <span class=\"n\">path</span><span class=\"p\">]</span>\n            <span class=\"n\">path</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n            <span class=\"n\">zip_file_name</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"s1\">&#39;&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">_code_files.zip&quot;</span>\n            <span class=\"n\">zf</span> <span class=\"o\">=</span> <span class=\"n\">zipfile</span><span class=\"o\">.</span><span class=\"n\">ZipFile</span><span class=\"p\">(</span><span class=\"n\">zip_file_name</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s2\">&quot;w&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"k\">for</span> <span class=\"n\">file_name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">local_path_to_code</span><span class=\"p\">:</span>\n                    <span class=\"n\">zf</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">file_name</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">file_name</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">))</span>\n\n            <span class=\"k\">except</span> <span class=\"ne\">FileNotFoundError</span><span class=\"p\">:</span>\n                <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Could not find </span><span class=\"si\">{</span><span class=\"ne\">FileNotFoundError</span><span class=\"o\">.</span><span class=\"n\">filename</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">finally</span><span class=\"p\">:</span>\n                <span class=\"n\">zf</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n            <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">zip_file_name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;rb&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n                <span class=\"n\">zipped_code</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n\n            <span class=\"n\">lambda_config</span> <span class=\"o\">=</span> <span class=\"n\">LAMBDA_CLIENT</span><span class=\"o\">.</span><span class=\"n\">update_function_code</span><span class=\"p\">(</span>\n                <span class=\"n\">FunctionName</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">ZipFile</span><span class=\"o\">=</span><span class=\"n\">zipped_code</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">&#39;</span><span class=\"si\">{</span><span class=\"n\">lambda_config</span><span class=\"p\">[</span><span class=\"s2\">&quot;FunctionName&quot;</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s1\"> was updated successfully.&#39;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">lambda_config</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_create_new_lambda</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">env_vars</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Creates new AWS Lambda.&quot;&quot;&quot;</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Creating a new Lambda called </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">local_path_to_code</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">absolute</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;/&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"n\">path_e</span> <span class=\"k\">for</span> <span class=\"n\">path_e</span> <span class=\"ow\">in</span> <span class=\"n\">path</span><span class=\"p\">]</span>\n        <span class=\"n\">path</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n        <span class=\"n\">zip_file_name</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"s1\">&#39;&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">_code_files.zip&quot;</span>\n        <span class=\"n\">zf</span> <span class=\"o\">=</span> <span class=\"n\">zipfile</span><span class=\"o\">.</span><span class=\"n\">ZipFile</span><span class=\"p\">(</span><span class=\"n\">zip_file_name</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s2\">&quot;w&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">file_name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">local_path_to_code</span><span class=\"p\">:</span>\n                <span class=\"n\">zf</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">file_name</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">file_name</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">))</span>\n        <span class=\"k\">except</span> <span class=\"ne\">FileNotFoundError</span><span class=\"p\">:</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Could not find </span><span class=\"si\">{</span><span class=\"ne\">FileNotFoundError</span><span class=\"o\">.</span><span class=\"n\">filename</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">finally</span><span class=\"p\">:</span>\n            <span class=\"n\">zf</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n        <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">zip_file_name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;rb&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n            <span class=\"n\">zipped_code</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># creating a role for the Lambda, using default policy.</span>\n        <span class=\"c1\"># TODO: enable the user to update the default policy</span>\n\n        <span class=\"n\">iam_client</span> <span class=\"o\">=</span> <span class=\"n\">boto3</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"p\">(</span><span class=\"s2\">&quot;iam&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">role_policy</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;Version&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;2012-10-17&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Statement&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"p\">{</span>\n                    <span class=\"s2\">&quot;Action&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_ROLE_POLICIES</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;Resource&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;*&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;Effect&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Allow&quot;</span><span class=\"p\">,</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">],</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">assume_role_policy_document</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;Version&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;2012-10-17&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Statement&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"p\">{</span>\n                    <span class=\"s2\">&quot;Effect&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Allow&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;Principal&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">&quot;Service&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;lambda.amazonaws.com&quot;</span><span class=\"p\">},</span>\n                    <span class=\"s2\">&quot;Action&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;sts:AssumeRole&quot;</span><span class=\"p\">,</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">],</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">role_res</span> <span class=\"o\">=</span> <span class=\"n\">iam_client</span><span class=\"o\">.</span><span class=\"n\">create_role</span><span class=\"p\">(</span>\n                <span class=\"n\">RoleName</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">_Role&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">AssumeRolePolicyDocument</span><span class=\"o\">=</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">assume_role_policy_document</span><span class=\"p\">),</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">&#39;</span><span class=\"si\">{</span><span class=\"n\">role_res</span><span class=\"p\">[</span><span class=\"s2\">&quot;Role&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;RoleName&quot;</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s1\"> was created successfully.&#39;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">except</span> <span class=\"n\">iam_client</span><span class=\"o\">.</span><span class=\"n\">exceptions</span><span class=\"o\">.</span><span class=\"n\">EntityAlreadyExistsException</span><span class=\"p\">:</span>\n            <span class=\"n\">role_res</span> <span class=\"o\">=</span> <span class=\"n\">iam_client</span><span class=\"o\">.</span><span class=\"n\">get_role</span><span class=\"p\">(</span><span class=\"n\">RoleName</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">_Role&quot;</span><span class=\"p\">)</span>\n\n            <span class=\"n\">iam_client</span><span class=\"o\">.</span><span class=\"n\">put_role_policy</span><span class=\"p\">(</span>\n                <span class=\"n\">RoleName</span><span class=\"o\">=</span><span class=\"n\">role_res</span><span class=\"p\">[</span><span class=\"s2\">&quot;Role&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;RoleName&quot;</span><span class=\"p\">],</span>\n                <span class=\"n\">PolicyName</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">_Policy&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">PolicyDocument</span><span class=\"o\">=</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">role_policy</span><span class=\"p\">),</span>\n            <span class=\"p\">)</span>\n\n            <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>  <span class=\"c1\"># letting the role be updated in AWS</span>\n\n        <span class=\"n\">layers</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layer</span><span class=\"p\">:</span>\n            <span class=\"n\">LAMBDA_CLIENT</span><span class=\"o\">.</span><span class=\"n\">add_layer_version_permission</span><span class=\"p\">(</span>\n                <span class=\"n\">LayerName</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_layer&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">VersionNumber</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layer_version</span><span class=\"p\">,</span>\n                <span class=\"n\">StatementId</span><span class=\"o\">=</span><span class=\"n\">role_res</span><span class=\"p\">[</span><span class=\"s2\">&quot;Role&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;RoleId&quot;</span><span class=\"p\">],</span>\n                <span class=\"n\">Action</span><span class=\"o\">=</span><span class=\"s2\">&quot;lambda:GetLayerVersion&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">Principal</span><span class=\"o\">=</span><span class=\"s2\">&quot;*&quot;</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>  <span class=\"c1\"># letting the role be updated in AWS</span>\n\n            <span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layer</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">np_layer</span><span class=\"p\">:</span>\n            <span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">np_layer</span><span class=\"p\">)</span>\n            <span class=\"n\">layer_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">np_layer</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;:&quot;</span><span class=\"p\">)[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n            <span class=\"n\">LAMBDA_CLIENT</span><span class=\"o\">.</span><span class=\"n\">add_layer_version_permission</span><span class=\"p\">(</span>\n                <span class=\"n\">LayerName</span><span class=\"o\">=</span><span class=\"n\">layer_name</span><span class=\"p\">,</span>\n                <span class=\"n\">VersionNumber</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">np_layer_version</span><span class=\"p\">,</span>\n                <span class=\"n\">StatementId</span><span class=\"o\">=</span><span class=\"n\">role_res</span><span class=\"p\">[</span><span class=\"s2\">&quot;Role&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;RoleId&quot;</span><span class=\"p\">],</span>\n                <span class=\"n\">Action</span><span class=\"o\">=</span><span class=\"s2\">&quot;lambda:GetLayerVersion&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">Principal</span><span class=\"o\">=</span><span class=\"s2\">&quot;*&quot;</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>  <span class=\"c1\"># letting the role be updated in AWS</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">layers</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n\n            <span class=\"n\">lambda_config</span> <span class=\"o\">=</span> <span class=\"n\">LAMBDA_CLIENT</span><span class=\"o\">.</span><span class=\"n\">create_function</span><span class=\"p\">(</span>\n                <span class=\"n\">FunctionName</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n                <span class=\"n\">Runtime</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">runtime</span><span class=\"p\">,</span>\n                <span class=\"n\">Role</span><span class=\"o\">=</span><span class=\"n\">role_res</span><span class=\"p\">[</span><span class=\"s2\">&quot;Role&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Arn&quot;</span><span class=\"p\">],</span>\n                <span class=\"n\">Handler</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s2\">&quot;rh_handler_</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">.lambda_handler&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">Code</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;ZipFile&quot;</span><span class=\"p\">:</span> <span class=\"n\">zipped_code</span><span class=\"p\">},</span>\n                <span class=\"n\">Timeout</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">timeout</span><span class=\"p\">,</span>\n                <span class=\"n\">MemorySize</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">memory_size</span><span class=\"p\">,</span>\n                <span class=\"n\">Layers</span><span class=\"o\">=</span><span class=\"n\">layers</span><span class=\"p\">,</span>\n                <span class=\"n\">Environment</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;Variables&quot;</span><span class=\"p\">:</span> <span class=\"n\">env_vars</span><span class=\"p\">},</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">lambda_config</span> <span class=\"o\">=</span> <span class=\"n\">LAMBDA_CLIENT</span><span class=\"o\">.</span><span class=\"n\">create_function</span><span class=\"p\">(</span>\n                <span class=\"n\">FunctionName</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n                <span class=\"n\">Runtime</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">runtime</span><span class=\"p\">,</span>\n                <span class=\"n\">Role</span><span class=\"o\">=</span><span class=\"n\">role_res</span><span class=\"p\">[</span><span class=\"s2\">&quot;Role&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;Arn&quot;</span><span class=\"p\">],</span>\n                <span class=\"n\">Handler</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s2\">&quot;rh_handler_</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">.lambda_handler&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">Code</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;ZipFile&quot;</span><span class=\"p\">:</span> <span class=\"n\">zipped_code</span><span class=\"p\">},</span>\n                <span class=\"n\">Timeout</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">timeout</span><span class=\"p\">,</span>\n                <span class=\"n\">MemorySize</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">memory_size</span><span class=\"p\">,</span>\n                <span class=\"n\">Environment</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;Variables&quot;</span><span class=\"p\">:</span> <span class=\"n\">env_vars</span><span class=\"p\">},</span>\n            <span class=\"p\">)</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">&#39;</span><span class=\"si\">{</span><span class=\"n\">lambda_config</span><span class=\"p\">[</span><span class=\"s2\">&quot;FunctionName&quot;</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s1\"> was created successfully.&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">lambda_config</span>\n\n<div class=\"viewcode-block\" id=\"AWSLambdaFunction.to\"><a class=\"viewcode-back\" href=\"../../../../../api/python/aws_lambda_function/#runhouse.AWSLambdaFunction.to\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">to</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"c1\"># Variables below are deprecated</span>\n        <span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"p\">[],</span>\n        <span class=\"n\">reqs</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">setup_cmds</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"p\">[],</span>\n        <span class=\"n\">force_install</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">cloud</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;aws_lambda&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Set up a function on AWS as a Lambda function.</span>\n\n<span class=\"sd\">        See the args of the factory method :func:`aws_lambda` for more information.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; my_aws_lambda = rh.aws_lambda_function(path_to_codes=[&quot;full/path/to/model_a_handler.py&quot;],</span>\n<span class=\"sd\">            &gt;&gt;&gt; handler_function_name=&#39;main_func&#39;,</span>\n<span class=\"sd\">            &gt;&gt;&gt; runtime=&#39;python_3_9&#39;,</span>\n<span class=\"sd\">            &gt;&gt;&gt; name=&quot;my_lambda_func&quot;).to()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># Checking if the user have a credentials file</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">CRED_PATH_MAC</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">is_file</span><span class=\"p\">()</span> <span class=\"ow\">or</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">CRED_PATH_WIN</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">is_file</span><span class=\"p\">()):</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;No credentials found, </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">GEN_ERROR</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s2\">&quot;No credentials found&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">rh_handler_wrapper</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rh_wrapper</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">local_path_to_code</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">rh_handler_wrapper</span><span class=\"p\">)</span>\n        <span class=\"c1\"># self.local_path_to_code.pop(0)</span>\n\n        <span class=\"n\">env_vars</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">env_vars</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">env_vars</span> <span class=\"k\">else</span> <span class=\"p\">{}</span>\n\n        <span class=\"c1\"># if function exist - will update it. Else, a new one will be created.</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_lambda_exist</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">):</span>\n            <span class=\"c1\"># updating the configuration with the initial configuration.</span>\n            <span class=\"c1\"># TODO: enable the user to change the config of the Lambda.</span>\n            <span class=\"n\">lambda_config</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_lambda_config</span><span class=\"p\">(</span><span class=\"n\">env_vars</span><span class=\"p\">)</span>\n\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># creating a new Lambda function, since it&#39;s not existing in the AWS account which is configured locally.</span>\n            <span class=\"n\">lambda_config</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_create_new_lambda</span><span class=\"p\">(</span><span class=\"n\">env_vars</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">aws_lambda_config</span> <span class=\"o\">=</span> <span class=\"n\">lambda_config</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span></div>\n\n    <span class=\"c1\">#</span>\n    <span class=\"c1\">#     # ----------------- Function call methods -----------------</span>\n    <span class=\"c1\">#</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Any</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Call (invoke) the Lambdas function</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">             *args: Optional args for the Function</span>\n<span class=\"sd\">             **kwargs: Optional kwargs for the Function</span>\n\n<span class=\"sd\">        Returns:</span>\n<span class=\"sd\">            The Function&#39;s return value</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_invoke</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_invoke</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Any</span><span class=\"p\">:</span>\n        <span class=\"n\">payload_invoke</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">payload_invoke</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">args_names</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]:</span> <span class=\"n\">args</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">))}</span>\n        <span class=\"n\">invoke_res</span> <span class=\"o\">=</span> <span class=\"n\">LAMBDA_CLIENT</span><span class=\"o\">.</span><span class=\"n\">invoke</span><span class=\"p\">(</span>\n            <span class=\"n\">FunctionName</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n            <span class=\"n\">Payload</span><span class=\"o\">=</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">({</span><span class=\"o\">**</span><span class=\"n\">payload_invoke</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">}),</span>\n            <span class=\"n\">LogType</span><span class=\"o\">=</span><span class=\"s2\">&quot;Tail&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">return_value</span> <span class=\"o\">=</span> <span class=\"n\">invoke_res</span><span class=\"p\">[</span><span class=\"s2\">&quot;Payload&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s2\">&quot;utf-8&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"n\">invoke_res</span><span class=\"p\">[</span><span class=\"s2\">&quot;FunctionError&quot;</span><span class=\"p\">])</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;Failed to run </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">: </span><span class=\"si\">{</span><span class=\"n\">invoke_res</span><span class=\"p\">[</span><span class=\"s1\">&#39;FunctionError&#39;</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n            <span class=\"n\">log_lines</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Function Logs are:</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"o\">+</span> <span class=\"n\">base64</span><span class=\"o\">.</span><span class=\"n\">b64decode</span><span class=\"p\">(</span>\n                <span class=\"n\">invoke_res</span><span class=\"p\">[</span><span class=\"s2\">&quot;LogResult&quot;</span><span class=\"p\">]</span>\n            <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s2\">&quot;utf-8&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">log_lines</span><span class=\"p\">:</span>\n                <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>\n\n            <span class=\"k\">return</span> <span class=\"n\">return_value</span>\n\n<div class=\"viewcode-block\" id=\"AWSLambdaFunction.map\"><a class=\"viewcode-back\" href=\"../../../../../api/python/aws_lambda_function/#runhouse.AWSLambdaFunction.map\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">map</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Map a function over a list of arguments.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; # The my_lambda_handler.py file</span>\n<span class=\"sd\">            &gt;&gt;&gt; def my_summer(arg1, arg2, arg3):</span>\n<span class=\"sd\">            &gt;&gt;&gt;     return arg1 + arg2 + arg3</span>\n<span class=\"sd\">            &gt;&gt;&gt;</span>\n<span class=\"sd\">            &gt;&gt;&gt; # your &#39;main&#39; python file, where you are using runhouse</span>\n<span class=\"sd\">            &gt;&gt;&gt; aws_lambda = rh.aws_lambda_function(path_to_code=[&quot;full/path/to/my_lambda_handler.py&quot;],</span>\n<span class=\"sd\">            &gt;&gt;&gt; handler_function_name=&#39;my_summer&#39;,</span>\n<span class=\"sd\">            &gt;&gt;&gt; runtime=&#39;python_3_9&#39;,</span>\n<span class=\"sd\">            &gt;&gt;&gt; name=&quot;my_summer&quot;).to()</span>\n<span class=\"sd\">            &gt;&gt;&gt; aws_lambda.map([1, 2], [1, 4], [2, 3])</span>\n<span class=\"sd\">            &gt;&gt;&gt; # output: [&quot;4&quot;, &quot;9&quot;] (It returns str type because of AWS API)</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_invoke</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">args</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)]</span></div>\n\n    <span class=\"c1\">#</span>\n<div class=\"viewcode-block\" id=\"AWSLambdaFunction.starmap\"><a class=\"viewcode-back\" href=\"../../../../../api/python/aws_lambda_function/#runhouse.AWSLambdaFunction.starmap\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">starmap</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">args_lists</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Like :func:`map` except that the elements of the iterable are expected to be iterables</span>\n<span class=\"sd\">        that are unpacked as arguments. An iterable of [(1,2), (3, 4)] results in [func(1,2), func(3,4)].</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; arg_list = [(1,2), (3, 4)]</span>\n<span class=\"sd\">            &gt;&gt;&gt; # runs the function twice, once with args (1, 2) and once with args (3, 4)</span>\n<span class=\"sd\">            &gt;&gt;&gt; my_aws_lambda.starmap(arg_list)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_invoke</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">args</span> <span class=\"ow\">in</span> <span class=\"n\">args_lists</span><span class=\"p\">]</span></div>\n\n    <span class=\"c1\"># ----------------- Properties setup -----------------</span>\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">config_for_rns</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">config_for_rns</span>\n        <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span>\n            <span class=\"p\">{</span>\n                <span class=\"s2\">&quot;paths_to_code&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">local_path_to_code</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;handler_function_name&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">handler_function_name</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;runtime&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">runtime</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;timeout&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">timeout</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;memory_size&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">memory_size</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;args_names&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">args_names</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;reqs&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">reqs</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;layer&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layer</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;env_vars&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">env_vars</span><span class=\"p\">,</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">config</span></div>\n\n\n<div class=\"viewcode-block\" id=\"aws_lambda_function\"><a class=\"viewcode-back\" href=\"../../../../../api/python/aws_lambda_function/#runhouse.aws_lambda_function\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">aws_lambda_function</span><span class=\"p\">(</span>\n    <span class=\"n\">fn</span><span class=\"p\">:</span> <span class=\"n\">Callable</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">paths_to_code</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">handler_function_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">runtime</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">args_names</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"ow\">or</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">env_vars</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">30</span><span class=\"p\">,</span>\n    <span class=\"n\">memory_size</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">128</span><span class=\"p\">,</span>\n    <span class=\"n\">dryrun</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n<span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Builds an instance of :class:`AWSLambdaFunction`.</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        fn (Optional[Callable]): The Lambda function to be executed.</span>\n<span class=\"sd\">        paths_to_code: (Optional[list[str]]): List of the FULL paths to the python code file(s) that should be sent to</span>\n<span class=\"sd\">            AWS Lambda. First path in the list should be the path to the handler file which contaitns the main</span>\n<span class=\"sd\">            (handler) function. If ``fn`` is provided, this argument is ignored.</span>\n<span class=\"sd\">        handler_function_name: str: The name of the function in the handler file that will be executed by the Lambda.</span>\n<span class=\"sd\">        runtime: str: The coding language of the fuction. Should be one of the following:</span>\n<span class=\"sd\">            python3.7, python3.8, python3.9, python3.10, python 3.11. (Default: ``python3.9``)</span>\n<span class=\"sd\">        args_names: (Optional[list[str]]): List of the function&#39;s accepted parameters, which will be passed to the</span>\n<span class=\"sd\">            Lambda Function. If ``fn`` is provided, this argument is ignored.</span>\n<span class=\"sd\">            If your function doesn&#39;t accept arguments, please provide an empty list.</span>\n<span class=\"sd\">        name (Optional[str]): Name of the Lambda Function to create or retrieve.</span>\n<span class=\"sd\">            This can be either from a local config or from the RNS.</span>\n<span class=\"sd\">        env (Optional[List[str] or str]): Specifies the requirements (python libraries), which will be used by the</span>\n<span class=\"sd\">            Lambda.Can be a list or path to the requirements.txt file. All provided libraries are required to be</span>\n<span class=\"sd\">            installed locally.</span>\n<span class=\"sd\">        env_vars: Optional[dict]: Dictionary of enviroumnt varible name (key) and its value. They will be</span>\n<span class=\"sd\">            deployed as enviroumnt varibles, which are a port of the Lambda configuration.</span>\n<span class=\"sd\">        timeout: Optional[int]: The maximum amount of time (in secods) during which the Lambda will run in AWS</span>\n<span class=\"sd\">            without timing-out. (Default: ``30``, Min: ``3``, Max: ``900``)</span>\n<span class=\"sd\">        memory_size: Optional[int], The amount of memeory, im MB, that will be aloocatied to the lambda.</span>\n<span class=\"sd\">             (Default: ``128``, Min: ``128``, Max: ``10240``)</span>\n<span class=\"sd\">        dryrun (bool): Whether to create the Function if it doesn&#39;t exist, or load the Function object as a dryrun.</span>\n<span class=\"sd\">            (Default: ``False``). Is not used by Lambda, but is a port of Function constructor signatuere.</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        AWSLambdaFunction: The resulting AWS Lambda Function object.</span>\n\n<span class=\"sd\">        .. note::</span>\n<span class=\"sd\">            1. Some older python versions are not suporrted by the latest numpy and pandas versions.</span>\n<span class=\"sd\">            When creating a numpy or pandas layer, their version will be according to the Lambda&#39;s python version</span>\n<span class=\"sd\">            (aka Lambda&#39;s runtime).\\n</span>\n<span class=\"sd\">            2. When creating the function for the first time (and not reloading it), the following arguments are</span>\n<span class=\"sd\">            mandatory: paths_to_code, handler_function_name, runtime, args_names.</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; import runhouse as rh</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; # handler_file.py</span>\n<span class=\"sd\">        &gt;&gt;&gt; def summer(a, b):</span>\n<span class=\"sd\">        &gt;&gt;&gt;    return a + b</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; # your &#39;main&#39; python file, where you are using runhouse</span>\n<span class=\"sd\">        &gt;&gt;&gt; lambdas_func = rh.aws_lambda_function(</span>\n<span class=\"sd\">        &gt;&gt;&gt;                     paths_to_code=[&#39;/full/path/to/handler_file.py&#39;],</span>\n<span class=\"sd\">        &gt;&gt;&gt;                     handler_function_name = &#39;summer&#39;,</span>\n<span class=\"sd\">        &gt;&gt;&gt;                     runtime = &#39;python3.9&#39;,</span>\n<span class=\"sd\">        &gt;&gt;&gt;                     name=&quot;my_func&quot;).to().save()</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; # using the function</span>\n<span class=\"sd\">        &gt;&gt;&gt; res = summer(5, 8)  # returns &quot;13&quot;. (It returns str type because of AWS API)</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; # Load function from above</span>\n<span class=\"sd\">        &gt;&gt;&gt; reloaded_function = rh.aws_lambda_function(name=&quot;my_func&quot;)</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; # Pass in the function itself when creating the Lambda</span>\n<span class=\"sd\">        &gt;&gt;&gt; lambdas_func = rh.aws_lambda_function(fn=summer, name=&quot;lambdas_func&quot;)</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">any</span><span class=\"p\">([</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">paths_to_code</span><span class=\"p\">,</span> <span class=\"n\">handler_function_name</span><span class=\"p\">,</span> <span class=\"n\">runtime</span><span class=\"p\">,</span> <span class=\"n\">fn</span><span class=\"p\">,</span> <span class=\"n\">args_names</span><span class=\"p\">]):</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;Runhouse can&#39;t create a Lambda function. &quot;</span>\n            <span class=\"o\">+</span> <span class=\"s2\">&quot;Please provide lambda&#39;s name and/or paths_to_code, handler_function_name, runtime and args_names&quot;</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s2\">&quot;NoEnoughArgsProvided&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"nb\">any</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span><span class=\"n\">paths_to_code</span><span class=\"p\">,</span> <span class=\"n\">handler_function_name</span><span class=\"p\">,</span> <span class=\"n\">runtime</span><span class=\"p\">,</span> <span class=\"n\">fn</span><span class=\"p\">,</span> <span class=\"n\">args_names</span><span class=\"p\">]</span>\n    <span class=\"p\">):</span>\n        <span class=\"c1\"># Try reloading existing function</span>\n        <span class=\"k\">return</span> <span class=\"n\">AWSLambdaFunction</span><span class=\"o\">.</span><span class=\"n\">from_name</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># ------- arguments validation -------</span>\n    <span class=\"k\">if</span> <span class=\"n\">paths_to_code</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">paths_to_code</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Please provide a path to the lambda handler file.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span>\n    <span class=\"k\">if</span> <span class=\"n\">handler_function_name</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">handler_function_name</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;Please provide the name of the function that should be executed by the lambda.&quot;</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span>\n    <span class=\"k\">if</span> <span class=\"n\">runtime</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"n\">runtime</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">SUPPORTED_RUNTIMES</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n            <span class=\"sa\">f</span><span class=\"s2\">&quot;Please provide a supported lambda runtime, should be one of the following: </span><span class=\"si\">{</span><span class=\"n\">SUPPORTED_RUNTIMES</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span>\n    <span class=\"k\">if</span> <span class=\"n\">args_names</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;Please provide the names of the arguments provided to handler function, in the order they are&quot;</span>\n            <span class=\"o\">+</span> <span class=\"s2\">&quot; passed to the lambda function.&quot;</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span>\n\n    <span class=\"c1\"># TODO: [SB] in the next phase, maybe add the option to create func from git.</span>\n\n    <span class=\"n\">fn_pointers</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"n\">Function</span><span class=\"o\">.</span><span class=\"n\">_extract_pointers</span><span class=\"p\">(</span><span class=\"n\">fn</span><span class=\"p\">,</span> <span class=\"n\">reqs</span><span class=\"o\">=</span><span class=\"n\">env</span> <span class=\"ow\">or</span> <span class=\"p\">[])</span> <span class=\"k\">if</span> <span class=\"nb\">callable</span><span class=\"p\">(</span><span class=\"n\">fn</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"kc\">None</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">new_function</span> <span class=\"o\">=</span> <span class=\"n\">AWSLambdaFunction</span><span class=\"p\">(</span>\n        <span class=\"n\">fn</span><span class=\"o\">=</span><span class=\"n\">fn</span><span class=\"p\">,</span>\n        <span class=\"n\">fn_pointers</span><span class=\"o\">=</span><span class=\"n\">fn_pointers</span><span class=\"p\">,</span>\n        <span class=\"n\">paths_to_code</span><span class=\"o\">=</span><span class=\"n\">paths_to_code</span><span class=\"p\">,</span>\n        <span class=\"n\">handler_function_name</span><span class=\"o\">=</span><span class=\"n\">handler_function_name</span><span class=\"p\">,</span>\n        <span class=\"n\">runtime</span><span class=\"o\">=</span><span class=\"n\">runtime</span><span class=\"p\">,</span>\n        <span class=\"n\">args_names</span><span class=\"o\">=</span><span class=\"n\">args_names</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span>\n        <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"n\">env</span><span class=\"p\">,</span>\n        <span class=\"n\">env_vars</span><span class=\"o\">=</span><span class=\"n\">env_vars</span><span class=\"p\">,</span>\n        <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">,</span>\n        <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"n\">timeout</span><span class=\"p\">,</span>\n        <span class=\"n\">memory_size</span><span class=\"o\">=</span><span class=\"n\">memory_size</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">()</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">new_function</span></div>\n</pre></div>", "current_page_name": "_modules/runhouse/resources/serverless/aws_lambda_function", "sidebars": ["about.html", "navigation.html", "relations.html", "searchbox.html", "donate.html"], "customsidebar": null, "alabaster_version": "0.7.13"}