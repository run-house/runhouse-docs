{"parents": [{"link": "../../../../", "title": "Module code"}], "title": "runhouse.resources.hardware.on_demand_cluster", "body": "<h1>Source code for runhouse.resources.hardware.on_demand_cluster</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">contextlib</span>\n<span class=\"kn\">import</span> <span class=\"nn\">subprocess</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">warnings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">concurrent.futures</span> <span class=\"kn\">import</span> <span class=\"n\">ProcessPoolExecutor</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Union</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">rich.errors</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">sky</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">sky</span> <span class=\"kn\">import</span> <span class=\"n\">ClusterStatus</span> <span class=\"k\">as</span> <span class=\"n\">SkyClusterStatus</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">sky.backends</span> <span class=\"kn\">import</span> <span class=\"n\">backend_utils</span>\n<span class=\"k\">except</span> <span class=\"ne\">ImportError</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.constants</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">DEFAULT_HTTP_PORT</span><span class=\"p\">,</span>\n    <span class=\"n\">DEFAULT_HTTPS_PORT</span><span class=\"p\">,</span>\n    <span class=\"n\">DEFAULT_SERVER_PORT</span><span class=\"p\">,</span>\n    <span class=\"n\">LOCAL_HOSTS</span><span class=\"p\">,</span>\n    <span class=\"n\">SSH_SKY_SECRET_NAME</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.globals</span> <span class=\"kn\">import</span> <span class=\"n\">configs</span><span class=\"p\">,</span> <span class=\"n\">obj_store</span><span class=\"p\">,</span> <span class=\"n\">rns_client</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.logger</span> <span class=\"kn\">import</span> <span class=\"n\">get_logger</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.hardware.utils</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">_cluster_set_autostop_command</span><span class=\"p\">,</span>\n    <span class=\"n\">ClusterStatus</span><span class=\"p\">,</span>\n    <span class=\"n\">LauncherType</span><span class=\"p\">,</span>\n    <span class=\"n\">RunhouseDaemonStatus</span><span class=\"p\">,</span>\n    <span class=\"n\">ServerConnectionType</span><span class=\"p\">,</span>\n    <span class=\"n\">up_cluster_helper</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.cluster</span> <span class=\"kn\">import</span> <span class=\"n\">Cluster</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.launcher_utils</span> <span class=\"kn\">import</span> <span class=\"n\">DenLauncher</span><span class=\"p\">,</span> <span class=\"n\">LocalLauncher</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">get_logger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"OnDemandCluster\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.OnDemandCluster\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">OnDemandCluster</span><span class=\"p\">(</span><span class=\"n\">Cluster</span><span class=\"p\">):</span>\n    <span class=\"n\">RESOURCE_TYPE</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;cluster&quot;</span>\n    <span class=\"n\">RECONNECT_TIMEOUT</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n    <span class=\"n\">DEFAULT_KEYFILE</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;~/.ssh/sky-key&quot;</span>\n\n<div class=\"viewcode-block\" id=\"OnDemandCluster.__init__\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.OnDemandCluster.__init__\">[docs]</a>    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"p\">,</span>\n        <span class=\"n\">instance_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">num_nodes</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">provider</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">dryrun</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">autostop_mins</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">use_spot</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">memory</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">disk_size</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">num_cpus</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">gpus</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">open_ports</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">server_host</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">server_port</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">server_connection_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">launcher</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">ssl_keyfile</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">ssl_certfile</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">domain</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">den_auth</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">region</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">vpc_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">sky_kwargs</span><span class=\"p\">:</span> <span class=\"n\">Dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>  <span class=\"c1\"># We have this here to ignore extra arguments when calling from from_config</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        On-demand `SkyPilot &lt;https://github.com/skypilot-org/skypilot/&gt;`__ Cluster.</span>\n\n<span class=\"sd\">        .. note::</span>\n<span class=\"sd\">            To build a cluster, please use the factory method :func:`cluster`.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">launcher</span> <span class=\"o\">=</span> <span class=\"n\">launcher</span> <span class=\"ow\">or</span> <span class=\"n\">configs</span><span class=\"o\">.</span><span class=\"n\">launcher</span>\n\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span>\n            <span class=\"n\">server_host</span><span class=\"o\">=</span><span class=\"n\">server_host</span><span class=\"p\">,</span>\n            <span class=\"n\">server_port</span><span class=\"o\">=</span><span class=\"n\">server_port</span><span class=\"p\">,</span>\n            <span class=\"n\">server_connection_type</span><span class=\"o\">=</span><span class=\"n\">server_connection_type</span><span class=\"p\">,</span>\n            <span class=\"n\">ssl_keyfile</span><span class=\"o\">=</span><span class=\"n\">ssl_keyfile</span><span class=\"p\">,</span>\n            <span class=\"n\">ssl_certfile</span><span class=\"o\">=</span><span class=\"n\">ssl_certfile</span><span class=\"p\">,</span>\n            <span class=\"n\">domain</span><span class=\"o\">=</span><span class=\"n\">domain</span><span class=\"p\">,</span>\n            <span class=\"n\">den_auth</span><span class=\"o\">=</span><span class=\"n\">den_auth</span><span class=\"p\">,</span>\n            <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">,</span>\n            <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instance_type</span> <span class=\"o\">=</span> <span class=\"n\">instance_type</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">num_nodes</span> <span class=\"o\">=</span> <span class=\"n\">num_nodes</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">provider</span> <span class=\"o\">=</span> <span class=\"n\">provider</span> <span class=\"ow\">or</span> <span class=\"n\">configs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;default_provider&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_autostop_mins</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"n\">autostop_mins</span>\n            <span class=\"k\">if</span> <span class=\"n\">autostop_mins</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n            <span class=\"k\">else</span> <span class=\"n\">configs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;default_autostop&quot;</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">open_ports</span> <span class=\"o\">=</span> <span class=\"n\">open_ports</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">use_spot</span> <span class=\"o\">=</span> <span class=\"n\">use_spot</span> <span class=\"k\">if</span> <span class=\"n\">use_spot</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"k\">else</span> <span class=\"n\">configs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;use_spot&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">region</span> <span class=\"o\">=</span> <span class=\"n\">region</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">memory</span> <span class=\"o\">=</span> <span class=\"n\">memory</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">disk_size</span> <span class=\"o\">=</span> <span class=\"n\">disk_size</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_num_cpus</span> <span class=\"o\">=</span> <span class=\"n\">num_cpus</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_gpus</span> <span class=\"o\">=</span> <span class=\"n\">gpus</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sky_kwargs</span> <span class=\"o\">=</span> <span class=\"n\">sky_kwargs</span> <span class=\"ow\">or</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">vpc_name</span> <span class=\"o\">=</span> <span class=\"n\">vpc_name</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">compute_properties</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"c1\"># backwards compatibility</span>\n        <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;stable_internal_external_ips&quot;</span><span class=\"p\">):</span>\n            <span class=\"n\">internal_ips</span><span class=\"p\">,</span> <span class=\"n\">ips</span> <span class=\"o\">=</span> <span class=\"nb\">map</span><span class=\"p\">(</span>\n                <span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;stable_internal_external_ips&quot;</span><span class=\"p\">))</span>\n            <span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">compute_properties</span><span class=\"p\">[</span><span class=\"s2\">&quot;ips&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ips</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">compute_properties</span><span class=\"p\">[</span><span class=\"s2\">&quot;internal_ips&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">internal_ips</span>\n        <span class=\"k\">elif</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;ips&quot;</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">compute_properties</span><span class=\"p\">[</span><span class=\"s2\">&quot;ips&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;ips&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">compute_properties</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"o\">**</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">compute_properties</span><span class=\"p\">,</span>\n            <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;compute_properties&quot;</span><span class=\"p\">,</span> <span class=\"p\">{}),</span>\n            <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;launched_properties&quot;</span><span class=\"p\">,</span> <span class=\"p\">{}),</span>\n        <span class=\"p\">}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_docker_user</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_kube_namespace</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;kube_namespace&quot;</span>\n        <span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">compute_properties</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;kube_namespace&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_kube_context</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;kube_context&quot;</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">compute_properties</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;kube_context&quot;</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cluster_status</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;cluster_status&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Checks if state info is in local sky db, populates if so.</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">dryrun</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ips</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">launcher</span> <span class=\"o\">==</span> <span class=\"n\">LauncherType</span><span class=\"o\">.</span><span class=\"n\">LOCAL</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Cluster status is set to INIT in the Sky DB right after starting, so we need to refresh once</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_from_sky_status</span><span class=\"p\">(</span><span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span></div>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">ips</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">compute_properties</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;ips&quot;</span><span class=\"p\">,</span> <span class=\"p\">[])</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">internal_ips</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">compute_properties</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;internal_ips&quot;</span><span class=\"p\">,</span> <span class=\"p\">[])</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">client</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">client</span>\n        <span class=\"k\">except</span> <span class=\"ne\">ValueError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ips</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Try loading in from local Sky DB</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_from_sky_status</span><span class=\"p\">(</span><span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ips</span><span class=\"p\">:</span>\n                    <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                        <span class=\"sa\">f</span><span class=\"s2\">&quot;Could not determine ips for ondemand cluster &lt;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">&gt;. &quot;</span>\n                        <span class=\"s2\">&quot;Up the cluster with `cluster.up_if_not`.&quot;</span>\n                    <span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">client</span>\n            <span class=\"k\">raise</span> <span class=\"n\">e</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">autostop_mins</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_autostop_mins</span>\n\n    <span class=\"nd\">@autostop_mins</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">autostop_mins</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">mins</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_autostop_mins</span> <span class=\"o\">=</span> <span class=\"n\">mins</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_up</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">():</span>\n            <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">set_cluster_config_value</span><span class=\"p\">(</span><span class=\"s2\">&quot;autostop_mins&quot;</span><span class=\"p\">,</span> <span class=\"n\">mins</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">call_client_method</span><span class=\"p\">(</span><span class=\"s2\">&quot;set_settings&quot;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">&quot;autostop_mins&quot;</span><span class=\"p\">:</span> <span class=\"n\">mins</span><span class=\"p\">})</span>\n\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">launcher</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;local&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">LocalLauncher</span><span class=\"o\">.</span><span class=\"n\">keep_warm</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">mins</span><span class=\"p\">)</span>\n\n            <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">launcher</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;den&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">DenLauncher</span><span class=\"o\">.</span><span class=\"n\">keep_warm</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">mins</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">image_id</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">image</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">image_id</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">image_id</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">docker_user</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_docker_user</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_docker_user</span>\n\n        <span class=\"c1\"># TODO detect whether this is a k8s cluster properly, and handle the user setting / SSH properly</span>\n        <span class=\"c1\">#  (e.g. SkyPilot&#39;s new KubernetesCommandRunner)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">image_id</span> <span class=\"ow\">or</span> <span class=\"s2\">&quot;docker:&quot;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">image_id</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">compute_properties</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;cloud&quot;</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;kubernetes&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">compute_properties</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;docker_user&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">compute_properties</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;ssh_user&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;root&quot;</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.hardware.sky_command_runner</span> <span class=\"kn\">import</span> <span class=\"n\">get_docker_user</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_creds</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_docker_user</span> <span class=\"o\">=</span> <span class=\"n\">get_docker_user</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ssh_properties</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_docker_user</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">config</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">condensed</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">(</span><span class=\"n\">condensed</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">save_attrs_to_config</span><span class=\"p\">(</span>\n            <span class=\"n\">config</span><span class=\"p\">,</span>\n            <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;instance_type&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;num_nodes&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;provider&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;open_ports&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;use_spot&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;region&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;memory&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;disk_size&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;vpc_name&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;sky_kwargs&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;launcher&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;compute_properties&quot;</span><span class=\"p\">,</span>\n            <span class=\"p\">],</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;autostop_mins&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_autostop_mins</span>\n        <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;num_cpus&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_num_cpus</span>\n        <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;gpus&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_gpus</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_kube_namespace</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;kube_namespace&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_kube_namespace</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_kube_context</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;kube_context&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_kube_context</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">config</span>\n\n<div class=\"viewcode-block\" id=\"OnDemandCluster.endpoint\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.OnDemandCluster.endpoint\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">endpoint</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">external</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ips</span>\n            <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">()</span>\n            <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cluster_status</span> <span class=\"o\">==</span> <span class=\"n\">ClusterStatus</span><span class=\"o\">.</span><span class=\"n\">TERMINATED</span>\n        <span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">check_server</span><span class=\"p\">()</span>\n        <span class=\"k\">except</span> <span class=\"ne\">ConnectionError</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">endpoint</span><span class=\"p\">(</span><span class=\"n\">external</span><span class=\"p\">)</span></div>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">relative_yaml_path</span><span class=\"p\">(</span><span class=\"n\">yaml_path</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">yaml_path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">is_absolute</span><span class=\"p\">():</span>\n            <span class=\"n\">yaml_path</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;~/.sky/generated/&quot;</span> <span class=\"o\">+</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">yaml_path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"k\">return</span> <span class=\"n\">yaml_path</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_set_connection_defaults</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_connection_type</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ssl_keyfile</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ssl_certfile</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_connection_type</span> <span class=\"o\">=</span> <span class=\"n\">ServerConnectionType</span><span class=\"o\">.</span><span class=\"n\">TLS</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_connection_type</span> <span class=\"o\">=</span> <span class=\"n\">ServerConnectionType</span><span class=\"o\">.</span><span class=\"n\">SSH</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_port</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_connection_type</span> <span class=\"o\">==</span> <span class=\"n\">ServerConnectionType</span><span class=\"o\">.</span><span class=\"n\">TLS</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_port</span> <span class=\"o\">=</span> <span class=\"n\">DEFAULT_HTTPS_PORT</span>\n            <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_connection_type</span> <span class=\"o\">==</span> <span class=\"n\">ServerConnectionType</span><span class=\"o\">.</span><span class=\"n\">NONE</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_port</span> <span class=\"o\">=</span> <span class=\"n\">DEFAULT_HTTP_PORT</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_port</span> <span class=\"o\">=</span> <span class=\"n\">DEFAULT_SERVER_PORT</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_connection_type</span>\n            <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">ServerConnectionType</span><span class=\"o\">.</span><span class=\"n\">TLS</span><span class=\"p\">,</span> <span class=\"n\">ServerConnectionType</span><span class=\"o\">.</span><span class=\"n\">NONE</span><span class=\"p\">]</span>\n            <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_host</span> <span class=\"ow\">in</span> <span class=\"n\">LOCAL_HOSTS</span>\n        <span class=\"p\">):</span>\n            <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;Server connection type: </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_connection_type</span><span class=\"si\">}</span><span class=\"s2\">, server host: </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_host</span><span class=\"si\">}</span><span class=\"s2\">. &quot;</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;Note that this will require opening an SSH tunnel to forward traffic from&quot;</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot; </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_host</span><span class=\"si\">}</span><span class=\"s2\"> to the server.&quot;</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">open_ports</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"p\">[]</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">open_ports</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n            <span class=\"k\">else</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">open_ports</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">open_ports</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">))</span>\n            <span class=\"k\">else</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">open_ports</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">open_ports</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">open_ports</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">open_ports</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_port</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">open_ports</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_connection_type</span>\n                    <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">ServerConnectionType</span><span class=\"o\">.</span><span class=\"n\">TLS</span><span class=\"p\">,</span> <span class=\"n\">ServerConnectionType</span><span class=\"o\">.</span><span class=\"n\">NONE</span><span class=\"p\">]</span>\n                    <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">den_auth</span>\n                <span class=\"p\">):</span>\n                    <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n                        <span class=\"s2\">&quot;Server is insecure and must be inside a VPC or have `den_auth` enabled to secure it.&quot;</span>\n                    <span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;Server port </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_port</span><span class=\"si\">}</span><span class=\"s2\"> not included in open ports. Note you are responsible for opening &quot;</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;the port or ensure you have access to it via a VPC.&quot;</span>\n                <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># If using HTTP or HTTPS must enable traffic on the relevant port</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_connection_type</span> <span class=\"ow\">in</span> <span class=\"p\">[</span>\n                <span class=\"n\">ServerConnectionType</span><span class=\"o\">.</span><span class=\"n\">TLS</span><span class=\"p\">,</span>\n                <span class=\"n\">ServerConnectionType</span><span class=\"o\">.</span><span class=\"n\">NONE</span><span class=\"p\">,</span>\n            <span class=\"p\">]:</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_port</span><span class=\"p\">:</span>\n                    <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n                        <span class=\"sa\">f</span><span class=\"s2\">&quot;No open ports specified. Setting default port </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_port</span><span class=\"si\">}</span><span class=\"s2\"> to open.&quot;</span>\n                    <span class=\"p\">)</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">open_ports</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_port</span><span class=\"p\">)]</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n                        <span class=\"sa\">f</span><span class=\"s2\">&quot;No open ports specified. Make sure the relevant port is open. &quot;</span>\n                        <span class=\"sa\">f</span><span class=\"s2\">&quot;HTTPS default: </span><span class=\"si\">{</span><span class=\"n\">DEFAULT_HTTPS_PORT</span><span class=\"si\">}</span><span class=\"s2\"> and HTTP &quot;</span>\n                        <span class=\"sa\">f</span><span class=\"s2\">&quot;default: </span><span class=\"si\">{</span><span class=\"n\">DEFAULT_HTTP_PORT</span><span class=\"si\">}</span><span class=\"s2\">.&quot;</span>\n                    <span class=\"p\">)</span>\n\n    <span class=\"c1\"># ----------------- Launch/Lifecycle Methods -----------------</span>\n\n<div class=\"viewcode-block\" id=\"OnDemandCluster.is_up\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.OnDemandCluster.is_up\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">is_up</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Whether the cluster is up.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; rh.ondemand_cluster(&quot;rh-cpu&quot;).is_up()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.hardware.utils</span> <span class=\"kn\">import</span> <span class=\"n\">ClusterStatus</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n        <span class=\"c1\"># Check sky status without refresh if locally launched</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">launcher</span> <span class=\"o\">==</span> <span class=\"n\">LauncherType</span><span class=\"o\">.</span><span class=\"n\">LOCAL</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fetch_sky_status_and_update_cluster_status</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cluster_status</span> <span class=\"o\">==</span> <span class=\"n\">ClusterStatus</span><span class=\"o\">.</span><span class=\"n\">TERMINATED</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ping</span><span class=\"p\">(</span><span class=\"n\">retry</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_sky_status</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">refresh</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">retry</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Get status of Sky cluster.</span>\n\n<span class=\"sd\">        Return dict looks like:</span>\n\n<span class=\"sd\">        .. code-block::</span>\n\n<span class=\"sd\">            {&#39;name&#39;: &#39;sky-cpunode-donny&#39;,</span>\n<span class=\"sd\">             &#39;launched_at&#39;: 1662317201,</span>\n<span class=\"sd\">             &#39;handle&#39;: ResourceHandle(</span>\n<span class=\"sd\">                          cluster_name=sky-cpunode-donny,</span>\n<span class=\"sd\">                          head_ip=54.211.97.164,</span>\n<span class=\"sd\">                          cluster_yaml=/Users/donny/.sky/generated/sky-cpunode-donny.yml,</span>\n<span class=\"sd\">                          launched_resources=1x AWS(m6i.2xlarge),</span>\n<span class=\"sd\">                          tpu_create_script=None,</span>\n<span class=\"sd\">                          tpu_delete_script=None),</span>\n<span class=\"sd\">             &#39;last_use&#39;: &#39;sky cpunode&#39;,</span>\n<span class=\"sd\">             &#39;status&#39;: &lt;ClusterStatus.UP: &#39;UP&#39;&gt;,</span>\n<span class=\"sd\">             &#39;autostop&#39;: -1,</span>\n<span class=\"sd\">             &#39;metadata&#39;: {}}</span>\n\n\n<span class=\"sd\">        .. note:: For more information see SkyPilot&#39;s :code:`ResourceHandle` `class</span>\n<span class=\"sd\">        &lt;https://github.com/skypilot-org/skypilot/blob/0c2b291b03abe486b521b40a3069195e56b62324/sky/backends/cloud_vm_ray_backend.py#L1457&gt;`__.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">sky</span><span class=\"o\">.</span><span class=\"n\">global_user_state</span><span class=\"o\">.</span><span class=\"n\">get_cluster_from_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">sky</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">(</span><span class=\"n\">cluster_names</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">],</span> <span class=\"n\">refresh</span><span class=\"o\">=</span><span class=\"n\">refresh</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"n\">rich</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"o\">.</span><span class=\"n\">LiveError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"c1\"># We can&#39;t have more than one Live display at once, so if we&#39;ve already launched one (e.g. the first</span>\n            <span class=\"c1\"># time we call status), we can retry without refreshing</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">retry</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"n\">e</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_sky_status</span><span class=\"p\">(</span><span class=\"n\">refresh</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">retry</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># We still need to check if the cluster present in case the cluster went down and was removed from the DB</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n        <span class=\"k\">return</span> <span class=\"n\">state</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_start_ray_workers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">ray_port</span><span class=\"p\">,</span> <span class=\"n\">env_vars</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">internal_ips</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_from_sky_status</span><span class=\"p\">()</span>\n\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">_start_ray_workers</span><span class=\"p\">(</span><span class=\"n\">ray_port</span><span class=\"p\">,</span> <span class=\"n\">env_vars</span><span class=\"p\">)</span>\n\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_update_cluster_status_from_sky_status</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sky_status</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">sky_status</span> <span class=\"o\">==</span> <span class=\"n\">SkyClusterStatus</span><span class=\"o\">.</span><span class=\"n\">UP</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cluster_status</span> <span class=\"o\">=</span> <span class=\"n\">ClusterStatus</span><span class=\"o\">.</span><span class=\"n\">RUNNING</span>\n        <span class=\"k\">if</span> <span class=\"n\">sky_status</span> <span class=\"o\">==</span> <span class=\"n\">SkyClusterStatus</span><span class=\"o\">.</span><span class=\"n\">STOPPED</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cluster_status</span> <span class=\"o\">=</span> <span class=\"n\">ClusterStatus</span><span class=\"o\">.</span><span class=\"n\">TERMINATED</span>\n        <span class=\"k\">if</span> <span class=\"n\">sky_status</span> <span class=\"o\">==</span> <span class=\"n\">SkyClusterStatus</span><span class=\"o\">.</span><span class=\"n\">INIT</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cluster_status</span> <span class=\"o\">=</span> <span class=\"n\">ClusterStatus</span><span class=\"o\">.</span><span class=\"n\">INITIALIZING</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_fetch_sky_status_and_update_cluster_status</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">cluster_dict</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_sky_status</span><span class=\"p\">(</span><span class=\"n\">refresh</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">cluster_dict</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cluster_status</span> <span class=\"o\">=</span> <span class=\"n\">ClusterStatus</span><span class=\"o\">.</span><span class=\"n\">TERMINATED</span>\n            <span class=\"k\">return</span>\n\n        <span class=\"n\">sky_status</span> <span class=\"o\">=</span> <span class=\"n\">cluster_dict</span><span class=\"p\">[</span><span class=\"s2\">&quot;status&quot;</span><span class=\"p\">]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_cluster_status_from_sky_status</span><span class=\"p\">(</span><span class=\"n\">sky_status</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_populate_connection_from_status_dict</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">cluster_dict</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">cluster_dict</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n\n        <span class=\"n\">sky_status</span> <span class=\"o\">=</span> <span class=\"n\">cluster_dict</span><span class=\"p\">[</span><span class=\"s2\">&quot;status&quot;</span><span class=\"p\">]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_cluster_status_from_sky_status</span><span class=\"p\">(</span><span class=\"n\">sky_status</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">sky_status</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">SkyClusterStatus</span><span class=\"o\">.</span><span class=\"n\">UP</span><span class=\"p\">,</span> <span class=\"n\">SkyClusterStatus</span><span class=\"o\">.</span><span class=\"n\">INIT</span><span class=\"p\">]:</span>\n            <span class=\"n\">handle</span> <span class=\"o\">=</span> <span class=\"n\">cluster_dict</span><span class=\"p\">[</span><span class=\"s2\">&quot;handle&quot;</span><span class=\"p\">]</span>\n            <span class=\"n\">head_ip</span> <span class=\"o\">=</span> <span class=\"n\">handle</span><span class=\"o\">.</span><span class=\"n\">head_ip</span>\n            <span class=\"n\">internal_ips</span><span class=\"p\">,</span> <span class=\"n\">ips</span> <span class=\"o\">=</span> <span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">handle</span><span class=\"o\">.</span><span class=\"n\">stable_internal_external_ips</span><span class=\"p\">))</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">ips</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"n\">head_ip</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;Sky&#39;s cluster status does not have the necessary information to connect to the cluster. Please check if the cluster is up via `sky status`. Consider bringing down the cluster with `sky down` if you are still having issues.&quot;</span>\n                <span class=\"p\">)</span>\n            <span class=\"n\">yaml_path</span> <span class=\"o\">=</span> <span class=\"n\">handle</span><span class=\"o\">.</span><span class=\"n\">cluster_yaml</span>\n            <span class=\"k\">if</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">yaml_path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">():</span>\n                <span class=\"n\">ssh_values</span> <span class=\"o\">=</span> <span class=\"n\">backend_utils</span><span class=\"o\">.</span><span class=\"n\">ssh_credential_from_yaml</span><span class=\"p\">(</span>\n                    <span class=\"n\">yaml_path</span><span class=\"p\">,</span> <span class=\"n\">ssh_user</span><span class=\"o\">=</span><span class=\"n\">handle</span><span class=\"o\">.</span><span class=\"n\">ssh_user</span>\n                <span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ssh_properties</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_setup_creds</span><span class=\"p\">(</span><span class=\"n\">ssh_values</span><span class=\"p\">)</span>\n\n            <span class=\"n\">launched_resource</span> <span class=\"o\">=</span> <span class=\"n\">handle</span><span class=\"o\">.</span><span class=\"n\">launched_resources</span>\n            <span class=\"n\">cloud</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">launched_resource</span><span class=\"o\">.</span><span class=\"n\">cloud</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>\n            <span class=\"n\">instance_type</span> <span class=\"o\">=</span> <span class=\"n\">launched_resource</span><span class=\"o\">.</span><span class=\"n\">instance_type</span>\n            <span class=\"n\">region</span> <span class=\"o\">=</span> <span class=\"n\">launched_resource</span><span class=\"o\">.</span><span class=\"n\">region</span>\n            <span class=\"n\">cost_per_hr</span> <span class=\"o\">=</span> <span class=\"n\">launched_resource</span><span class=\"o\">.</span><span class=\"n\">get_cost</span><span class=\"p\">(</span><span class=\"mi\">60</span> <span class=\"o\">*</span> <span class=\"mi\">60</span><span class=\"p\">)</span>\n            <span class=\"n\">disk_size</span> <span class=\"o\">=</span> <span class=\"n\">launched_resource</span><span class=\"o\">.</span><span class=\"n\">disk_size</span>\n            <span class=\"n\">num_cpus</span> <span class=\"o\">=</span> <span class=\"n\">launched_resource</span><span class=\"o\">.</span><span class=\"n\">cpus</span>\n            <span class=\"n\">memory</span> <span class=\"o\">=</span> <span class=\"n\">launched_resource</span><span class=\"o\">.</span><span class=\"n\">memory</span>\n\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">compute_properties</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                <span class=\"s2\">&quot;ips&quot;</span><span class=\"p\">:</span> <span class=\"n\">ips</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;internal_ips&quot;</span><span class=\"p\">:</span> <span class=\"n\">internal_ips</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;cloud&quot;</span><span class=\"p\">:</span> <span class=\"n\">cloud</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;instance_type&quot;</span><span class=\"p\">:</span> <span class=\"n\">instance_type</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;region&quot;</span><span class=\"p\">:</span> <span class=\"n\">region</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;cost_per_hour&quot;</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">cost_per_hr</span><span class=\"p\">),</span>\n                <span class=\"s2\">&quot;disk_size&quot;</span><span class=\"p\">:</span> <span class=\"n\">disk_size</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;memory&quot;</span><span class=\"p\">:</span> <span class=\"n\">memory</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;num_cpus&quot;</span><span class=\"p\">:</span> <span class=\"n\">num_cpus</span><span class=\"p\">,</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">if</span> <span class=\"n\">launched_resource</span><span class=\"o\">.</span><span class=\"n\">accelerators</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">compute_properties</span><span class=\"p\">[</span><span class=\"s2\">&quot;gpus&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">launched_resource</span><span class=\"o\">.</span><span class=\"n\">accelerators</span>\n            <span class=\"k\">if</span> <span class=\"n\">handle</span><span class=\"o\">.</span><span class=\"n\">ssh_user</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">compute_properties</span><span class=\"p\">[</span><span class=\"s2\">&quot;ssh_user&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">handle</span><span class=\"o\">.</span><span class=\"n\">ssh_user</span>\n            <span class=\"k\">if</span> <span class=\"n\">handle</span><span class=\"o\">.</span><span class=\"n\">docker_user</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">compute_properties</span><span class=\"p\">[</span><span class=\"s2\">&quot;docker_user&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">handle</span><span class=\"o\">.</span><span class=\"n\">docker_user</span>\n            <span class=\"k\">if</span> <span class=\"n\">cloud</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;kubernetes&quot;</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">handle</span><span class=\"o\">.</span><span class=\"n\">cached_cluster_info</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">compute_properties</span><span class=\"p\">[</span>\n                        <span class=\"s2\">&quot;kube_namespace&quot;</span>\n                    <span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">handle</span><span class=\"o\">.</span><span class=\"n\">cached_cluster_info</span><span class=\"o\">.</span><span class=\"n\">provider_config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;namespace&quot;</span><span class=\"p\">)</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">compute_properties</span><span class=\"p\">[</span>\n                        <span class=\"s2\">&quot;kube_context&quot;</span>\n                    <span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">handle</span><span class=\"o\">.</span><span class=\"n\">cached_cluster_info</span><span class=\"o\">.</span><span class=\"n\">provider_config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;context&quot;</span><span class=\"p\">)</span>\n\n                    <span class=\"n\">instance_infos</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">handle</span><span class=\"o\">.</span><span class=\"n\">cached_cluster_info</span><span class=\"o\">.</span><span class=\"n\">instances</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())</span>\n                    <span class=\"n\">pod_names_and_ips</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                        <span class=\"n\">instance_info</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">internal_ip</span><span class=\"p\">:</span> <span class=\"n\">instance_info</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">instance_id</span>\n                        <span class=\"k\">for</span> <span class=\"n\">instance_info</span> <span class=\"ow\">in</span> <span class=\"n\">instance_infos</span>\n                    <span class=\"p\">}</span>\n                    <span class=\"c1\"># Order the pod names to match the order of the IPs</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">compute_properties</span><span class=\"p\">[</span><span class=\"s2\">&quot;pod_names&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                        <span class=\"n\">pod_names_and_ips</span><span class=\"p\">[</span><span class=\"n\">ip</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">ip</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ips</span>\n                    <span class=\"p\">]</span>\n\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">compute_properties</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;kube_namespace&quot;</span>\n                <span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">compute_properties</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;pod_names&quot;</span><span class=\"p\">):</span>\n                    <span class=\"kn\">import</span> <span class=\"nn\">kubernetes</span>\n\n                    <span class=\"n\">k8s_client</span> <span class=\"o\">=</span> <span class=\"n\">kubernetes</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">CoreV1Api</span><span class=\"p\">()</span>\n\n                    <span class=\"n\">pod_names_and_ips</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                        <span class=\"n\">pod</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">pod_ip</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">pod</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">pod</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">namespace</span><span class=\"p\">)</span>\n                        <span class=\"k\">for</span> <span class=\"n\">pod</span> <span class=\"ow\">in</span> <span class=\"n\">k8s_client</span><span class=\"o\">.</span><span class=\"n\">list_pod_for_all_namespaces</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">items</span>\n                    <span class=\"p\">}</span>\n                    <span class=\"c1\"># Order the pod names to match the order of the IPsi</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">compute_properties</span><span class=\"p\">[</span><span class=\"s2\">&quot;pod_names&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                        <span class=\"n\">pod_names_and_ips</span><span class=\"p\">[</span><span class=\"n\">ip</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">ip</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ips</span>\n                    <span class=\"p\">]</span>\n                    <span class=\"c1\"># Get the namespace for the first pod</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">compute_properties</span><span class=\"p\">[</span><span class=\"s2\">&quot;kube_namespace&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">pod_names_and_ips</span><span class=\"p\">[</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">head_ip</span>\n                    <span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">compute_properties</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;kube_context&quot;</span><span class=\"p\">):</span>\n                    <span class=\"kn\">import</span> <span class=\"nn\">kubernetes</span>\n\n                    <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">current_context</span> <span class=\"o\">=</span> <span class=\"n\">kubernetes</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">list_kube_config_contexts</span><span class=\"p\">()</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">compute_properties</span><span class=\"p\">[</span><span class=\"s2\">&quot;kube_context&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">current_context</span><span class=\"p\">[</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">]</span>\n\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_kube_namespace</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">compute_properties</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;kube_namespace&quot;</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_kube_context</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">compute_properties</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;kube_context&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_update_from_sky_status</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">launcher</span> <span class=\"o\">!=</span> <span class=\"n\">LauncherType</span><span class=\"o\">.</span><span class=\"n\">LOCAL</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n\n        <span class=\"c1\"># Try to get the cluster status from SkyDB</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_shared</span><span class=\"p\">:</span>\n            <span class=\"c1\"># If the cluster is shared can ignore, since the sky data will only be saved on the machine where</span>\n            <span class=\"c1\"># the cluster was initially upped</span>\n            <span class=\"k\">return</span>\n\n        <span class=\"n\">cluster_dict</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_sky_status</span><span class=\"p\">(</span><span class=\"n\">refresh</span><span class=\"o\">=</span><span class=\"ow\">not</span> <span class=\"n\">dryrun</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_populate_connection_from_status_dict</span><span class=\"p\">(</span><span class=\"n\">cluster_dict</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_setup_default_creds</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">launcher</span> <span class=\"o\">==</span> <span class=\"n\">LauncherType</span><span class=\"o\">.</span><span class=\"n\">DEN</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">DenLauncher</span><span class=\"o\">.</span><span class=\"n\">load_creds</span><span class=\"p\">()</span>\n        <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">launcher</span> <span class=\"o\">==</span> <span class=\"n\">LauncherType</span><span class=\"o\">.</span><span class=\"n\">LOCAL</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">LocalLauncher</span><span class=\"o\">.</span><span class=\"n\">load_creds</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Invalid launcher &#39;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">launcher</span><span class=\"si\">}</span><span class=\"s2\">&#39;&quot;</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"OnDemandCluster.get_instance_type\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.OnDemandCluster.get_instance_type\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_instance_type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Returns instance type of the cluster.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instance_type</span> <span class=\"ow\">and</span> <span class=\"s2\">&quot;--&quot;</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instance_type</span><span class=\"p\">:</span>  <span class=\"c1\"># K8s specific syntax</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instance_type</span>\n        <span class=\"k\">elif</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instance_type</span>\n            <span class=\"ow\">and</span> <span class=\"s2\">&quot;:&quot;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instance_type</span>\n            <span class=\"ow\">and</span> <span class=\"s2\">&quot;CPU&quot;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instance_type</span>\n        <span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instance_type</span>\n\n        <span class=\"k\">return</span> <span class=\"kc\">None</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_requested_gpus</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Returns the gpu type, or None if is a CPU.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_gpus</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_gpus</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instance_type</span>\n            <span class=\"ow\">and</span> <span class=\"s2\">&quot;:&quot;</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instance_type</span>\n            <span class=\"ow\">and</span> <span class=\"s2\">&quot;CPU&quot;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instance_type</span>\n        <span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instance_type</span>\n\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_gpus_per_node</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_up</span><span class=\"p\">()</span>\n            <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">compute_properties</span>\n            <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">compute_properties</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;gpus&quot;</span><span class=\"p\">)</span>\n        <span class=\"p\">):</span>\n            <span class=\"n\">gpus</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">compute_properties</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;gpus&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">gpus</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_requested_gpus</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">gpus</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">gpus</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;:&quot;</span><span class=\"p\">)[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"k\">if</span> <span class=\"s2\">&quot;:&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">gpus</span> <span class=\"k\">else</span> <span class=\"mi\">1</span>\n        <span class=\"k\">return</span> <span class=\"mi\">0</span>\n\n<div class=\"viewcode-block\" id=\"OnDemandCluster.num_cpus\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.OnDemandCluster.num_cpus\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">num_cpus</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Return the number of CPUs for a CPU cluster.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_num_cpus</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_num_cpus</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instance_type</span>\n            <span class=\"ow\">and</span> <span class=\"s2\">&quot;:&quot;</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instance_type</span>\n            <span class=\"ow\">and</span> <span class=\"s2\">&quot;CPU&quot;</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instance_type</span>\n        <span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instance_type</span><span class=\"o\">.</span><span class=\"n\">rsplit</span><span class=\"p\">(</span><span class=\"s2\">&quot;:&quot;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n        <span class=\"k\">return</span> <span class=\"kc\">None</span></div>\n\n<div class=\"viewcode-block\" id=\"OnDemandCluster.a_up\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.OnDemandCluster.a_up\">[docs]</a>    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">a_up</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">capture_output</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Up the cluster async in another process, so it can be parallelized and logs can be captured sanely.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            capture_output (bool): If ``True``, supress the output of the cluster creation process. If ``False``,</span>\n<span class=\"sd\">            print the output normally. If a string, write the output to the file at that path.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"k\">with</span> <span class=\"n\">ProcessPoolExecutor</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">executor</span><span class=\"p\">:</span>\n            <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_running_loop</span><span class=\"p\">()</span>\n            <span class=\"k\">await</span> <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_in_executor</span><span class=\"p\">(</span>\n                <span class=\"n\">executor</span><span class=\"p\">,</span> <span class=\"n\">up_cluster_helper</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">capture_output</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span></div>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">a_up_if_not</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">capture_output</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_up</span><span class=\"p\">():</span>\n            <span class=\"k\">await</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">a_up</span><span class=\"p\">(</span><span class=\"n\">capture_output</span><span class=\"o\">=</span><span class=\"n\">capture_output</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n<div class=\"viewcode-block\" id=\"OnDemandCluster.up\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.OnDemandCluster.up\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">up</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">force</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">start_server</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Up the cluster.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            verbose (bool, optional): Whether to stream logs from Den when the cluster is being launched. Only</span>\n<span class=\"sd\">                relevant if launching via Den. (Default: `True`)</span>\n<span class=\"sd\">            force (bool, optional): Whether to launch the cluster even if one with the same configs already exists.</span>\n<span class=\"sd\">                Only relevant if launching via Den. (Default: `False`)</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; rh.ondemand_cluster(&quot;rh-cpu&quot;).up()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_shared</span><span class=\"p\">:</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Cannot up a shared cluster. Only cluster owners can perform this operation.&quot;</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">launcher</span> <span class=\"o\">==</span> <span class=\"n\">LauncherType</span><span class=\"o\">.</span><span class=\"n\">DEN</span><span class=\"p\">:</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Launching cluster with Den&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">DenLauncher</span><span class=\"o\">.</span><span class=\"n\">up</span><span class=\"p\">(</span><span class=\"n\">cluster</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">,</span> <span class=\"n\">force</span><span class=\"o\">=</span><span class=\"n\">force</span><span class=\"p\">)</span>\n\n        <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">launcher</span> <span class=\"o\">==</span> <span class=\"n\">LauncherType</span><span class=\"o\">.</span><span class=\"n\">LOCAL</span><span class=\"p\">:</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Provisioning cluster&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">LocalLauncher</span><span class=\"o\">.</span><span class=\"n\">up</span><span class=\"p\">(</span><span class=\"n\">cluster</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">start_server</span><span class=\"p\">:</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Starting Runhouse server on cluster&quot;</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">start_server</span><span class=\"p\">()</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">self</span></div>\n\n<div class=\"viewcode-block\" id=\"OnDemandCluster.keep_warm\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.OnDemandCluster.keep_warm\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">keep_warm</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">mins</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Keep the cluster warm for given number of minutes after inactivity.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            mins (int): Amount of time (in min) to keep the cluster warm after inactivity.</span>\n<span class=\"sd\">                If set to -1, keep cluster warm indefinitely. (Default: `-1`)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">autostop_mins</span> <span class=\"o\">=</span> <span class=\"n\">mins</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span></div>\n\n<div class=\"viewcode-block\" id=\"OnDemandCluster.teardown\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.OnDemandCluster.teardown\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">teardown</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Teardown cluster.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            verbose (bool, optional): Whether to stream logs from Den when the cluster is being downed. Only relevant</span>\n<span class=\"sd\">                when tearing down via Den. (Default: `True`)</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; rh.ondemand_cluster(&quot;rh-cpu&quot;).teardown()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">launcher</span> <span class=\"o\">==</span> <span class=\"n\">LauncherType</span><span class=\"o\">.</span><span class=\"n\">DEN</span><span class=\"p\">:</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Tearing down cluster with Den.&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">DenLauncher</span><span class=\"o\">.</span><span class=\"n\">teardown</span><span class=\"p\">(</span><span class=\"n\">cluster</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Tearing down cluster locally via Sky.&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">LocalLauncher</span><span class=\"o\">.</span><span class=\"n\">teardown</span><span class=\"p\">(</span><span class=\"n\">cluster</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rns_address</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Update Den with the terminated status</span>\n                <span class=\"n\">status_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                    <span class=\"s2\">&quot;daemon_status&quot;</span><span class=\"p\">:</span> <span class=\"n\">RunhouseDaemonStatus</span><span class=\"o\">.</span><span class=\"n\">TERMINATED</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;resource_type&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"n\">__base__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">(),</span>\n                    <span class=\"s2\">&quot;data&quot;</span><span class=\"p\">:</span> <span class=\"p\">{},</span>\n                <span class=\"p\">}</span>\n\n                <span class=\"n\">cluster_uri</span> <span class=\"o\">=</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">format_rns_address</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rns_address</span><span class=\"p\">)</span>\n                <span class=\"n\">status_resp</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">api_server_url</span><span class=\"si\">}</span><span class=\"s2\">/resource/</span><span class=\"si\">{</span><span class=\"n\">cluster_uri</span><span class=\"si\">}</span><span class=\"s2\">/cluster/status&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">json</span><span class=\"o\">=</span><span class=\"n\">status_data</span><span class=\"p\">,</span>\n                    <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">request_headers</span><span class=\"p\">(),</span>\n                <span class=\"p\">)</span>\n\n                <span class=\"c1\"># Note: 404 means that the cluster is not saved in Den</span>\n                <span class=\"k\">if</span> <span class=\"n\">status_resp</span><span class=\"o\">.</span><span class=\"n\">status_code</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">404</span><span class=\"p\">]:</span>\n                    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span>\n                        <span class=\"s2\">&quot;Failed to update Den with terminated cluster status&quot;</span>\n                    <span class=\"p\">)</span>\n\n            <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n                <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"OnDemandCluster.teardown_and_delete\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.OnDemandCluster.teardown_and_delete\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">teardown_and_delete</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Teardown cluster and delete it from configs.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            verbose (bool, optional): Whether to stream logs from Den when the cluster is being downed. Only relevant</span>\n<span class=\"sd\">                when tearing down via Den. (Default: `True`)</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; rh.ondemand_cluster(&quot;rh-cpu&quot;).teardown_and_delete()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">teardown</span><span class=\"p\">(</span><span class=\"n\">verbose</span><span class=\"p\">)</span>\n        <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">delete_configs</span><span class=\"p\">(</span><span class=\"n\">resource</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"OnDemandCluster.pause_autostop\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.OnDemandCluster.pause_autostop\">[docs]</a>    <span class=\"nd\">@contextlib</span><span class=\"o\">.</span><span class=\"n\">contextmanager</span>\n    <span class=\"k\">def</span> <span class=\"nf\">pause_autostop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Context manager to temporarily pause autostop.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; with rh.ondemand_cluster.pause_autostop():</span>\n<span class=\"sd\">            &gt;&gt;&gt;     rh.ondemand_cluster.run_bash([&quot;python train.py&quot;])</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">run_bash_over_ssh</span><span class=\"p\">(</span><span class=\"n\">_cluster_set_autostop_command</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">node</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">head_ip</span><span class=\"p\">)</span>\n        <span class=\"k\">yield</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">run_bash_over_ssh_</span><span class=\"p\">(</span>\n            <span class=\"n\">_cluster_set_autostop_command</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_autostop_mins</span><span class=\"p\">),</span> <span class=\"n\">node</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">head_ip</span>\n        <span class=\"p\">)</span></div>\n\n    <span class=\"c1\"># ----------------- SSH Methods ----------------- #</span>\n\n<div class=\"viewcode-block\" id=\"OnDemandCluster.cluster_ssh_key\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.OnDemandCluster.cluster_ssh_key\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">cluster_ssh_key</span><span class=\"p\">(</span><span class=\"n\">path_to_file</span><span class=\"p\">:</span> <span class=\"n\">Path</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Retrieve SSH key for the cluster.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            path_to_file (Path): Path of the private key associated with the cluster.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; ssh_priv_key = rh.ondemand_cluster(&quot;rh-cpu&quot;).cluster_ssh_key(&quot;~/.ssh/id_rsa&quot;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">path_to_file</span><span class=\"p\">,</span> <span class=\"s2\">&quot;r&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">private_key</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n            <span class=\"k\">return</span> <span class=\"n\">private_key</span>\n        <span class=\"k\">except</span> <span class=\"ne\">FileNotFoundError</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;File with ssh key not found in: </span><span class=\"si\">{</span><span class=\"n\">path_to_file</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"OnDemandCluster.ssh\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.OnDemandCluster.ssh\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">ssh</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;SSH into the cluster.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            node: Node to SSH into. If no node is specified, will SSH onto the head node.</span>\n<span class=\"sd\">                (Default: ``None``)</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; rh.ondemand_cluster(&quot;rh-cpu&quot;).ssh()</span>\n<span class=\"sd\">            &gt;&gt;&gt; rh.ondemand_cluster(&quot;rh-cpu&quot;, node=&quot;3.89.174.234&quot;).ssh()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">provider</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;kubernetes&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">namespace_flag</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;-n </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_kube_namespace</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_kube_namespace</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n            <span class=\"p\">)</span>\n\n            <span class=\"n\">command</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;kubectl get pods </span><span class=\"si\">{</span><span class=\"n\">namespace_flag</span><span class=\"si\">}</span><span class=\"s2\"> | grep </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">check_output</span><span class=\"p\">(</span><span class=\"n\">command</span><span class=\"p\">,</span> <span class=\"n\">shell</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n                <span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">lines</span><span class=\"p\">:</span>\n                    <span class=\"n\">pod_name</span> <span class=\"o\">=</span> <span class=\"n\">lines</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;No matching pods found.&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">CalledProcessError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Error: </span><span class=\"si\">{</span><span class=\"n\">e</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n            <span class=\"n\">cmd</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;kubectl exec -it </span><span class=\"si\">{</span><span class=\"n\">pod_name</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">{</span><span class=\"n\">namespace_flag</span><span class=\"si\">}</span><span class=\"s2\"> -- /bin/bash&quot;</span>\n            <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"p\">,</span> <span class=\"n\">shell</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">check</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"kn\">from</span> <span class=\"nn\">runhouse</span> <span class=\"kn\">import</span> <span class=\"n\">Secret</span>\n\n            <span class=\"c1\"># If SSHing onto a specific node, which requires the default sky public key for verification</span>\n            <span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.hardware.sky_command_runner</span> <span class=\"kn\">import</span> <span class=\"n\">SshMode</span>\n\n            <span class=\"n\">sky_key</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ssh_properties</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;ssh_private_key&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_KEYFILE</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">expanduser</span><span class=\"p\">()</span>\n\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">sky_key</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">():</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># Load down the default sky key from Den if not saved locally</span>\n                    <span class=\"n\">secret</span> <span class=\"o\">=</span> <span class=\"n\">Secret</span><span class=\"o\">.</span><span class=\"n\">from_name</span><span class=\"p\">(</span><span class=\"n\">SSH_SKY_SECRET_NAME</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">secret</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">:</span>\n                        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span>\n\n                    <span class=\"n\">secret</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">()</span>\n                    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Saved default sky keys to path: </span><span class=\"si\">{</span><span class=\"n\">secret</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n                <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n                    <span class=\"k\">raise</span> <span class=\"ne\">FileNotFoundError</span><span class=\"p\">(</span>\n                        <span class=\"sa\">f</span><span class=\"s2\">&quot;Expected default sky key locally in path: </span><span class=\"si\">{</span><span class=\"n\">sky_key</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n                    <span class=\"p\">)</span>\n\n            <span class=\"n\">runner</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_command_runner</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"o\">=</span><span class=\"n\">node</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">docker_user</span><span class=\"p\">:</span>\n                <span class=\"n\">cmd</span> <span class=\"o\">=</span> <span class=\"n\">runner</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span>\n                    <span class=\"n\">cmd</span><span class=\"o\">=</span><span class=\"s2\">&quot;bash --rcfile &lt;(echo &#39;. ~/.bashrc; conda deactivate&#39;)&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">ssh_mode</span><span class=\"o\">=</span><span class=\"n\">SshMode</span><span class=\"o\">.</span><span class=\"n\">INTERACTIVE</span><span class=\"p\">,</span>\n                    <span class=\"n\">port_forward</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                    <span class=\"n\">return_cmd</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n                <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"p\">,</span> <span class=\"n\">shell</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span>\n                    <span class=\"n\">runner</span><span class=\"o\">.</span><span class=\"n\">_ssh_base_command</span><span class=\"p\">(</span>\n                        <span class=\"n\">ssh_mode</span><span class=\"o\">=</span><span class=\"n\">SshMode</span><span class=\"o\">.</span><span class=\"n\">INTERACTIVE</span><span class=\"p\">,</span> <span class=\"n\">port_forward</span><span class=\"o\">=</span><span class=\"kc\">None</span>\n                    <span class=\"p\">)</span>\n                <span class=\"p\">)</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_ping</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">retry</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">_ping</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"n\">timeout</span><span class=\"p\">,</span> <span class=\"n\">retry</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">retry</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_from_sky_status</span><span class=\"p\">(</span><span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">_ping</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"n\">timeout</span><span class=\"p\">,</span> <span class=\"n\">retry</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n</pre></div>", "current_page_name": "_modules/runhouse/resources/hardware/on_demand_cluster", "sidebars": ["about.html", "navigation.html", "relations.html", "searchbox.html", "donate.html"], "customsidebar": null, "alabaster_version": "0.7.16", "alabaster_version_info": [0, 7, 16]}