{"parents": [{"link": "../../../../", "title": "Module code"}], "title": "runhouse.resources.hardware.on_demand_cluster", "body": "<h1>Source code for runhouse.resources.hardware.on_demand_cluster</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">contextlib</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">subprocess</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Dict</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">sky</span>\n<span class=\"kn\">import</span> <span class=\"nn\">yaml</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sky.backends</span> <span class=\"kn\">import</span> <span class=\"n\">backend_utils</span><span class=\"p\">,</span> <span class=\"n\">CloudVmRayBackend</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.globals</span> <span class=\"kn\">import</span> <span class=\"n\">configs</span><span class=\"p\">,</span> <span class=\"n\">rns_client</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.cluster</span> <span class=\"kn\">import</span> <span class=\"n\">Cluster</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.utils</span> <span class=\"kn\">import</span> <span class=\"n\">_current_cluster</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"OnDemandCluster\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.OnDemandCluster\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">OnDemandCluster</span><span class=\"p\">(</span><span class=\"n\">Cluster</span><span class=\"p\">):</span>\n    <span class=\"n\">RESOURCE_TYPE</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;cluster&quot;</span>\n    <span class=\"n\">RECONNECT_TIMEOUT</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n\n<div class=\"viewcode-block\" id=\"OnDemandCluster.__init__\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.OnDemandCluster.__init__\">[docs]</a>    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"p\">,</span>\n        <span class=\"n\">instance_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">num_instances</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">provider</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">autostop_mins</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">use_spot</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">image_id</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">region</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">sky_state</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>  <span class=\"c1\"># We have this here to ignore extra arguments when calling from from_config</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        On-demand `SkyPilot &lt;https://github.com/skypilot-org/skypilot/&gt;`_ Cluster.</span>\n\n<span class=\"sd\">        .. note::</span>\n<span class=\"sd\">            To build a cluster, please use the factory method :func:`cluster`.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instance_type</span> <span class=\"o\">=</span> <span class=\"n\">instance_type</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">num_instances</span> <span class=\"o\">=</span> <span class=\"n\">num_instances</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">provider</span> <span class=\"o\">=</span> <span class=\"n\">provider</span> <span class=\"ow\">or</span> <span class=\"n\">configs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;default_provider&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">autostop_mins</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"n\">autostop_mins</span>\n            <span class=\"k\">if</span> <span class=\"n\">autostop_mins</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n            <span class=\"k\">else</span> <span class=\"n\">configs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;default_autostop&quot;</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">use_spot</span> <span class=\"o\">=</span> <span class=\"n\">use_spot</span> <span class=\"k\">if</span> <span class=\"n\">use_spot</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"k\">else</span> <span class=\"n\">configs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;use_spot&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">image_id</span> <span class=\"o\">=</span> <span class=\"n\">image_id</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">region</span> <span class=\"o\">=</span> <span class=\"n\">region</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sky_state</span> <span class=\"o\">=</span> <span class=\"n\">sky_state</span>\n\n        <span class=\"c1\"># Checks if state info is in local sky db, populates if so.</span>\n        <span class=\"n\">status_dict</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">(</span><span class=\"n\">refresh</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">status_dict</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_populate_connection_from_status_dict</span><span class=\"p\">(</span><span class=\"n\">status_dict</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sky_state</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_save_sky_state</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">dryrun</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Cluster status is set to INIT in the Sky DB right after starting, so we need to refresh once</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_from_sky_status</span><span class=\"p\">(</span><span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span></div>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_config</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">OnDemandCluster</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">config_for_rns</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">config_for_rns</span>\n\n        <span class=\"c1\"># Also store the ssh keys for the cluster in RNS</span>\n        <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span>\n            <span class=\"p\">{</span>\n                <span class=\"s2\">&quot;instance_type&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instance_type</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;num_instances&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">num_instances</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;provider&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">provider</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;autostop_mins&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">autostop_mins</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;use_spot&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">use_spot</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;image_id&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">image_id</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;region&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">region</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;sky_state&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_sky_state</span><span class=\"p\">(),</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">config</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_get_sky_state</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">sky</span><span class=\"o\">.</span><span class=\"n\">global_user_state</span><span class=\"o\">.</span><span class=\"n\">get_cluster_from_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">config</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n        <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;status&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"p\">[</span>\n            <span class=\"s2\">&quot;status&quot;</span>\n        <span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">name</span>  <span class=\"c1\"># ClusterStatus enum is not json serializable</span>\n        <span class=\"k\">if</span> <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;handle&quot;</span><span class=\"p\">]:</span>\n            <span class=\"c1\"># with open(config[&quot;handle&quot;].cluster_yaml, mode=&quot;r&quot;) as f:</span>\n            <span class=\"c1\">#     config[&quot;ray_config&quot;] = yaml.safe_load(f)</span>\n            <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;public_key&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ssh_creds</span><span class=\"p\">()[</span><span class=\"s2\">&quot;ssh_private_key&quot;</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;.pub&quot;</span>\n            <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;handle&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                <span class=\"s2\">&quot;cluster_name&quot;</span><span class=\"p\">:</span> <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;handle&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">cluster_name</span><span class=\"p\">,</span>\n                <span class=\"c1\"># This is saved as an absolute path - convert it to relative</span>\n                <span class=\"s2\">&quot;cluster_yaml&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">relative_yaml_path</span><span class=\"p\">(</span>\n                    <span class=\"n\">yaml_path</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;handle&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">_cluster_yaml</span>\n                <span class=\"p\">),</span>\n                <span class=\"s2\">&quot;head_ip&quot;</span><span class=\"p\">:</span> <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;handle&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">head_ip</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;stable_internal_external_ips&quot;</span><span class=\"p\">:</span> <span class=\"n\">config</span><span class=\"p\">[</span>\n                    <span class=\"s2\">&quot;handle&quot;</span>\n                <span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">stable_internal_external_ips</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;launched_nodes&quot;</span><span class=\"p\">:</span> <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;handle&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">launched_nodes</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;launched_resources&quot;</span><span class=\"p\">:</span> <span class=\"n\">config</span><span class=\"p\">[</span>\n                    <span class=\"s2\">&quot;handle&quot;</span>\n                <span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">launched_resources</span><span class=\"o\">.</span><span class=\"n\">to_yaml_config</span><span class=\"p\">(),</span>\n            <span class=\"p\">}</span>\n            <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;handle&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;launched_resources&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;spot_recovery&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n\n            <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;ssh_creds&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ssh_creds</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">config</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_copy_sky_yaml_from_cluster</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">abs_yaml_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">abs_yaml_path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">():</span>\n            <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">abs_yaml_path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">mkdir</span><span class=\"p\">(</span><span class=\"n\">parents</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">exist_ok</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rsync</span><span class=\"p\">(</span><span class=\"s2\">&quot;~/.sky/sky_ray.yml&quot;</span><span class=\"p\">,</span> <span class=\"n\">abs_yaml_path</span><span class=\"p\">,</span> <span class=\"n\">up</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n            <span class=\"c1\"># Save SSH info to the ~/.ssh/config</span>\n            <span class=\"n\">ray_yaml</span> <span class=\"o\">=</span> <span class=\"n\">yaml</span><span class=\"o\">.</span><span class=\"n\">safe_load</span><span class=\"p\">(</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">abs_yaml_path</span><span class=\"p\">,</span> <span class=\"s2\">&quot;r&quot;</span><span class=\"p\">))</span>\n            <span class=\"n\">backend_utils</span><span class=\"o\">.</span><span class=\"n\">SSHConfigHelper</span><span class=\"o\">.</span><span class=\"n\">add_cluster</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"p\">],</span> <span class=\"n\">ray_yaml</span><span class=\"p\">[</span><span class=\"s2\">&quot;auth&quot;</span><span class=\"p\">]</span>\n            <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_save_sky_state</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sky_state</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;No sky state to save&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># if we&#39;re on this cluster, no need to save sky state</span>\n        <span class=\"n\">current_cluster_name</span> <span class=\"o\">=</span> <span class=\"n\">_current_cluster</span><span class=\"p\">(</span><span class=\"s2\">&quot;cluster_name&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sky_state</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;handle&quot;</span><span class=\"p\">,</span> <span class=\"p\">{})</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;cluster_name&quot;</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">current_cluster_name</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n\n        <span class=\"n\">handle_info</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sky_state</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;handle&quot;</span><span class=\"p\">,</span> <span class=\"p\">{})</span>\n\n        <span class=\"c1\"># If we already have the cluster in local sky db,</span>\n        <span class=\"c1\"># we don&#39;t need to save the state, just populate the connection info from the status</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">sky</span><span class=\"o\">.</span><span class=\"n\">global_user_state</span><span class=\"o\">.</span><span class=\"n\">get_cluster_from_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">):</span>\n            <span class=\"c1\"># Try running a command on the cluster before saving down the state into sky db</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"n\">handle_info</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;head_ip&quot;</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ssh_creds</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sky_state</span><span class=\"p\">[</span><span class=\"s2\">&quot;ssh_creds&quot;</span><span class=\"p\">]</span>\n\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ping</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">RECONNECT_TIMEOUT</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"ne\">TimeoutError</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ssh_creds</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;Timeout when trying to connect to cluster </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">, treating cluster as down.&quot;</span>\n                <span class=\"p\">)</span>\n                <span class=\"k\">return</span>\n\n            <span class=\"n\">resources</span> <span class=\"o\">=</span> <span class=\"n\">sky</span><span class=\"o\">.</span><span class=\"n\">Resources</span><span class=\"o\">.</span><span class=\"n\">from_yaml_config</span><span class=\"p\">(</span>\n                <span class=\"n\">handle_info</span><span class=\"p\">[</span><span class=\"s2\">&quot;launched_resources&quot;</span><span class=\"p\">]</span>\n            <span class=\"p\">)</span>\n            <span class=\"c1\"># Need to convert to relative to find the yaml file in a new environment</span>\n            <span class=\"n\">yaml_path</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">relative_yaml_path</span><span class=\"p\">(</span><span class=\"n\">handle_info</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;cluster_yaml&quot;</span><span class=\"p\">))</span>\n            <span class=\"n\">handle</span> <span class=\"o\">=</span> <span class=\"n\">CloudVmRayBackend</span><span class=\"o\">.</span><span class=\"n\">ResourceHandle</span><span class=\"p\">(</span>\n                <span class=\"n\">cluster_name</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n                <span class=\"n\">cluster_yaml</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">yaml_path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">expanduser</span><span class=\"p\">()),</span>\n                <span class=\"n\">launched_nodes</span><span class=\"o\">=</span><span class=\"n\">handle_info</span><span class=\"p\">[</span><span class=\"s2\">&quot;launched_nodes&quot;</span><span class=\"p\">],</span>\n                <span class=\"n\">stable_internal_external_ips</span><span class=\"o\">=</span><span class=\"n\">handle_info</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;stable_internal_external_ips&quot;</span>\n                <span class=\"p\">)</span>\n                <span class=\"ow\">or</span> <span class=\"p\">[(</span><span class=\"n\">handle_info</span><span class=\"p\">[</span><span class=\"s2\">&quot;head_ip&quot;</span><span class=\"p\">],</span> <span class=\"n\">handle_info</span><span class=\"p\">[</span><span class=\"s2\">&quot;head_ip&quot;</span><span class=\"p\">])],</span>\n                <span class=\"n\">launched_resources</span><span class=\"o\">=</span><span class=\"n\">resources</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">sky</span><span class=\"o\">.</span><span class=\"n\">global_user_state</span><span class=\"o\">.</span><span class=\"n\">add_or_update_cluster</span><span class=\"p\">(</span>\n                <span class=\"n\">cluster_name</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n                <span class=\"n\">cluster_handle</span><span class=\"o\">=</span><span class=\"n\">handle</span><span class=\"p\">,</span>\n                <span class=\"n\">requested_resources</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">resources</span><span class=\"p\">],</span>\n                <span class=\"n\">is_launch</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"n\">ready</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"c1\"># Now try loading in the status from the sky DB</span>\n        <span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">(</span><span class=\"n\">refresh</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n        <span class=\"n\">abs_yaml_path</span> <span class=\"o\">=</span> <span class=\"n\">status</span><span class=\"p\">[</span><span class=\"s2\">&quot;handle&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">cluster_yaml</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">abs_yaml_path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">():</span>\n                <span class=\"c1\"># This is also a good way to check if the cluster is still up</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_copy_sky_yaml_from_cluster</span><span class=\"p\">(</span><span class=\"n\">abs_yaml_path</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"c1\"># We still should check if the cluster is up, since the status/yaml file could be stale</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ping</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">RECONNECT_TIMEOUT</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Refresh the cluster status before saving the ssh info so SkyPilot has a chance to wipe the .ssh/config if</span>\n            <span class=\"c1\"># the cluster went down</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_from_sky_status</span><span class=\"p\">(</span><span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dryrun</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__getstate__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Make sure sky_state is loaded in before pickling.&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sky_state</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_sky_state</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">__getstate__</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">relative_yaml_path</span><span class=\"p\">(</span><span class=\"n\">yaml_path</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">yaml_path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">is_absolute</span><span class=\"p\">():</span>\n            <span class=\"n\">yaml_path</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;~/.sky/generated/&quot;</span> <span class=\"o\">+</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">yaml_path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"k\">return</span> <span class=\"n\">yaml_path</span>\n\n    <span class=\"c1\"># ----------------- Launch/Lifecycle Methods -----------------</span>\n\n<div class=\"viewcode-block\" id=\"OnDemandCluster.is_up\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.OnDemandCluster.is_up\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">is_up</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Whether the cluster is up.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; rh.ondemand_cluster(&quot;rh-cpu&quot;).is_up()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_from_sky_status</span><span class=\"p\">(</span><span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span></div>\n\n<div class=\"viewcode-block\" id=\"OnDemandCluster.status\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.OnDemandCluster.status\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">status</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">refresh</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Get status of Sky cluster.</span>\n\n<span class=\"sd\">        Return dict looks like:</span>\n\n<span class=\"sd\">        .. code-block::</span>\n\n<span class=\"sd\">            {&#39;name&#39;: &#39;sky-cpunode-donny&#39;,</span>\n<span class=\"sd\">             &#39;launched_at&#39;: 1662317201,</span>\n<span class=\"sd\">             &#39;handle&#39;: ResourceHandle(</span>\n<span class=\"sd\">                          cluster_name=sky-cpunode-donny,</span>\n<span class=\"sd\">                          head_ip=54.211.97.164,</span>\n<span class=\"sd\">                          cluster_yaml=/Users/donny/.sky/generated/sky-cpunode-donny.yml,</span>\n<span class=\"sd\">                          launched_resources=1x AWS(m6i.2xlarge),</span>\n<span class=\"sd\">                          tpu_create_script=None,</span>\n<span class=\"sd\">                          tpu_delete_script=None),</span>\n<span class=\"sd\">             &#39;last_use&#39;: &#39;sky cpunode&#39;,</span>\n<span class=\"sd\">             &#39;status&#39;: &lt;ClusterStatus.UP: &#39;UP&#39;&gt;,</span>\n<span class=\"sd\">             &#39;autostop&#39;: -1,</span>\n<span class=\"sd\">             &#39;metadata&#39;: {}}</span>\n\n<span class=\"sd\">        .. note::</span>\n<span class=\"sd\">            For more information see SkyPilot&#39;s :code:`ResourceHandle` `class &lt;https://github.com/skypilot-org/skypilot/blob/0c2b291b03abe486b521b40a3069195e56b62324/sky/backends/cloud_vm_ray_backend.py#L1457&gt;`_.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; status = rh.ondemand_cluster(&quot;rh-cpu&quot;).status()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>  <span class=\"c1\"># noqa</span>\n        <span class=\"c1\"># return backend_utils._refresh_cluster_record(</span>\n        <span class=\"c1\">#     self.name, force_refresh=refresh, acquire_per_cluster_status_lock=False</span>\n        <span class=\"c1\"># )</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">sky</span><span class=\"o\">.</span><span class=\"n\">global_user_state</span><span class=\"o\">.</span><span class=\"n\">get_cluster_from_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n        <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">sky</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">(</span><span class=\"n\">cluster_names</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">],</span> <span class=\"n\">refresh</span><span class=\"o\">=</span><span class=\"n\">refresh</span><span class=\"p\">)</span>\n        <span class=\"c1\"># We still need to check if the cluster present in case the cluster went down and was removed from the DB</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n        <span class=\"k\">return</span> <span class=\"n\">state</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_populate_connection_from_status_dict</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">cluster_dict</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]):</span>\n        <span class=\"k\">if</span> <span class=\"n\">cluster_dict</span> <span class=\"ow\">and</span> <span class=\"n\">cluster_dict</span><span class=\"p\">[</span><span class=\"s2\">&quot;status&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;UP&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;INIT&quot;</span><span class=\"p\">]:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"n\">cluster_dict</span><span class=\"p\">[</span><span class=\"s2\">&quot;handle&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">head_ip</span>\n            <span class=\"n\">yaml_path</span> <span class=\"o\">=</span> <span class=\"n\">cluster_dict</span><span class=\"p\">[</span><span class=\"s2\">&quot;handle&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">cluster_yaml</span>\n            <span class=\"k\">if</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">yaml_path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">():</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ssh_creds</span> <span class=\"o\">=</span> <span class=\"n\">backend_utils</span><span class=\"o\">.</span><span class=\"n\">ssh_credential_from_yaml</span><span class=\"p\">(</span><span class=\"n\">yaml_path</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ssh_creds</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_update_from_sky_status</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Try to get the cluster status from SkyDB</span>\n        <span class=\"n\">cluster_dict</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">(</span><span class=\"n\">refresh</span><span class=\"o\">=</span><span class=\"ow\">not</span> <span class=\"n\">dryrun</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_populate_connection_from_status_dict</span><span class=\"p\">(</span><span class=\"n\">cluster_dict</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"OnDemandCluster.up\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.OnDemandCluster.up\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">up</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Up the cluster.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; rh.ondemand_cluster(&quot;rh-cpu&quot;).up()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">provider</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;aws&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;gcp&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;azure&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;lambda&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;cheapest&quot;</span><span class=\"p\">]:</span>\n            <span class=\"n\">task</span> <span class=\"o\">=</span> <span class=\"n\">sky</span><span class=\"o\">.</span><span class=\"n\">Task</span><span class=\"p\">(</span>\n                <span class=\"n\">num_nodes</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">num_instances</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instance_type</span> <span class=\"ow\">and</span> <span class=\"s2\">&quot;:&quot;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instance_type</span>\n                <span class=\"k\">else</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n                <span class=\"c1\"># docker_image=image,  # Zongheng: this is experimental, don&#39;t use it</span>\n                <span class=\"c1\"># envs=None,</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">cloud_provider</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                <span class=\"n\">sky</span><span class=\"o\">.</span><span class=\"n\">clouds</span><span class=\"o\">.</span><span class=\"n\">CLOUD_REGISTRY</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">provider</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">provider</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;cheapest&quot;</span>\n                <span class=\"k\">else</span> <span class=\"kc\">None</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">set_resources</span><span class=\"p\">(</span>\n                <span class=\"n\">sky</span><span class=\"o\">.</span><span class=\"n\">Resources</span><span class=\"p\">(</span>\n                    <span class=\"n\">cloud</span><span class=\"o\">=</span><span class=\"n\">cloud_provider</span><span class=\"p\">,</span>\n                    <span class=\"n\">instance_type</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instance_type</span>\n                    <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instance_type</span>\n                    <span class=\"ow\">and</span> <span class=\"s2\">&quot;:&quot;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instance_type</span>\n                    <span class=\"ow\">and</span> <span class=\"s2\">&quot;CPU&quot;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instance_type</span>\n                    <span class=\"k\">else</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n                    <span class=\"n\">accelerators</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instance_type</span>\n                    <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instance_type</span>\n                    <span class=\"ow\">and</span> <span class=\"s2\">&quot;:&quot;</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instance_type</span>\n                    <span class=\"ow\">and</span> <span class=\"s2\">&quot;CPU&quot;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instance_type</span>\n                    <span class=\"k\">else</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n                    <span class=\"n\">cpus</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instance_type</span><span class=\"o\">.</span><span class=\"n\">rsplit</span><span class=\"p\">(</span><span class=\"s2\">&quot;:&quot;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                    <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instance_type</span>\n                    <span class=\"ow\">and</span> <span class=\"s2\">&quot;:&quot;</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instance_type</span>\n                    <span class=\"ow\">and</span> <span class=\"s2\">&quot;CPU&quot;</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instance_type</span>\n                    <span class=\"k\">else</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n                    <span class=\"n\">region</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">region</span><span class=\"p\">,</span>\n                    <span class=\"n\">image_id</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">image_id</span><span class=\"p\">,</span>\n                    <span class=\"n\">use_spot</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">use_spot</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s2\">&quot;~/.rh&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">expanduser</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">():</span>\n                <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">set_file_mounts</span><span class=\"p\">(</span>\n                    <span class=\"p\">{</span>\n                        <span class=\"s2\">&quot;~/.rh&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;~/.rh&quot;</span><span class=\"p\">,</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">)</span>\n            <span class=\"c1\"># If we choose to reduce collisions of cluster names:</span>\n            <span class=\"c1\"># cluster_name = self.rns_address.strip(&#39;~/&#39;).replace(&quot;/&quot;, &quot;-&quot;)</span>\n            <span class=\"n\">sky</span><span class=\"o\">.</span><span class=\"n\">launch</span><span class=\"p\">(</span>\n                <span class=\"n\">task</span><span class=\"p\">,</span>\n                <span class=\"n\">cluster_name</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n                <span class=\"n\">idle_minutes_to_autostop</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">autostop_mins</span><span class=\"p\">,</span>\n                <span class=\"n\">down</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">provider</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;k8s&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Kubernetes Cluster provider not yet supported&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Cluster provider </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">provider</span><span class=\"si\">}</span><span class=\"s2\"> not supported.&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_from_sky_status</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">restart_server</span><span class=\"p\">(</span><span class=\"n\">restart_ray</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"OnDemandCluster.keep_warm\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.OnDemandCluster.keep_warm\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">keep_warm</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">autostop_mins</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Keep the cluster warm for given number of minutes after inactivity.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            autostop_mins (int): Amount of time (in min) to keep the cluster warm after inactivity.</span>\n<span class=\"sd\">                If set to -1, keep cluster warm indefinitely. (Default: `-1`)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">sky</span><span class=\"o\">.</span><span class=\"n\">autostop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">autostop_mins</span><span class=\"p\">,</span> <span class=\"n\">down</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">autostop_mins</span> <span class=\"o\">=</span> <span class=\"n\">autostop_mins</span></div>\n\n<div class=\"viewcode-block\" id=\"OnDemandCluster.teardown\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.OnDemandCluster.teardown\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">teardown</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Teardown cluster.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; rh.ondemand_cluster(&quot;rh-cpu&quot;).teardown()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># Stream logs</span>\n        <span class=\"n\">sky</span><span class=\"o\">.</span><span class=\"n\">down</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></div>\n\n<div class=\"viewcode-block\" id=\"OnDemandCluster.teardown_and_delete\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.OnDemandCluster.teardown_and_delete\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">teardown_and_delete</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Teardown cluster and delete it from configs.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; rh.ondemand_cluster(&quot;rh-cpu&quot;).teardown_and_delete()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">teardown</span><span class=\"p\">()</span>\n        <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">delete_configs</span><span class=\"p\">()</span></div>\n\n<div class=\"viewcode-block\" id=\"OnDemandCluster.pause_autostop\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.OnDemandCluster.pause_autostop\">[docs]</a>    <span class=\"nd\">@contextlib</span><span class=\"o\">.</span><span class=\"n\">contextmanager</span>\n    <span class=\"k\">def</span> <span class=\"nf\">pause_autostop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Context manager to temporarily pause autostop.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; with rh.ondemand_cluster.pause_autostop():</span>\n<span class=\"sd\">            &gt;&gt;&gt;     rh.ondemand_cluster.run([&quot;python train.py&quot;])</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">sky</span><span class=\"o\">.</span><span class=\"n\">autostop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">idle_minutes</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">yield</span>\n        <span class=\"n\">sky</span><span class=\"o\">.</span><span class=\"n\">autostop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">idle_minutes</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">autostop_mins</span><span class=\"p\">)</span></div>\n\n    <span class=\"c1\"># ----------------- SSH Methods ----------------- #</span>\n\n<div class=\"viewcode-block\" id=\"OnDemandCluster.cluster_ssh_key\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.OnDemandCluster.cluster_ssh_key\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">cluster_ssh_key</span><span class=\"p\">(</span><span class=\"n\">path_to_file</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Retrieve SSH key for the cluster.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; ssh_priv_key = rh.ondemand_cluster(&quot;rh-cpu&quot;).cluster_ssh_key(&quot;~/.ssh/id_rsa&quot;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">path_to_file</span><span class=\"p\">,</span> <span class=\"s2\">&quot;r&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">private_key</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n            <span class=\"k\">return</span> <span class=\"n\">private_key</span>\n        <span class=\"k\">except</span> <span class=\"ne\">FileNotFoundError</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;File with ssh key not found in: </span><span class=\"si\">{</span><span class=\"n\">path_to_file</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"OnDemandCluster.ssh_creds\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.OnDemandCluster.ssh_creds\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">ssh_creds</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Retrieve SSH creds for the cluster.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; credentials = rh.ondemand_cluster(&quot;rh-cpu&quot;).ssh_creds()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ssh_creds</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ssh_creds</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">(</span><span class=\"n\">refresh</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sky_state</span><span class=\"p\">:</span>\n            <span class=\"c1\"># If this cluster was serialized and sent over the wire, it will have sky_state (we make sure of that</span>\n            <span class=\"c1\"># in __getstate__) but no yaml, and we need to save down the sky data to the sky db and local yaml</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_save_sky_state</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># To avoid calling this twice (once in save_sky_data)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_from_sky_status</span><span class=\"p\">(</span><span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ssh_creds</span></div>\n\n<div class=\"viewcode-block\" id=\"OnDemandCluster.ssh\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.OnDemandCluster.ssh\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">ssh</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;SSH into the cluster.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; rh.ondemand_cluster(&quot;rh-cpu&quot;).ssh()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">([</span><span class=\"s2\">&quot;ssh&quot;</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">])</span></div></div>\n</pre></div>", "current_page_name": "_modules/runhouse/resources/hardware/on_demand_cluster", "sidebars": ["about.html", "navigation.html", "relations.html", "searchbox.html", "donate.html"], "customsidebar": null, "alabaster_version": "0.7.13"}