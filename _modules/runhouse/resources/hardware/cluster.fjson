{"parents": [{"link": "../../../../", "title": "Module code"}], "title": "runhouse.resources.hardware.cluster", "body": "<h1>Source code for runhouse.resources.hardware.cluster</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">contextlib</span>\n<span class=\"kn\">import</span> <span class=\"nn\">copy</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pkgutil</span>\n<span class=\"kn\">import</span> <span class=\"nn\">subprocess</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">threading</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">,</span> <span class=\"n\">Union</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">requests.exceptions</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sshtunnel</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">sshtunnel</span> <span class=\"kn\">import</span> <span class=\"n\">HandlerSSHTunnelForwarderError</span><span class=\"p\">,</span> <span class=\"n\">SSHTunnelForwarder</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.globals</span> <span class=\"kn\">import</span> <span class=\"n\">obj_store</span><span class=\"p\">,</span> <span class=\"n\">open_cluster_tunnels</span><span class=\"p\">,</span> <span class=\"n\">rns_client</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.envs.utils</span> <span class=\"kn\">import</span> <span class=\"n\">_get_env_from</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.hardware.utils</span> <span class=\"kn\">import</span> <span class=\"n\">_current_cluster</span><span class=\"p\">,</span> <span class=\"n\">SkySSHRunner</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.resource</span> <span class=\"kn\">import</span> <span class=\"n\">Resource</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.servers.http</span> <span class=\"kn\">import</span> <span class=\"n\">DEFAULT_SERVER_PORT</span><span class=\"p\">,</span> <span class=\"n\">HTTPClient</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"Cluster\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Cluster</span><span class=\"p\">(</span><span class=\"n\">Resource</span><span class=\"p\">):</span>\n    <span class=\"n\">RESOURCE_TYPE</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;cluster&quot;</span>\n    <span class=\"n\">REQUEST_TIMEOUT</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>  <span class=\"c1\"># seconds</span>\n\n    <span class=\"n\">SERVER_LOGFILE</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">expanduser</span><span class=\"p\">(</span><span class=\"s2\">&quot;~/.rh/server.log&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">CLI_RESTART_CMD</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;runhouse restart&quot;</span>\n    <span class=\"n\">SERVER_START_CMD</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">executable</span><span class=\"si\">}</span><span class=\"s2\"> -m runhouse.servers.http.http_server&quot;</span>\n    <span class=\"n\">SERVER_STOP_CMD</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s1\">&#39;pkill -f &quot;</span><span class=\"si\">{</span><span class=\"n\">SERVER_START_CMD</span><span class=\"si\">}</span><span class=\"s1\">&quot;&#39;</span>\n    <span class=\"c1\"># 2&gt;&amp;1 redirects stderr to stdout</span>\n    <span class=\"n\">START_SCREEN_CMD</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"sa\">f</span><span class=\"s2\">&quot;screen -dm bash -c </span><span class=\"se\">\\&quot;</span><span class=\"si\">{</span><span class=\"n\">SERVER_START_CMD</span><span class=\"si\">}</span><span class=\"s2\"> |&amp; tee -a &#39;</span><span class=\"si\">{</span><span class=\"n\">SERVER_LOGFILE</span><span class=\"si\">}</span><span class=\"s2\">&#39; 2&gt;&amp;1</span><span class=\"se\">\\&quot;</span><span class=\"s2\">&quot;</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">RAY_START_CMD</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;ray start --head --port 6379&quot;</span>\n    <span class=\"c1\"># RAY_BOOTSTRAP_FILE = &quot;~/ray_bootstrap_config.yaml&quot;</span>\n    <span class=\"c1\"># --autoscaling-config=~/ray_bootstrap_config.yaml</span>\n    <span class=\"c1\"># We need to use this instead of ray stop to make sure we don&#39;t stop the SkyPilot ray server,</span>\n    <span class=\"c1\"># which runs on other ports but is required to preserve autostop and correct cluster status.</span>\n    <span class=\"n\">RAY_KILL_CMD</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pkill -f &quot;.*ray.*6379.*&quot;&#39;</span>\n\n<div class=\"viewcode-block\" id=\"Cluster.__init__\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.__init__\">[docs]</a>    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"p\">,</span>\n        <span class=\"n\">ips</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">ssh_creds</span><span class=\"p\">:</span> <span class=\"n\">Dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>  <span class=\"c1\"># We have this here to ignore extra arguments when calling from from_config</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        The Runhouse cluster, or system. This is where you can run Functions or access/transfer data</span>\n<span class=\"sd\">        between. You can BYO (bring-your-own) cluster by providing cluster IP and ssh_creds, or</span>\n<span class=\"sd\">        this can be an on-demand cluster that is spun up/down through</span>\n<span class=\"sd\">        `SkyPilot &lt;https://github.com/skypilot-org/skypilot&gt;`_, using your cloud credentials.</span>\n\n<span class=\"sd\">        .. note::</span>\n<span class=\"sd\">            To build a cluster, please use the factory method :func:`cluster`.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"n\">ips</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">ips</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"n\">ips</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ssh_creds</span> <span class=\"o\">=</span> <span class=\"n\">ssh_creds</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ips</span> <span class=\"o\">=</span> <span class=\"n\">ips</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rpc_tunnel</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">save_config_to_cluster</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">json</span>\n\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config_for_rns</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;sky_state&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">():</span>\n            <span class=\"c1\"># a bunch of setup commands that mess up json dump</span>\n            <span class=\"k\">del</span> <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;sky_state&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">json_config</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;mkdir -p ~/.rh; touch ~/.rh/cluster_config.yaml; echo &#39;</span><span class=\"si\">{</span><span class=\"n\">json_config</span><span class=\"si\">}</span><span class=\"s2\">&#39; &gt; ~/.rh/cluster_config.yaml&quot;</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_config</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"n\">resource_subtype</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;resource_subtype&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">resource_subtype</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Cluster&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">Cluster</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">resource_subtype</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;OnDemandCluster&quot;</span><span class=\"p\">:</span>\n            <span class=\"kn\">from</span> <span class=\"nn\">.on_demand_cluster</span> <span class=\"kn\">import</span> <span class=\"n\">OnDemandCluster</span>\n\n            <span class=\"k\">return</span> <span class=\"n\">OnDemandCluster</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">resource_subtype</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;SageMakerCluster&quot;</span><span class=\"p\">:</span>\n            <span class=\"kn\">from</span> <span class=\"nn\">.sagemaker_cluster</span> <span class=\"kn\">import</span> <span class=\"n\">SageMakerCluster</span>\n\n            <span class=\"k\">return</span> <span class=\"n\">SageMakerCluster</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Unknown cluster type </span><span class=\"si\">{</span><span class=\"n\">resource_subtype</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">config_for_rns</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">config_for_rns</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">save_attrs_to_config</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;ips&quot;</span><span class=\"p\">])</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ips</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;ssh_creds&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ssh_creds</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">config</span>\n\n<div class=\"viewcode-block\" id=\"Cluster.is_up\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.is_up\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">is_up</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Check if the cluster is up.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; rh.cluster(&quot;rh-cpu&quot;).is_up()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span></div>\n\n<div class=\"viewcode-block\" id=\"Cluster.up_if_not\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.up_if_not\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">up_if_not</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Bring up the cluster if it is not up. No-op if cluster is already up.</span>\n<span class=\"sd\">        This only applies to on-demand clusters, and has no effect on self-managed clusters.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; rh.cluster(&quot;rh-cpu&quot;).up_if_not()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_up</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s2\">&quot;up&quot;</span><span class=\"p\">):</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;Cluster &lt;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">&gt; does not have an up method.&quot;</span>\n                <span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">up</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">up</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">keep_warm</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n            <span class=\"sa\">f</span><span class=\"s2\">&quot;cluster.keep_warm will have no effect on self-managed cluster </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">.&quot;</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_sync_runhouse_to_cluster</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">_install_url</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;No address set for cluster &lt;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">&gt;. Is it up?&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">local_rh_package_path</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">pkgutil</span><span class=\"o\">.</span><span class=\"n\">get_loader</span><span class=\"p\">(</span><span class=\"s2\">&quot;runhouse&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">parent</span>\n\n        <span class=\"c1\"># Check if runhouse is installed from source and has setup.py</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"ow\">not</span> <span class=\"n\">_install_url</span>\n            <span class=\"ow\">and</span> <span class=\"n\">local_rh_package_path</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;runhouse&quot;</span>\n            <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"n\">local_rh_package_path</span><span class=\"o\">.</span><span class=\"n\">parent</span> <span class=\"o\">/</span> <span class=\"s2\">&quot;setup.py&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">()</span>\n        <span class=\"p\">):</span>\n            <span class=\"c1\"># Package is installed in editable mode</span>\n            <span class=\"n\">local_rh_package_path</span> <span class=\"o\">=</span> <span class=\"n\">local_rh_package_path</span><span class=\"o\">.</span><span class=\"n\">parent</span>\n            <span class=\"n\">dest_path</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;~/</span><span class=\"si\">{</span><span class=\"n\">local_rh_package_path</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rsync</span><span class=\"p\">(</span>\n                <span class=\"n\">source</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">local_rh_package_path</span><span class=\"p\">),</span>\n                <span class=\"n\">dest</span><span class=\"o\">=</span><span class=\"n\">dest_path</span><span class=\"p\">,</span>\n                <span class=\"n\">up</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"n\">contents</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"n\">filter_options</span><span class=\"o\">=</span><span class=\"s2\">&quot;dir-merge,- .gitignore,- docs/&quot;</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n\n            <span class=\"n\">rh_install_cmd</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;python3 -m pip install ./runhouse&quot;</span>\n        <span class=\"c1\"># elif local_rh_package_path.parent.name == &#39;site-packages&#39;:</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Package is installed in site-packages</span>\n            <span class=\"c1\"># status_codes = self.run([&#39;pip install runhouse-nightly==0.0.2.20221202&#39;], stream_logs=True)</span>\n            <span class=\"c1\"># rh_package = &#39;runhouse_nightly-0.0.1.dev20221202-py3-none-any.whl&#39;</span>\n            <span class=\"c1\"># rh_download_cmd = f&#39;curl https://runhouse-package.s3.amazonaws.com/{rh_package} --output {rh_package}&#39;</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">_install_url</span><span class=\"p\">:</span>\n                <span class=\"kn\">import</span> <span class=\"nn\">runhouse</span>\n\n                <span class=\"n\">_install_url</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;runhouse==</span><span class=\"si\">{</span><span class=\"n\">runhouse</span><span class=\"o\">.</span><span class=\"n\">__version__</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n            <span class=\"n\">rh_install_cmd</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;python3 -m pip install </span><span class=\"si\">{</span><span class=\"n\">_install_url</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n\n        <span class=\"n\">install_cmd</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">_run_cmd</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">{</span><span class=\"n\">rh_install_cmd</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span> <span class=\"k\">if</span> <span class=\"n\">env</span> <span class=\"k\">else</span> <span class=\"n\">rh_install_cmd</span>\n\n        <span class=\"n\">status_codes</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">([</span><span class=\"n\">install_cmd</span><span class=\"p\">],</span> <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">status_codes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Error installing runhouse on cluster &lt;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">&gt;&quot;</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"Cluster.install_packages\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.install_packages\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">install_packages</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">reqs</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"s2\">&quot;Package&quot;</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]],</span> <span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"s2\">&quot;Env&quot;</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Install the given packages on the cluster.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            reqs (List[Package or str): List of packages to install on cluster and env</span>\n<span class=\"sd\">            env (Env or str): Environment to install package on. If left empty, defaults to base environment.</span>\n<span class=\"sd\">                (Default: ``None``)</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; cluster.install_packages(reqs=[&quot;accelerate&quot;, &quot;diffusers&quot;])</span>\n<span class=\"sd\">            &gt;&gt;&gt; cluster.install_packages(reqs=[&quot;accelerate&quot;, &quot;diffusers&quot;], env=&quot;my_conda_env&quot;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.envs.env</span> <span class=\"kn\">import</span> <span class=\"n\">Env</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">check_server</span><span class=\"p\">()</span>\n        <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">_get_env_from</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">Env</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">env</span> <span class=\"ow\">or</span> <span class=\"n\">Env</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_NAME</span><span class=\"p\">)</span>\n        <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">reqs</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">_reqs</span> <span class=\"o\">+</span> <span class=\"n\">reqs</span>\n        <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Cluster.get\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.get\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"n\">Any</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">remote</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">stream_logs</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Get the result for a given key from the cluster&#39;s object store. To raise an error if the key is not found,</span>\n<span class=\"sd\">        use `cluster.get(key, default=KeyError)`.&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">check_server</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">default</span><span class=\"p\">)</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">call_module_method</span><span class=\"p\">(</span>\n                <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">remote</span><span class=\"o\">=</span><span class=\"n\">remote</span><span class=\"p\">,</span> <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"n\">stream_logs</span><span class=\"p\">,</span> <span class=\"n\">system</span><span class=\"o\">=</span><span class=\"bp\">self</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">KeyError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">default</span> <span class=\"o\">==</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"n\">e</span>\n            <span class=\"k\">return</span> <span class=\"n\">default</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span></div>\n\n    <span class=\"c1\"># TODO deprecate</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">run_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">folder_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">check_server</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">run_name</span><span class=\"p\">,</span> <span class=\"n\">remote</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">provenance</span>\n\n    <span class=\"c1\"># TODO this doesn&#39;t need to be a dedicated rpc, it can just flow through Secrets.to and put_resource,</span>\n    <span class=\"c1\">#  like installing packages. Also, it should accept an env (for env var secrets and docker envs).</span>\n<div class=\"viewcode-block\" id=\"Cluster.add_secrets\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.add_secrets\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">add_secrets</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">provider_secrets</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Copy secrets from current environment onto the cluster&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">check_server</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">add_secrets</span><span class=\"p\">(</span><span class=\"n\">provider_secrets</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Cluster.put\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.put\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">put</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">:</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Put the given object on the cluster&#39;s object store at the given key.&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">check_server</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"n\">env</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">put_object</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"n\">env</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Cluster.put_resource\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.put_resource\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">put_resource</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">resource</span><span class=\"p\">:</span> <span class=\"n\">Resource</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Put the given resource on the cluster&#39;s object store. Returns the key (important if name is not set).&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">check_server</span><span class=\"p\">()</span>\n        <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"n\">env</span>\n            <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">resource</span><span class=\"p\">,</span> <span class=\"s2\">&quot;env&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span> <span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"ow\">or</span> <span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"n\">env_name</span>\n            <span class=\"k\">if</span> <span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"n\">RESOURCE_TYPE</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;env&quot;</span>\n            <span class=\"k\">else</span> <span class=\"kc\">None</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"n\">resource</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"n\">env</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">put_resource</span><span class=\"p\">(</span>\n            <span class=\"n\">resource</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"o\">=</span><span class=\"n\">state</span> <span class=\"ow\">or</span> <span class=\"p\">{},</span> <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span>\n        <span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Cluster.rename\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.rename\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">rename</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">old_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">new_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Rename a key in the cluster&#39;s object store.&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">check_server</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">rename</span><span class=\"p\">(</span><span class=\"n\">old_key</span><span class=\"p\">,</span> <span class=\"n\">new_key</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">rename_object</span><span class=\"p\">(</span><span class=\"n\">old_key</span><span class=\"p\">,</span> <span class=\"n\">new_key</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Cluster.keys\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.keys\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">keys</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;List all keys in the cluster&#39;s object store.&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">check_server</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span>\n        <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"o\">=</span><span class=\"n\">env</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span></div>\n\n<div class=\"viewcode-block\" id=\"Cluster.cancel\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.cancel\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">cancel</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">force</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Cancel a given run on cluster by its key.&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">check_server</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">cancel</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">force</span><span class=\"o\">=</span><span class=\"n\">force</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">cancel</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">force</span><span class=\"o\">=</span><span class=\"n\">force</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Cluster.cancel_all\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.cancel_all\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">cancel_all</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">force</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Cancel all runs on cluster.&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">check_server</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">cancel_all</span><span class=\"p\">(</span><span class=\"n\">force</span><span class=\"o\">=</span><span class=\"n\">force</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">cancel</span><span class=\"p\">(</span><span class=\"s2\">&quot;all&quot;</span><span class=\"p\">,</span> <span class=\"n\">force</span><span class=\"o\">=</span><span class=\"n\">force</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Cluster.delete\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.delete\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">delete</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">keys</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Delete the given items from the cluster&#39;s object store. To delete all items, use `cluster.clear()`&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">check_server</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">keys</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">keys</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">keys</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">keys</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">keys</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Cluster.clear\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.clear\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">clear</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Clear the cluster&#39;s object store.&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">check_server</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span></div>\n\n<div class=\"viewcode-block\" id=\"Cluster.on_this_cluster\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.on_this_cluster\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">on_this_cluster</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Whether this function is being called on the same cluster.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">_current_cluster</span><span class=\"p\">(</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rns_address</span></div>\n\n    <span class=\"c1\"># ----------------- RPC Methods ----------------- #</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">connect_server_client</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">force_reconnect</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;No address set for cluster &lt;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">&gt;. Is it up?&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rpc_tunnel</span> <span class=\"ow\">and</span> <span class=\"n\">force_reconnect</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rpc_tunnel</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n        <span class=\"n\">tunnel_refcount</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">ssh_tunnel</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span> <span class=\"ow\">in</span> <span class=\"n\">open_cluster_tunnels</span><span class=\"p\">:</span>\n            <span class=\"n\">ssh_tunnel</span><span class=\"p\">,</span> <span class=\"n\">connected_port</span><span class=\"p\">,</span> <span class=\"n\">tunnel_refcount</span> <span class=\"o\">=</span> <span class=\"n\">open_cluster_tunnels</span><span class=\"p\">[</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span>\n            <span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">ssh_tunnel</span><span class=\"p\">,</span> <span class=\"n\">SSHTunnelForwarder</span><span class=\"p\">):</span>\n                <span class=\"n\">ssh_tunnel</span><span class=\"o\">.</span><span class=\"n\">check_tunnels</span><span class=\"p\">()</span>\n                <span class=\"k\">if</span> <span class=\"n\">ssh_tunnel</span><span class=\"o\">.</span><span class=\"n\">tunnel_is_up</span><span class=\"p\">[</span><span class=\"n\">ssh_tunnel</span><span class=\"o\">.</span><span class=\"n\">local_bind_address</span><span class=\"p\">]:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rpc_tunnel</span> <span class=\"o\">=</span> <span class=\"n\">ssh_tunnel</span>\n\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;localhost&quot;</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span> <span class=\"ow\">or</span> <span class=\"s2\">&quot;:&quot;</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"s2\">&quot;:&quot;</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Case 1: &quot;localhost:23324&quot; or &lt;real_ip&gt;:&lt;custom port&gt; (e.g. a port is already open to the server)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rpc_tunnel</span><span class=\"p\">,</span> <span class=\"n\">connected_port</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;:&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Case 2: &quot;localhost&quot;</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rpc_tunnel</span><span class=\"p\">,</span> <span class=\"n\">connected_port</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"p\">,</span> <span class=\"n\">HTTPClient</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_PORT</span>\n        <span class=\"k\">elif</span> <span class=\"ow\">not</span> <span class=\"n\">ssh_tunnel</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rpc_tunnel</span><span class=\"p\">,</span> <span class=\"n\">connected_port</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ssh_tunnel</span><span class=\"p\">(</span>\n                <span class=\"n\">HTTPClient</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_PORT</span><span class=\"p\">,</span>\n                <span class=\"n\">remote_port</span><span class=\"o\">=</span><span class=\"n\">DEFAULT_SERVER_PORT</span><span class=\"p\">,</span>\n                <span class=\"n\">num_ports_to_try</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"n\">open_cluster_tunnels</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rpc_tunnel</span><span class=\"p\">,</span>\n            <span class=\"n\">connected_port</span><span class=\"p\">,</span>\n            <span class=\"n\">tunnel_refcount</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"c1\"># Connecting to localhost because it&#39;s tunneled into the server at the specified port.</span>\n        <span class=\"n\">creds</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ssh_creds</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">creds</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;password&quot;</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">creds</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;ssh_user&quot;</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">HTTPClient</span><span class=\"p\">(</span>\n                <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s2\">&quot;127.0.0.1&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"n\">connected_port</span><span class=\"p\">,</span>\n                <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">creds</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;ssh_user&quot;</span><span class=\"p\">),</span> <span class=\"n\">creds</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;password&quot;</span><span class=\"p\">)),</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">HTTPClient</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s2\">&quot;127.0.0.1&quot;</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"n\">connected_port</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">check_server</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">restart_server</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span>\n\n        <span class=\"c1\"># For OnDemandCluster, this initial check doesn&#39;t trigger a sky.status, which is slow.</span>\n        <span class=\"c1\"># If cluster simply doesn&#39;t have an address we likely need to up it.</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_up</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s2\">&quot;up&quot;</span><span class=\"p\">):</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;Cluster must have a host address (i.e. be up) or have a reup_cluster method &quot;</span>\n                    <span class=\"s2\">&quot;(e.g. OnDemandCluster).&quot;</span>\n                <span class=\"p\">)</span>\n            <span class=\"c1\"># If this is a OnDemandCluster, before we up the cluster, run a sky.status to see if the cluster</span>\n            <span class=\"c1\"># is already up but doesn&#39;t have an address assigned yet.</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">up_if_not</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">connect_server_client</span><span class=\"p\">()</span>\n                <span class=\"n\">cluster_config</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config_for_rns</span>\n                <span class=\"k\">if</span> <span class=\"s2\">&quot;sky_state&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">cluster_config</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">():</span>\n                    <span class=\"c1\"># a bunch of setup commands that mess up json dump</span>\n                    <span class=\"k\">del</span> <span class=\"n\">cluster_config</span><span class=\"p\">[</span><span class=\"s2\">&quot;sky_state&quot;</span><span class=\"p\">]</span>\n                <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Checking server </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">check_server</span><span class=\"p\">(</span><span class=\"n\">cluster_config</span><span class=\"o\">=</span><span class=\"n\">cluster_config</span><span class=\"p\">)</span>\n                <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Server </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\"> is up.&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"p\">(</span>\n                <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">exceptions</span><span class=\"o\">.</span><span class=\"n\">ConnectionError</span><span class=\"p\">,</span>\n                <span class=\"n\">sshtunnel</span><span class=\"o\">.</span><span class=\"n\">BaseSSHTunnelForwarderError</span><span class=\"p\">,</span>\n                <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">exceptions</span><span class=\"o\">.</span><span class=\"n\">ReadTimeout</span><span class=\"p\">,</span>\n                <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">exceptions</span><span class=\"o\">.</span><span class=\"n\">ChunkedEncodingError</span><span class=\"p\">,</span>\n            <span class=\"p\">):</span>\n                <span class=\"c1\"># It&#39;s possible that the cluster went down while we were trying to install packages.</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_up</span><span class=\"p\">():</span>\n                    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Server </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\"> is down.&quot;</span><span class=\"p\">)</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">up_if_not</span><span class=\"p\">()</span>\n                <span class=\"k\">elif</span> <span class=\"n\">restart_server</span><span class=\"p\">:</span>\n                    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n                        <span class=\"sa\">f</span><span class=\"s2\">&quot;Server </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\"> is up, but the HTTP server may not be up.&quot;</span>\n                    <span class=\"p\">)</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">restart_server</span><span class=\"p\">()</span>\n                    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span>\n                        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Checking server </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\"> again [</span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"si\">}</span><span class=\"s2\">/5].&quot;</span><span class=\"p\">)</span>\n                        <span class=\"k\">try</span><span class=\"p\">:</span>\n                            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">check_server</span><span class=\"p\">(</span><span class=\"n\">cluster_config</span><span class=\"o\">=</span><span class=\"n\">cluster_config</span><span class=\"p\">)</span>\n                            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Server </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\"> is up.&quot;</span><span class=\"p\">)</span>\n                            <span class=\"k\">return</span>\n                        <span class=\"k\">except</span> <span class=\"p\">(</span>\n                            <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">exceptions</span><span class=\"o\">.</span><span class=\"n\">ConnectionError</span><span class=\"p\">,</span>\n                            <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">exceptions</span><span class=\"o\">.</span><span class=\"n\">ReadTimeout</span><span class=\"p\">,</span>\n                        <span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">error</span><span class=\"p\">:</span>\n                            <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">5</span><span class=\"p\">:</span>\n                                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">)</span>\n                            <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Could not connect to cluster &lt;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">&gt;&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">ssh_tunnel</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">local_port</span><span class=\"p\">,</span> <span class=\"n\">remote_port</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">num_ports_to_try</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">SSHTunnelForwarder</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]:</span>\n        <span class=\"c1\"># Debugging cmds (mac):</span>\n        <span class=\"c1\"># netstat -vanp tcp | grep 5005</span>\n        <span class=\"c1\"># lsof -i :5005_</span>\n        <span class=\"c1\"># kill -9 &lt;pid&gt;</span>\n\n        <span class=\"n\">creds</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ssh_creds</span><span class=\"p\">()</span>\n        <span class=\"n\">connected</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"n\">ssh_tunnel</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">while</span> <span class=\"ow\">not</span> <span class=\"n\">connected</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">local_port</span> <span class=\"o\">&gt;</span> <span class=\"n\">local_port</span> <span class=\"o\">+</span> <span class=\"n\">num_ports_to_try</span><span class=\"p\">:</span>\n                    <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span>\n                        <span class=\"sa\">f</span><span class=\"s2\">&quot;Failed to create SSH tunnel after </span><span class=\"si\">{</span><span class=\"n\">num_ports_to_try</span><span class=\"si\">}</span><span class=\"s2\"> attempts&quot;</span>\n                    <span class=\"p\">)</span>\n\n                <span class=\"k\">if</span> <span class=\"n\">creds</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;ssh_proxy_command&quot;</span><span class=\"p\">):</span>\n                    <span class=\"c1\"># Start a tunnel using self.run in a thread, instead of ssh_tunnel</span>\n                    <span class=\"n\">ssh_credentials</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ssh_creds</span><span class=\"p\">())</span>\n                    <span class=\"n\">host</span> <span class=\"o\">=</span> <span class=\"n\">ssh_credentials</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;ssh_host&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"p\">)</span>\n                    <span class=\"n\">runner</span> <span class=\"o\">=</span> <span class=\"n\">SkySSHRunner</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">ssh_credentials</span><span class=\"p\">)</span>\n                    <span class=\"n\">runner</span><span class=\"o\">.</span><span class=\"n\">tunnel</span><span class=\"p\">(</span><span class=\"n\">local_port</span><span class=\"p\">,</span> <span class=\"n\">remote_port</span><span class=\"p\">)</span>\n                    <span class=\"n\">ssh_tunnel</span> <span class=\"o\">=</span> <span class=\"n\">runner</span>  <span class=\"c1\"># Just to keep the object in memory</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">ssh_tunnel</span> <span class=\"o\">=</span> <span class=\"n\">SSHTunnelForwarder</span><span class=\"p\">(</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"p\">,</span>\n                        <span class=\"n\">ssh_username</span><span class=\"o\">=</span><span class=\"n\">creds</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;ssh_user&quot;</span><span class=\"p\">),</span>\n                        <span class=\"n\">ssh_pkey</span><span class=\"o\">=</span><span class=\"n\">creds</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;ssh_private_key&quot;</span><span class=\"p\">),</span>\n                        <span class=\"n\">ssh_password</span><span class=\"o\">=</span><span class=\"n\">creds</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;password&quot;</span><span class=\"p\">),</span>\n                        <span class=\"n\">local_bind_address</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">local_port</span><span class=\"p\">),</span>\n                        <span class=\"n\">remote_bind_address</span><span class=\"o\">=</span><span class=\"p\">(</span>\n                            <span class=\"s2\">&quot;127.0.0.1&quot;</span><span class=\"p\">,</span>\n                            <span class=\"n\">remote_port</span> <span class=\"ow\">or</span> <span class=\"n\">local_port</span><span class=\"p\">,</span>\n                        <span class=\"p\">),</span>\n                        <span class=\"n\">set_keepalive</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n                        <span class=\"c1\"># mute_exceptions=True,</span>\n                    <span class=\"p\">)</span>\n                    <span class=\"n\">ssh_tunnel</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n                <span class=\"n\">connected</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"k\">except</span> <span class=\"n\">HandlerSSHTunnelForwarderError</span><span class=\"p\">:</span>\n                <span class=\"c1\"># try connecting with a different port - most likely the issue is the port is already taken</span>\n                <span class=\"n\">local_port</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                <span class=\"n\">num_ports_to_try</span> <span class=\"o\">-=</span> <span class=\"mi\">1</span>\n                <span class=\"k\">pass</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">ssh_tunnel</span><span class=\"p\">,</span> <span class=\"n\">local_port</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_start_server_cmds</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">restart</span><span class=\"p\">,</span> <span class=\"n\">restart_ray</span><span class=\"p\">,</span> <span class=\"n\">screen</span><span class=\"p\">,</span> <span class=\"n\">create_logfile</span><span class=\"p\">):</span>\n        <span class=\"n\">cmds</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"n\">restart</span><span class=\"p\">:</span>\n            <span class=\"n\">cmds</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">SERVER_STOP_CMD</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">restart_ray</span><span class=\"p\">:</span>\n            <span class=\"n\">cmds</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">RAY_KILL_CMD</span><span class=\"p\">)</span>\n            <span class=\"c1\"># TODO Add in BOOTSTRAP file if it exists?</span>\n            <span class=\"n\">cmds</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">RAY_START_CMD</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">screen</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">create_logfile</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">SERVER_LOGFILE</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">():</span>\n                <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">SERVER_LOGFILE</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">mkdir</span><span class=\"p\">(</span><span class=\"n\">parents</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">exist_ok</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n                <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">SERVER_LOGFILE</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">touch</span><span class=\"p\">()</span>\n            <span class=\"n\">cmds</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">START_SCREEN_CMD</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">cmds</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">SERVER_START_CMD</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">cmds</span>\n\n<div class=\"viewcode-block\" id=\"Cluster.restart_server\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.restart_server\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">restart_server</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">_rh_install_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">resync_rh</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">restart_ray</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">env_activate_cmd</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Restart the RPC server.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            resync_rh (bool): Whether to resync runhouse. (Default: ``True``)</span>\n<span class=\"sd\">            restart_ray (bool): Whether to restart Ray. (Default: ``True``)</span>\n<span class=\"sd\">            env_activate_cmd (str, optional): Command to activate the environment on the server. (Default: ``None``)</span>\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; rh.cluster(&quot;rh-cpu&quot;).restart_server()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Restarting HTTP server on </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">.&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">resync_rh</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_sync_runhouse_to_cluster</span><span class=\"p\">(</span><span class=\"n\">_install_url</span><span class=\"o\">=</span><span class=\"n\">_rh_install_url</span><span class=\"p\">)</span>\n        <span class=\"n\">cmd</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">CLI_RESTART_CMD</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"s2\">&quot; --no-restart-ray&quot;</span> <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">restart_ray</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">cmd</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">env_activate_cmd</span><span class=\"si\">}</span><span class=\"s2\"> &amp;&amp; </span><span class=\"si\">{</span><span class=\"n\">cmd</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span> <span class=\"k\">if</span> <span class=\"n\">env_activate_cmd</span> <span class=\"k\">else</span> <span class=\"n\">cmd</span>\n\n        <span class=\"n\">status_codes</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">commands</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">cmd</span><span class=\"p\">])</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">status_codes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Failed to restart server </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">.&quot;</span><span class=\"p\">)</span>\n        <span class=\"c1\"># As of 2023-15-May still seems we need this.</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">status_codes</span></div>\n\n<div class=\"viewcode-block\" id=\"Cluster.pause_autostop\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.pause_autostop\">[docs]</a>    <span class=\"nd\">@contextlib</span><span class=\"o\">.</span><span class=\"n\">contextmanager</span>\n    <span class=\"k\">def</span> <span class=\"nf\">pause_autostop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Context manager to temporarily pause autostop. Mainly for OnDemand clusters, for BYO cluster</span>\n<span class=\"sd\">        there is no autostop.&quot;&quot;&quot;</span>\n        <span class=\"k\">pass</span></div>\n\n<div class=\"viewcode-block\" id=\"Cluster.call\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.call\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">call</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">module_name</span><span class=\"p\">,</span>\n        <span class=\"n\">method_name</span><span class=\"p\">,</span>\n        <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span>\n        <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">run_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">remote</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">run_async</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">save</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Call a method on a module that is in the cluster&#39;s object store.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            module_name (str): Name of the module saved on system.</span>\n<span class=\"sd\">            method_name (str): Name of the method.</span>\n<span class=\"sd\">            stream_logs (bool): Whether to stream logs from the method call.</span>\n<span class=\"sd\">            run_name (str): Name for the run.</span>\n<span class=\"sd\">            remote (bool): Return a remote object from the function, rather than the result proper.</span>\n<span class=\"sd\">            run_async (bool): Run the method asynchronously and return a run_key to retreive results and logs later.</span>\n<span class=\"sd\">            *args: Positional arguments to pass to the method.</span>\n<span class=\"sd\">            **kwargs: Keyword arguments to pass to the method.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; cluster.call(&quot;my_module&quot;, &quot;my_method&quot;, arg1, arg2, kwarg1=kwarg1)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">check_server</span><span class=\"p\">()</span>\n        <span class=\"c1\"># Note: might be single value, might be a generator!</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">():</span>\n            <span class=\"c1\"># TODO</span>\n            <span class=\"k\">pass</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">call_module_method</span><span class=\"p\">(</span>\n            <span class=\"n\">module_name</span><span class=\"p\">,</span>\n            <span class=\"n\">method_name</span><span class=\"p\">,</span>\n            <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"n\">stream_logs</span><span class=\"p\">,</span>\n            <span class=\"n\">run_name</span><span class=\"o\">=</span><span class=\"n\">run_name</span><span class=\"p\">,</span>\n            <span class=\"n\">remote</span><span class=\"o\">=</span><span class=\"n\">remote</span><span class=\"p\">,</span>\n            <span class=\"n\">run_async</span><span class=\"o\">=</span><span class=\"n\">run_async</span><span class=\"p\">,</span>\n            <span class=\"n\">save</span><span class=\"o\">=</span><span class=\"n\">save</span><span class=\"p\">,</span>\n            <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"n\">args</span><span class=\"p\">,</span>\n            <span class=\"n\">kwargs</span><span class=\"o\">=</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n            <span class=\"n\">system</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Cluster.is_connected\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.is_connected\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">is_connected</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Whether the RPC tunnel is up.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; connected = cluster.is_connected()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span></div>\n\n<div class=\"viewcode-block\" id=\"Cluster.disconnect\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.disconnect\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">disconnect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Disconnect the RPC tunnel.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; cluster.disconnect()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rpc_tunnel</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rpc_tunnel</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span></div>\n        <span class=\"c1\"># if self.client:</span>\n        <span class=\"c1\">#     self.client.shutdown()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__getstate__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Delete non-serializable elements (e.g. thread locks) before pickling.&quot;&quot;&quot;</span>\n        <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n        <span class=\"n\">state</span><span class=\"p\">[</span><span class=\"s2\">&quot;client&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">state</span><span class=\"p\">[</span><span class=\"s2\">&quot;_rpc_tunnel&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">return</span> <span class=\"n\">state</span>\n\n    <span class=\"c1\"># ----------------- SSH Methods ----------------- #</span>\n\n<div class=\"viewcode-block\" id=\"Cluster.ssh_creds\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.ssh_creds\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">ssh_creds</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Retrieve SSH credentials.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ssh_creds</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_fsspec_sync</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">dest</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">up</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"p\">):</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.folders</span> <span class=\"kn\">import</span> <span class=\"n\">folder</span>\n\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Syncing files from </span><span class=\"si\">{</span><span class=\"n\">source</span><span class=\"si\">}</span><span class=\"s2\"> to </span><span class=\"si\">{</span><span class=\"n\">dest</span><span class=\"si\">}</span><span class=\"s2\"> using fsspec&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">folder</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">fs</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">fsspec_fs</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">up</span><span class=\"p\">:</span>  <span class=\"c1\"># local to cluster</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"s2\">&quot;.gitignore&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">():</span>\n                <span class=\"n\">tracked_files</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                    <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">check_output</span><span class=\"p\">(</span>\n                        <span class=\"s2\">&quot;git ls-files --cached --exclude-standard&quot;</span><span class=\"p\">,</span>\n                        <span class=\"n\">cwd</span><span class=\"o\">=</span><span class=\"n\">source</span><span class=\"p\">,</span>\n                        <span class=\"n\">shell</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"p\">)</span>\n                    <span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s2\">&quot;utf-8&quot;</span><span class=\"p\">)</span>\n                    <span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()</span>\n                <span class=\"p\">)</span>\n                <span class=\"c1\"># exclude docs/ when syncing over runhouse</span>\n                <span class=\"k\">if</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;runhouse&quot;</span><span class=\"p\">:</span>\n                    <span class=\"n\">tracked_files</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                        <span class=\"n\">file</span> <span class=\"k\">for</span> <span class=\"n\">file</span> <span class=\"ow\">in</span> <span class=\"n\">tracked_files</span> <span class=\"k\">if</span> <span class=\"s2\">&quot;docs/&quot;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">file</span>\n                    <span class=\"p\">]</span>\n                <span class=\"n\">untracked_files</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                    <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">check_output</span><span class=\"p\">(</span>\n                        <span class=\"s2\">&quot;git ls-files --other --exclude-standard&quot;</span><span class=\"p\">,</span>\n                        <span class=\"n\">cwd</span><span class=\"o\">=</span><span class=\"n\">source</span><span class=\"p\">,</span>\n                        <span class=\"n\">shell</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"p\">)</span>\n                    <span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s2\">&quot;utf-8&quot;</span><span class=\"p\">)</span>\n                    <span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()</span>\n                <span class=\"p\">)</span>\n                <span class=\"n\">files</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                    <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">file</span> <span class=\"k\">for</span> <span class=\"n\">file</span> <span class=\"ow\">in</span> <span class=\"n\">tracked_files</span> <span class=\"o\">+</span> <span class=\"n\">untracked_files</span>\n                <span class=\"p\">]</span>\n                <span class=\"n\">fs</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">files</span><span class=\"p\">,</span> <span class=\"n\">dest</span><span class=\"p\">,</span> <span class=\"n\">recursive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">create_dir</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">fs</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"p\">,</span> <span class=\"n\">dest</span><span class=\"p\">,</span> <span class=\"n\">recursive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">create_dir</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>  <span class=\"c1\"># cluster to local</span>\n            <span class=\"k\">if</span> <span class=\"n\">fs</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"s2\">&quot;.gitignore&quot;</span><span class=\"p\">)):</span>\n                <span class=\"n\">files</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span>\n                    <span class=\"p\">[</span><span class=\"sa\">f</span><span class=\"s2\">&quot;cd </span><span class=\"si\">{</span><span class=\"n\">source</span><span class=\"si\">}</span><span class=\"s2\"> &amp;&amp; git ls-files --cached --exclude-standard&quot;</span><span class=\"p\">]</span>\n                <span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n                <span class=\"n\">files</span> <span class=\"o\">=</span> <span class=\"n\">files</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()</span>\n                <span class=\"n\">fs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">files</span><span class=\"p\">,</span> <span class=\"n\">dest</span><span class=\"p\">,</span> <span class=\"n\">recursive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">create_dir</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"c1\"># the following errors if {source} is a directory so currently working around by extracting files</span>\n                <span class=\"c1\"># fs.get(source, dest, recursive=True, create_dir=True)</span>\n                <span class=\"n\">files</span> <span class=\"o\">=</span> <span class=\"n\">fs</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"p\">)</span>\n                <span class=\"n\">fs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">files</span><span class=\"p\">,</span> <span class=\"n\">dest</span><span class=\"p\">,</span> <span class=\"n\">recursive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">create_dir</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_rsync</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n        <span class=\"n\">dest</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n        <span class=\"n\">up</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"p\">,</span>\n        <span class=\"n\">contents</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">filter_options</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Sync the contents of the source directory into the destination.</span>\n\n<span class=\"sd\">        .. note:</span>\n<span class=\"sd\">            Ending `source` with a slash will copy the contents of the directory into dest,</span>\n<span class=\"sd\">            while omitting it will copy the directory itself (adding a directory layer).</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># FYI, could be useful: https://github.com/gchamon/sysrsync</span>\n        <span class=\"k\">if</span> <span class=\"n\">contents</span><span class=\"p\">:</span>\n            <span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"n\">source</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/&quot;</span> <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;/&quot;</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"n\">source</span>\n            <span class=\"n\">dest</span> <span class=\"o\">=</span> <span class=\"n\">dest</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/&quot;</span> <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">dest</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;/&quot;</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"n\">dest</span>\n\n        <span class=\"n\">ssh_credentials</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ssh_creds</span><span class=\"p\">())</span>\n        <span class=\"n\">ssh_credentials</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;ssh_host&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">ssh_credentials</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;password&quot;</span><span class=\"p\">):</span>\n            <span class=\"c1\"># Use SkyPilot command runner</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">ssh_credentials</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;ssh_private_key&quot;</span><span class=\"p\">):</span>\n                <span class=\"n\">ssh_credentials</span><span class=\"p\">[</span><span class=\"s2\">&quot;ssh_private_key&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"n\">runner</span> <span class=\"o\">=</span> <span class=\"n\">SkySSHRunner</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">ssh_credentials</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">up</span><span class=\"p\">:</span>\n                <span class=\"n\">runner</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">([</span><span class=\"s2\">&quot;mkdir&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;-p&quot;</span><span class=\"p\">,</span> <span class=\"n\">dest</span><span class=\"p\">],</span> <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">dest</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">expanduser</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">mkdir</span><span class=\"p\">(</span><span class=\"n\">parents</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">exist_ok</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"n\">runner</span><span class=\"o\">.</span><span class=\"n\">rsync</span><span class=\"p\">(</span>\n                <span class=\"n\">source</span><span class=\"p\">,</span> <span class=\"n\">dest</span><span class=\"p\">,</span> <span class=\"n\">up</span><span class=\"o\">=</span><span class=\"n\">up</span><span class=\"p\">,</span> <span class=\"n\">filter_options</span><span class=\"o\">=</span><span class=\"n\">filter_options</span><span class=\"p\">,</span> <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"kc\">False</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">dest</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;~/&quot;</span><span class=\"p\">):</span>\n                <span class=\"n\">dest</span> <span class=\"o\">=</span> <span class=\"n\">dest</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:]</span>\n\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fsspec_sync</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"p\">,</span> <span class=\"n\">dest</span><span class=\"p\">,</span> <span class=\"n\">up</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"Cluster.ssh\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.ssh\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">ssh</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;SSH into the cluster</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; rh.cluster(&quot;rh-cpu&quot;).ssh()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">creds</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ssh_creds</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">creds</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;ssh_private_key&quot;</span><span class=\"p\">):</span>\n            <span class=\"n\">cmd</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;ssh </span><span class=\"si\">{</span><span class=\"n\">creds</span><span class=\"p\">[</span><span class=\"s1\">&#39;ssh_user&#39;</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">:</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"si\">}</span><span class=\"s2\"> -i </span><span class=\"si\">{</span><span class=\"n\">creds</span><span class=\"p\">[</span><span class=\"s1\">&#39;ssh_private_key&#39;</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># if needs a password, will prompt for manual password</span>\n            <span class=\"n\">cmd</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;ssh </span><span class=\"si\">{</span><span class=\"n\">creds</span><span class=\"p\">[</span><span class=\"s1\">&#39;ssh_user&#39;</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">@</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n\n        <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot; &quot;</span><span class=\"p\">))</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_ping</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">):</span>\n        <span class=\"n\">ssh_call</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">([</span><span class=\"s1\">&#39;echo &quot;hello&quot;&#39;</span><span class=\"p\">]))</span>\n        <span class=\"n\">ssh_call</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n        <span class=\"n\">ssh_call</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"n\">timeout</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">ssh_call</span><span class=\"o\">.</span><span class=\"n\">is_alive</span><span class=\"p\">():</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TimeoutError</span><span class=\"p\">(</span><span class=\"s2\">&quot;SSH call timed out&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n<div class=\"viewcode-block\" id=\"Cluster.run\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.run\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">commands</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span>\n        <span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"s2\">&quot;Env&quot;</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">stream_logs</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">port_forward</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">require_outputs</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">run_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">list</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Run a list of shell commands on the cluster. If `run_name` is provided, the commands will be</span>\n<span class=\"sd\">        sent over to the cluster before being executed and a Run object will be created.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; cpu.run([&quot;pip install numpy&quot;])</span>\n<span class=\"sd\">            &gt;&gt;&gt; cpu.run([&quot;pip install numpy&quot;, env=&quot;my_conda_env&quot;])</span>\n<span class=\"sd\">            &gt;&gt;&gt; cpu.run([&quot;python script.py&quot;], run_name=&quot;my_exp&quot;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># TODO [DG] suspend autostop while running</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.provenance</span> <span class=\"kn\">import</span> <span class=\"n\">run</span>\n\n        <span class=\"n\">cmd_prefix</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">env</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n                <span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.envs</span> <span class=\"kn\">import</span> <span class=\"n\">Env</span>\n\n                <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">Env</span><span class=\"o\">.</span><span class=\"n\">from_name</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">)</span>\n            <span class=\"n\">cmd_prefix</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">_run_cmd</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">run_name</span><span class=\"p\">:</span>\n            <span class=\"c1\"># If not creating a Run then just run the commands via SSH and return</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_run_commands_with_ssh</span><span class=\"p\">(</span>\n                <span class=\"n\">commands</span><span class=\"p\">,</span> <span class=\"n\">cmd_prefix</span><span class=\"p\">,</span> <span class=\"n\">stream_logs</span><span class=\"p\">,</span> <span class=\"n\">port_forward</span><span class=\"p\">,</span> <span class=\"n\">require_outputs</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"c1\"># Create and save the Run locally</span>\n        <span class=\"k\">with</span> <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">run_name</span><span class=\"p\">,</span> <span class=\"n\">cmds</span><span class=\"o\">=</span><span class=\"n\">commands</span><span class=\"p\">,</span> <span class=\"n\">overwrite</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">r</span><span class=\"p\">:</span>\n            <span class=\"n\">return_codes</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_run_commands_with_ssh</span><span class=\"p\">(</span>\n                <span class=\"n\">commands</span><span class=\"p\">,</span> <span class=\"n\">cmd_prefix</span><span class=\"p\">,</span> <span class=\"n\">stream_logs</span><span class=\"p\">,</span> <span class=\"n\">port_forward</span><span class=\"p\">,</span> <span class=\"n\">require_outputs</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"c1\"># Register the completed Run</span>\n        <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">_register_cmd_run_completion</span><span class=\"p\">(</span><span class=\"n\">return_codes</span><span class=\"p\">)</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Saved Run to path: </span><span class=\"si\">{</span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">folder</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">return_codes</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_run_commands_with_ssh</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">commands</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">,</span>\n        <span class=\"n\">cmd_prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n        <span class=\"n\">stream_logs</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"p\">,</span>\n        <span class=\"n\">port_forward</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">require_outputs</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"n\">return_codes</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n        <span class=\"n\">ssh_credentials</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ssh_creds</span><span class=\"p\">())</span>\n        <span class=\"n\">host</span> <span class=\"o\">=</span> <span class=\"n\">ssh_credentials</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;ssh_host&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">ssh_credentials</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;password&quot;</span><span class=\"p\">):</span>\n            <span class=\"n\">runner</span> <span class=\"o\">=</span> <span class=\"n\">SkySSHRunner</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">ssh_credentials</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">command</span> <span class=\"ow\">in</span> <span class=\"n\">commands</span><span class=\"p\">:</span>\n                <span class=\"n\">command</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">cmd_prefix</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">{</span><span class=\"n\">command</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span> <span class=\"k\">if</span> <span class=\"n\">cmd_prefix</span> <span class=\"k\">else</span> <span class=\"n\">command</span>\n                <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Running command on </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">: </span><span class=\"si\">{</span><span class=\"n\">command</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">ret_code</span> <span class=\"o\">=</span> <span class=\"n\">runner</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span>\n                    <span class=\"n\">command</span><span class=\"p\">,</span>\n                    <span class=\"n\">require_outputs</span><span class=\"o\">=</span><span class=\"n\">require_outputs</span><span class=\"p\">,</span>\n                    <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"n\">stream_logs</span><span class=\"p\">,</span>\n                    <span class=\"n\">port_forward</span><span class=\"o\">=</span><span class=\"n\">port_forward</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n                <span class=\"n\">return_codes</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ret_code</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"kn\">import</span> <span class=\"nn\">paramiko</span>\n\n            <span class=\"n\">log_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">devnull</span>\n            <span class=\"n\">log_dir</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">expanduser</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">log_path</span><span class=\"p\">))</span>\n            <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">makedirs</span><span class=\"p\">(</span><span class=\"n\">log_dir</span><span class=\"p\">,</span> <span class=\"n\">exist_ok</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n            <span class=\"k\">with</span> <span class=\"n\">paramiko</span><span class=\"o\">.</span><span class=\"n\">SSHClient</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">ssh</span><span class=\"p\">:</span>\n                <span class=\"n\">ssh</span><span class=\"o\">.</span><span class=\"n\">set_missing_host_key_policy</span><span class=\"p\">(</span><span class=\"n\">paramiko</span><span class=\"o\">.</span><span class=\"n\">AutoAddPolicy</span><span class=\"p\">())</span>\n                <span class=\"n\">ssh</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"p\">,</span>\n                    <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"n\">ssh_credentials</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;ssh_user&quot;</span><span class=\"p\">),</span>\n                    <span class=\"c1\"># key_filename=ssh_credentials.get(&quot;ssh_private_key&quot;, None),</span>\n                    <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"n\">ssh_credentials</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;password&quot;</span><span class=\"p\">),</span>\n                <span class=\"p\">)</span>\n\n                <span class=\"c1\"># bash warnings to remove from stderr</span>\n                <span class=\"n\">skip_err</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                    <span class=\"s2\">&quot;bash: cannot set terminal process group&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;bash: no job control in this shell&quot;</span><span class=\"p\">,</span>\n                <span class=\"p\">]</span>\n\n                <span class=\"k\">for</span> <span class=\"n\">command</span> <span class=\"ow\">in</span> <span class=\"n\">commands</span><span class=\"p\">:</span>\n                    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Running command on </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">: </span><span class=\"si\">{</span><span class=\"n\">command</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n                    <span class=\"k\">if</span> <span class=\"n\">stream_logs</span><span class=\"p\">:</span>\n                        <span class=\"n\">command</span> <span class=\"o\">+=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;| tee </span><span class=\"si\">{</span><span class=\"n\">log_path</span><span class=\"si\">}</span><span class=\"s2\"> &quot;</span>\n                        <span class=\"n\">command</span> <span class=\"o\">+=</span> <span class=\"s2\">&quot;; exit $</span><span class=\"si\">{PIPESTATUS[0]}</span><span class=\"s2\">&quot;</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"n\">command</span> <span class=\"o\">+=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;&gt; </span><span class=\"si\">{</span><span class=\"n\">log_path</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n\n                    <span class=\"c1\"># adapted from skypilot&#39;s ssh command runner</span>\n                    <span class=\"n\">command</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                        <span class=\"s2\">&quot;bash --login -c -i $&#39;true &amp;&amp; source ~/.bashrc&quot;</span>\n                        <span class=\"s2\">&quot;&amp;&amp; export OMP_NUM_THREADS=1 PYTHONWARNINGS=ignore&quot;</span>\n                        <span class=\"sa\">f</span><span class=\"s2\">&quot; &amp;&amp; (</span><span class=\"si\">{</span><span class=\"n\">cmd_prefix</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">{</span><span class=\"n\">command</span><span class=\"si\">}</span><span class=\"s2\">)&#39;&quot;</span>\n                    <span class=\"p\">)</span>\n\n                    <span class=\"n\">transport</span> <span class=\"o\">=</span> <span class=\"n\">ssh</span><span class=\"o\">.</span><span class=\"n\">get_transport</span><span class=\"p\">()</span>\n                    <span class=\"n\">channel</span> <span class=\"o\">=</span> <span class=\"n\">transport</span><span class=\"o\">.</span><span class=\"n\">open_session</span><span class=\"p\">()</span>\n                    <span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">exec_command</span><span class=\"p\">(</span><span class=\"n\">command</span><span class=\"p\">)</span>\n\n                    <span class=\"n\">stdout</span> <span class=\"o\">=</span> <span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">recv</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">()</span>\n                    <span class=\"n\">exit_code</span> <span class=\"o\">=</span> <span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">recv_exit_status</span><span class=\"p\">()</span>\n                    <span class=\"n\">stderr</span> <span class=\"o\">=</span> <span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">recv_stderr</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">()</span>\n\n                    <span class=\"n\">stderr</span> <span class=\"o\">=</span> <span class=\"n\">stderr</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n                    <span class=\"n\">stderr</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                        <span class=\"n\">err</span>\n                        <span class=\"k\">for</span> <span class=\"n\">err</span> <span class=\"ow\">in</span> <span class=\"n\">stderr</span>\n                        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">any</span><span class=\"p\">(</span><span class=\"n\">skip</span> <span class=\"ow\">in</span> <span class=\"n\">err</span> <span class=\"k\">for</span> <span class=\"n\">skip</span> <span class=\"ow\">in</span> <span class=\"n\">skip_err</span><span class=\"p\">)</span>\n                    <span class=\"p\">]</span>\n                    <span class=\"n\">stderr</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">)</span>\n\n                    <span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n                    <span class=\"k\">if</span> <span class=\"n\">require_outputs</span><span class=\"p\">:</span>\n                        <span class=\"n\">return_codes</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">exit_code</span><span class=\"p\">,</span> <span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"n\">stderr</span><span class=\"p\">))</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"n\">return_codes</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">exit_code</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">return_codes</span>\n\n<div class=\"viewcode-block\" id=\"Cluster.run_python\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.run_python\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">run_python</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">commands</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span>\n        <span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"s2\">&quot;Env&quot;</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">stream_logs</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">port_forward</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">run_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Run a list of python commands on the cluster.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; cpu.run_python([&#39;import numpy&#39;, &#39;print(numpy.__version__)&#39;])</span>\n<span class=\"sd\">            &gt;&gt;&gt; cpu.run_python([&quot;print(&#39;hello&#39;)&quot;])</span>\n\n<span class=\"sd\">        Note:</span>\n<span class=\"sd\">            Running Python commands with nested quotes can be finicky. If using nested quotes,</span>\n<span class=\"sd\">            try to wrap the outer quote with double quotes (&quot;) and the inner quotes with a single quote (&#39;).</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">cmd_prefix</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;python3 -c&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">env</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n                <span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.envs</span> <span class=\"kn\">import</span> <span class=\"n\">Env</span>\n\n                <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">Env</span><span class=\"o\">.</span><span class=\"n\">from_name</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">)</span>\n            <span class=\"n\">cmd_prefix</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">_run_cmd</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">{</span><span class=\"n\">cmd_prefix</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n        <span class=\"n\">command_str</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;; &quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">commands</span><span class=\"p\">)</span>\n        <span class=\"n\">command_str_repr</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">command_str</span><span class=\"p\">))[</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ssh_creds</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;password&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span> <span class=\"n\">command_str</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">formatted_command</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s1\">&#39;</span><span class=\"si\">{</span><span class=\"n\">cmd_prefix</span><span class=\"si\">}</span><span class=\"s1\"> &quot;</span><span class=\"si\">{</span><span class=\"n\">command_str_repr</span><span class=\"si\">}</span><span class=\"s1\">&quot;&#39;</span>\n\n        <span class=\"c1\"># If invoking a run as part of the python commands also return the Run object</span>\n        <span class=\"n\">return_codes</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span><span class=\"n\">formatted_command</span><span class=\"p\">],</span>\n            <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"n\">stream_logs</span><span class=\"p\">,</span>\n            <span class=\"n\">port_forward</span><span class=\"o\">=</span><span class=\"n\">port_forward</span><span class=\"p\">,</span>\n            <span class=\"n\">run_name</span><span class=\"o\">=</span><span class=\"n\">run_name</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">return_codes</span></div>\n\n<div class=\"viewcode-block\" id=\"Cluster.sync_secrets\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.sync_secrets\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">sync_secrets</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">providers</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Send secrets for the given providers.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            providers(List[str] or None): List of providers to send secrets for.</span>\n<span class=\"sd\">                If `None`, all providers configured in the environment will by sent.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; cpu.sync_secrets(providers=[&quot;aws&quot;, &quot;lambda&quot;])</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">runhouse</span> <span class=\"kn\">import</span> <span class=\"n\">Secrets</span>\n\n        <span class=\"n\">Secrets</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">providers</span><span class=\"o\">=</span><span class=\"n\">providers</span><span class=\"p\">)</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">ipython</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># TODO tunnel into python interpreter in cluster</span>\n        <span class=\"k\">pass</span>\n\n<div class=\"viewcode-block\" id=\"Cluster.notebook\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.notebook\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">notebook</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">persist</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">sync_package_on_close</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">port_forward</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">8888</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Tunnel into and launch notebook from the cluster.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; rh.cluster(&quot;test-cluster&quot;).notebook()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">tunnel</span><span class=\"p\">,</span> <span class=\"n\">port_fwd</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ssh_tunnel</span><span class=\"p\">(</span><span class=\"n\">local_port</span><span class=\"o\">=</span><span class=\"n\">port_forward</span><span class=\"p\">,</span> <span class=\"n\">num_ports_to_try</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">install_cmd</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;pip install jupyterlab&quot;</span>\n            <span class=\"n\">jupyter_cmd</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;jupyter lab --port </span><span class=\"si\">{</span><span class=\"n\">port_fwd</span><span class=\"si\">}</span><span class=\"s2\"> --no-browser&quot;</span>\n            <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pause_autostop</span><span class=\"p\">():</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">commands</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">install_cmd</span><span class=\"p\">,</span> <span class=\"n\">jupyter_cmd</span><span class=\"p\">],</span> <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n        <span class=\"k\">finally</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">sync_package_on_close</span><span class=\"p\">:</span>\n                <span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.packages.package</span> <span class=\"kn\">import</span> <span class=\"n\">Package</span>\n\n                <span class=\"k\">if</span> <span class=\"n\">sync_package_on_close</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;./&quot;</span><span class=\"p\">:</span>\n                    <span class=\"n\">sync_package_on_close</span> <span class=\"o\">=</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">locate_working_dir</span><span class=\"p\">()</span>\n                <span class=\"n\">pkg</span> <span class=\"o\">=</span> <span class=\"n\">Package</span><span class=\"o\">.</span><span class=\"n\">from_string</span><span class=\"p\">(</span><span class=\"s2\">&quot;local:&quot;</span> <span class=\"o\">+</span> <span class=\"n\">sync_package_on_close</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rsync</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s2\">&quot;~/</span><span class=\"si\">{</span><span class=\"n\">pkg</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">dest</span><span class=\"o\">=</span><span class=\"n\">pkg</span><span class=\"o\">.</span><span class=\"n\">local_path</span><span class=\"p\">,</span> <span class=\"n\">up</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">persist</span><span class=\"p\">:</span>\n                <span class=\"n\">tunnel</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n                <span class=\"n\">kill_jupyter_cmd</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;jupyter notebook stop </span><span class=\"si\">{</span><span class=\"n\">port_fwd</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">commands</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">kill_jupyter_cmd</span><span class=\"p\">])</span></div>\n\n<div class=\"viewcode-block\" id=\"Cluster.remove_conda_env\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.remove_conda_env\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">remove_conda_env</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"s2\">&quot;CondaEnv&quot;</span><span class=\"p\">],</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Remove conda env from the cluster.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; rh.ondemand_cluster(&quot;rh-cpu&quot;).remove_conda_env(&quot;my_conda_env&quot;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">env_name</span> <span class=\"o\">=</span> <span class=\"n\">env</span> <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">env_name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">([</span><span class=\"sa\">f</span><span class=\"s2\">&quot;conda env remove -n </span><span class=\"si\">{</span><span class=\"n\">env_name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">])</span></div></div>\n</pre></div>", "current_page_name": "_modules/runhouse/resources/hardware/cluster", "sidebars": ["about.html", "navigation.html", "relations.html", "searchbox.html", "donate.html"], "customsidebar": null, "alabaster_version": "0.7.13"}