{"parents": [{"link": "../../../../", "title": "Module code"}], "title": "runhouse.resources.hardware.cluster", "body": "<h1>Source code for runhouse.resources.hardware.cluster</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">contextlib</span>\n<span class=\"kn\">import</span> <span class=\"nn\">copy</span>\n<span class=\"kn\">import</span> <span class=\"nn\">importlib</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">re</span>\n<span class=\"kn\">import</span> <span class=\"nn\">subprocess</span>\n<span class=\"kn\">import</span> <span class=\"nn\">threading</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">warnings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">,</span> <span class=\"n\">Union</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">yaml</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.rns.utils.api</span> <span class=\"kn\">import</span> <span class=\"n\">ResourceAccess</span><span class=\"p\">,</span> <span class=\"n\">ResourceVisibility</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.servers.http.certs</span> <span class=\"kn\">import</span> <span class=\"n\">TLSCertConfig</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.utils</span> <span class=\"kn\">import</span> <span class=\"n\">locate_working_dir</span><span class=\"p\">,</span> <span class=\"n\">run_command_with_password_login</span>\n\n<span class=\"c1\"># Filter out DeprecationWarnings</span>\n<span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">filterwarnings</span><span class=\"p\">(</span><span class=\"s2\">&quot;ignore&quot;</span><span class=\"p\">,</span> <span class=\"n\">category</span><span class=\"o\">=</span><span class=\"ne\">DeprecationWarning</span><span class=\"p\">)</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">requests.exceptions</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.constants</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">CLI_RESTART_CMD</span><span class=\"p\">,</span>\n    <span class=\"n\">CLI_STOP_CMD</span><span class=\"p\">,</span>\n    <span class=\"n\">CLUSTER_CONFIG_PATH</span><span class=\"p\">,</span>\n    <span class=\"n\">DEFAULT_HTTP_PORT</span><span class=\"p\">,</span>\n    <span class=\"n\">DEFAULT_HTTPS_PORT</span><span class=\"p\">,</span>\n    <span class=\"n\">DEFAULT_LOG_LEVEL</span><span class=\"p\">,</span>\n    <span class=\"n\">DEFAULT_RAY_PORT</span><span class=\"p\">,</span>\n    <span class=\"n\">DEFAULT_SERVER_PORT</span><span class=\"p\">,</span>\n    <span class=\"n\">DEFAULT_STATUS_CHECK_INTERVAL</span><span class=\"p\">,</span>\n    <span class=\"n\">EMPTY_DEFAULT_ENV_NAME</span><span class=\"p\">,</span>\n    <span class=\"n\">LOCALHOST</span><span class=\"p\">,</span>\n    <span class=\"n\">RESERVED_SYSTEM_NAMES</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.globals</span> <span class=\"kn\">import</span> <span class=\"n\">obj_store</span><span class=\"p\">,</span> <span class=\"n\">rns_client</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.logger</span> <span class=\"kn\">import</span> <span class=\"n\">logger</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.envs.utils</span> <span class=\"kn\">import</span> <span class=\"n\">_get_env_from</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.hardware.utils</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">_current_cluster</span><span class=\"p\">,</span>\n    <span class=\"n\">_unnamed_default_env_name</span><span class=\"p\">,</span>\n    <span class=\"n\">ServerConnectionType</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.resource</span> <span class=\"kn\">import</span> <span class=\"n\">Resource</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.servers.http</span> <span class=\"kn\">import</span> <span class=\"n\">HTTPClient</span>\n\n\n<div class=\"viewcode-block\" id=\"Cluster\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Cluster</span><span class=\"p\">(</span><span class=\"n\">Resource</span><span class=\"p\">):</span>\n    <span class=\"n\">RESOURCE_TYPE</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;cluster&quot;</span>\n    <span class=\"n\">REQUEST_TIMEOUT</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>  <span class=\"c1\"># seconds</span>\n\n    <span class=\"n\">DEFAULT_SSH_PORT</span> <span class=\"o\">=</span> <span class=\"mi\">22</span>\n    <span class=\"n\">EMPTY_DEFAULT_ENV_NAME</span> <span class=\"o\">=</span> <span class=\"n\">EMPTY_DEFAULT_ENV_NAME</span>\n\n<div class=\"viewcode-block\" id=\"Cluster.__init__\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.__init__\">[docs]</a>    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"c1\"># Name will almost always be provided unless a &quot;local&quot; cluster is created</span>\n        <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">ips</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">creds</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Secret&quot;</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">default_env</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Env&quot;</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">server_host</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">server_port</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">ssh_port</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">client_port</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">server_connection_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">ssl_keyfile</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">ssl_certfile</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">domain</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">den_auth</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>  <span class=\"c1\"># We have this here to ignore extra arguments when calling from from_config</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        The Runhouse cluster, or system. This is where you can run Functions or access/transfer data</span>\n<span class=\"sd\">        between. You can BYO (bring-your-own) cluster by providing cluster IP and ssh_creds, or</span>\n<span class=\"sd\">        this can be an on-demand cluster that is spun up/down through</span>\n<span class=\"sd\">        `SkyPilot &lt;https://github.com/skypilot-org/skypilot&gt;`_, using your cloud credentials.</span>\n\n<span class=\"sd\">        .. note::</span>\n<span class=\"sd\">            To build a cluster, please use the factory method :func:`cluster`.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rpc_tunnel</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_creds</span> <span class=\"o\">=</span> <span class=\"n\">creds</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ips</span> <span class=\"o\">=</span> <span class=\"n\">ips</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_http_client</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">den_auth</span> <span class=\"o\">=</span> <span class=\"n\">den_auth</span> <span class=\"ow\">or</span> <span class=\"kc\">False</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cert_config</span> <span class=\"o\">=</span> <span class=\"n\">TLSCertConfig</span><span class=\"p\">(</span><span class=\"n\">cert_path</span><span class=\"o\">=</span><span class=\"n\">ssl_certfile</span><span class=\"p\">,</span> <span class=\"n\">key_path</span><span class=\"o\">=</span><span class=\"n\">ssl_keyfile</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ssl_certfile</span> <span class=\"o\">=</span> <span class=\"n\">ssl_certfile</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ssl_keyfile</span> <span class=\"o\">=</span> <span class=\"n\">ssl_keyfile</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_connection_type</span> <span class=\"o\">=</span> <span class=\"n\">server_connection_type</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_port</span> <span class=\"o\">=</span> <span class=\"n\">server_port</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client_port</span> <span class=\"o\">=</span> <span class=\"n\">client_port</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ssh_port</span> <span class=\"o\">=</span> <span class=\"n\">ssh_port</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_SSH_PORT</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_host</span> <span class=\"o\">=</span> <span class=\"n\">server_host</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">domain</span> <span class=\"o\">=</span> <span class=\"n\">domain</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_default_env</span> <span class=\"o\">=</span> <span class=\"n\">_get_env_from</span><span class=\"p\">(</span><span class=\"n\">default_env</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_default_env</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_default_env</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_default_env</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">_unnamed_default_env_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span></div>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">address</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ips</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ips</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"kc\">None</span>\n\n    <span class=\"nd\">@address</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">address</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">addr</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ips</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ips</span> <span class=\"ow\">or</span> <span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ips</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">addr</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">client</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_http_client</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;No address set for cluster &lt;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">&gt;. Is it up?&quot;</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">connect_server_client</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_http_client</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">creds_values</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Dict</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_creds</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">{}</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_creds</span><span class=\"o\">.</span><span class=\"n\">values</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">docker_user</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">default_env</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.envs</span> <span class=\"kn\">import</span> <span class=\"n\">Env</span>\n\n        <span class=\"k\">return</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_default_env</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_default_env</span> <span class=\"k\">else</span> <span class=\"n\">Env</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">EMPTY_DEFAULT_ENV_NAME</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"nd\">@default_env</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">default_env</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_default_env</span> <span class=\"o\">=</span> <span class=\"n\">_get_env_from</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_default_env</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_default_env</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">_unnamed_default_env_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_up</span><span class=\"p\">():</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">check_server</span><span class=\"p\">()</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_default_env</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">save_config_to_cluster</span><span class=\"p\">()</span>\n\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;The cluster default env has been updated. &quot;</span>\n                <span class=\"s2\">&quot;Run `cluster.restart_server()` to restart the Runhouse server on the new default env.&quot;</span>\n            <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">save_config_to_cluster</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">(</span><span class=\"n\">condensed</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># popping creds, because we don&#39;t want the secret reds will be saved on the cluster.</span>\n        <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;creds&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">json_config</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;mkdir -p ~/.rh; touch </span><span class=\"si\">{</span><span class=\"n\">CLUSTER_CONFIG_PATH</span><span class=\"si\">}</span><span class=\"s2\">; echo &#39;</span><span class=\"si\">{</span><span class=\"n\">json_config</span><span class=\"si\">}</span><span class=\"s2\">&#39; &gt; </span><span class=\"si\">{</span><span class=\"n\">CLUSTER_CONFIG_PATH</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n            <span class=\"p\">],</span>\n            <span class=\"n\">node</span><span class=\"o\">=</span><span class=\"n\">node</span> <span class=\"ow\">or</span> <span class=\"s2\">&quot;all&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"Cluster.save\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.save\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">overwrite</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Overrides the default resource save() method in order to also update</span>\n<span class=\"sd\">        the cluster config on the cluster itself.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">on_this_cluster</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Save the cluster sub-resources (ex: ssh creds) using the top level folder of the cluster if the the rns</span>\n        <span class=\"c1\"># address has been set, otherwise use the user&#39;s current folder (set in local .rh config)</span>\n        <span class=\"n\">base_folder</span> <span class=\"o\">=</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">base_folder</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rns_address</span><span class=\"p\">)</span>\n        <span class=\"n\">folder</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"n\">folder</span> <span class=\"ow\">or</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;/</span><span class=\"si\">{</span><span class=\"n\">base_folder</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span> <span class=\"k\">if</span> <span class=\"n\">base_folder</span> <span class=\"k\">else</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">current_folder</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">overwrite</span><span class=\"o\">=</span><span class=\"n\">overwrite</span><span class=\"p\">,</span> <span class=\"n\">folder</span><span class=\"o\">=</span><span class=\"n\">folder</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Running save will have updated the cluster&#39;s</span>\n        <span class=\"c1\"># RNS address. We need to update the name</span>\n        <span class=\"c1\"># used in the config on the cluster so that</span>\n        <span class=\"c1\"># self.on_this_cluster() will still work as expected.</span>\n        <span class=\"k\">if</span> <span class=\"n\">on_this_cluster</span><span class=\"p\">:</span>\n            <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">set_cluster_config_value</span><span class=\"p\">(</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rns_address</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_http_client</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">set_cluster_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rns_address</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">self</span></div>\n\n<div class=\"viewcode-block\" id=\"Cluster.delete_configs\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.delete_configs\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">delete_configs</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_creds</span><span class=\"p\">:</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;Attempting to delete creds associated with cluster </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">delete_configs</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_creds</span><span class=\"p\">)</span>\n\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">delete_configs</span><span class=\"p\">()</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_save_sub_resources</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.envs</span> <span class=\"kn\">import</span> <span class=\"n\">Env</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.secrets</span> <span class=\"kn\">import</span> <span class=\"n\">Secret</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_creds</span> <span class=\"ow\">and</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_creds</span><span class=\"p\">,</span> <span class=\"n\">Secret</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_creds</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">folder</span><span class=\"o\">=</span><span class=\"n\">folder</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_default_env</span> <span class=\"ow\">and</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_default_env</span><span class=\"p\">,</span> <span class=\"n\">Env</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_default_env</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_default_env</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">_unnamed_default_env_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_default_env</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">folder</span><span class=\"o\">=</span><span class=\"n\">folder</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_config</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">_resolve_children</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"n\">resource_subtype</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;resource_subtype&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">_resolve_children</span><span class=\"p\">:</span>\n            <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">_check_for_child_configs</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">resource_subtype</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Cluster&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">Cluster</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">resource_subtype</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;OnDemandCluster&quot;</span><span class=\"p\">:</span>\n            <span class=\"kn\">from</span> <span class=\"nn\">.on_demand_cluster</span> <span class=\"kn\">import</span> <span class=\"n\">OnDemandCluster</span>\n\n            <span class=\"k\">return</span> <span class=\"n\">OnDemandCluster</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">resource_subtype</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;SageMakerCluster&quot;</span><span class=\"p\">:</span>\n            <span class=\"kn\">from</span> <span class=\"nn\">.sagemaker.sagemaker_cluster</span> <span class=\"kn\">import</span> <span class=\"n\">SageMakerCluster</span>\n\n            <span class=\"k\">return</span> <span class=\"n\">SageMakerCluster</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Unknown cluster type </span><span class=\"si\">{</span><span class=\"n\">resource_subtype</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">config</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">condensed</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">(</span><span class=\"n\">condensed</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">save_attrs_to_config</span><span class=\"p\">(</span>\n            <span class=\"n\">config</span><span class=\"p\">,</span>\n            <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;ips&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;server_port&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;server_host&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;server_connection_type&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;domain&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;den_auth&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;ssh_port&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;client_port&quot;</span><span class=\"p\">,</span>\n            <span class=\"p\">],</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">creds</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_resource_string_for_subconfig</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_creds</span><span class=\"p\">,</span> <span class=\"n\">condensed</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># user A shares cluster with user B, with &quot;write&quot; permissions. If user B will save the cluster to Den, we</span>\n        <span class=\"c1\"># would NOT like that the loaded secret will overwrite the original secret that was created and shared by</span>\n        <span class=\"c1\"># user A.</span>\n        <span class=\"k\">if</span> <span class=\"n\">creds</span> <span class=\"ow\">and</span> <span class=\"s2\">&quot;loaded_secret_&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">creds</span><span class=\"p\">:</span>\n            <span class=\"n\">creds</span> <span class=\"o\">=</span> <span class=\"n\">creds</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;loaded_secret_&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;creds&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">creds</span>\n        <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;api_server_url&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">api_server_url</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_default_env</span><span class=\"p\">:</span>\n            <span class=\"n\">default_env</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_resource_string_for_subconfig</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_default_env</span><span class=\"p\">,</span> <span class=\"n\">condensed</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;default_env&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">default_env</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_use_custom_certs</span><span class=\"p\">:</span>\n            <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;ssl_certfile&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cert_config</span><span class=\"o\">.</span><span class=\"n\">cert_path</span>\n            <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;ssl_keyfile&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cert_config</span><span class=\"o\">.</span><span class=\"n\">key_path</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">config</span>\n\n<div class=\"viewcode-block\" id=\"Cluster.endpoint\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.endpoint\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">endpoint</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">external</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Endpoint for the cluster&#39;s Daemon server. If external is True, will only return the external url,</span>\n<span class=\"sd\">        and will return None otherwise (e.g. if a tunnel is required). If external is False, will either return</span>\n<span class=\"sd\">        the external url if it exists, or will set up the connection (based on connection_type) and return</span>\n<span class=\"sd\">        the internal url (including the local connected port rather than the sever port). If cluster is not up,</span>\n<span class=\"sd\">        returns None.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">()):</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n        <span class=\"n\">client_port</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client_port</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_port</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_connection_type</span> <span class=\"ow\">in</span> <span class=\"p\">[</span>\n            <span class=\"n\">ServerConnectionType</span><span class=\"o\">.</span><span class=\"n\">NONE</span><span class=\"p\">,</span>\n            <span class=\"n\">ServerConnectionType</span><span class=\"o\">.</span><span class=\"n\">TLS</span><span class=\"p\">,</span>\n        <span class=\"p\">]:</span>\n            <span class=\"n\">url_base</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                <span class=\"s2\">&quot;https&quot;</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_connection_type</span> <span class=\"o\">==</span> <span class=\"n\">ServerConnectionType</span><span class=\"o\">.</span><span class=\"n\">TLS</span>\n                <span class=\"k\">else</span> <span class=\"s2\">&quot;http&quot;</span>\n            <span class=\"p\">)</span>\n\n            <span class=\"c1\"># Client port gets set to the server port if it was not set.</span>\n            <span class=\"c1\"># In the case of local, testing clusters, the client port will be set to something else</span>\n            <span class=\"c1\"># since we need to port forward in order to hit localhost.</span>\n            <span class=\"k\">if</span> <span class=\"n\">client_port</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">DEFAULT_HTTP_PORT</span><span class=\"p\">,</span> <span class=\"n\">DEFAULT_HTTPS_PORT</span><span class=\"p\">]:</span>\n                <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">url_base</span><span class=\"si\">}</span><span class=\"s2\">://</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_address</span><span class=\"si\">}</span><span class=\"s2\">:</span><span class=\"si\">{</span><span class=\"n\">client_port</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">url_base</span><span class=\"si\">}</span><span class=\"s2\">://</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_address</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">external</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_connection_type</span> <span class=\"ow\">in</span> <span class=\"p\">[</span>\n            <span class=\"n\">ServerConnectionType</span><span class=\"o\">.</span><span class=\"n\">SSH</span><span class=\"p\">,</span>\n            <span class=\"n\">ServerConnectionType</span><span class=\"o\">.</span><span class=\"n\">AWS_SSM</span><span class=\"p\">,</span>\n        <span class=\"p\">]:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">check_server</span><span class=\"p\">()</span>\n            <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;http://</span><span class=\"si\">{</span><span class=\"n\">LOCALHOST</span><span class=\"si\">}</span><span class=\"s2\">:</span><span class=\"si\">{</span><span class=\"n\">client_port</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_client</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">restart_server</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">():</span>\n            <span class=\"c1\"># Previously (before calling within the same cluster worked) returned None</span>\n            <span class=\"k\">return</span> <span class=\"n\">obj_store</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_http_client</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">check_server</span><span class=\"p\">(</span><span class=\"n\">restart_server</span><span class=\"o\">=</span><span class=\"n\">restart_server</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">server_address</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Address to use in the requests made to the cluster. If creating an SSH tunnel with the cluster,</span>\n<span class=\"sd\">        ths will be set to localhost, otherwise will use the cluster&#39;s domain (if provided), or its</span>\n<span class=\"sd\">        public IP address.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">domain</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">domain</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_host</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">LOCALHOST</span><span class=\"p\">,</span> <span class=\"s2\">&quot;localhost&quot;</span><span class=\"p\">]:</span>\n            <span class=\"k\">return</span> <span class=\"n\">LOCALHOST</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_shared</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">runhouse</span> <span class=\"kn\">import</span> <span class=\"n\">Secret</span>\n\n        <span class=\"n\">ssh_creds</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">creds_values</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">ssh_creds</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n        <span class=\"n\">ssh_private_key</span> <span class=\"o\">=</span> <span class=\"n\">ssh_creds</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;ssh_private_key&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">ssh_private_key_path</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">ssh_private_key</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">expanduser</span><span class=\"p\">()</span>\n        <span class=\"n\">secrets_base_dir</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">Secret</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_DIR</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">expanduser</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Check if the key path is saved down in the local .rh directory, which we only do for shared credentials</span>\n        <span class=\"k\">if</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ssh_private_key_path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">secrets_base_dir</span><span class=\"p\">)):</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n        <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_creds</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">/&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">ssh_creds</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;ssh_private_key&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"Cluster.is_up\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.is_up\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">is_up</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Check if the cluster is up.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; rh.cluster(&quot;rh-cpu&quot;).is_up()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">()</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span></div>\n\n<div class=\"viewcode-block\" id=\"Cluster.up_if_not\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.up_if_not\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">up_if_not</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Bring up the cluster if it is not up. No-op if cluster is already up.</span>\n<span class=\"sd\">        This only applies to on-demand clusters, and has no effect on self-managed clusters.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; rh.cluster(&quot;rh-cpu&quot;).up_if_not()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_up</span><span class=\"p\">():</span>\n            <span class=\"c1\"># Don&#39;t store stale IPs</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ips</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">up</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">up</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span>\n            <span class=\"sa\">f</span><span class=\"s2\">&quot;Cluster &lt;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">&gt; does not have an up method. It must be brought up manually.&quot;</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">keep_warm</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n            <span class=\"sa\">f</span><span class=\"s2\">&quot;cluster.keep_warm will have no effect on self-managed cluster </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">.&quot;</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_sync_default_env_to_cluster</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Install and set up the default env requirements on the cluster. This does not put the env resource</span>\n<span class=\"sd\">        on the cluster or initialize the servlet. It also does not set any env vars.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_default_env</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Syncing default env </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_default_env</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\"> to cluster&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_default_env</span><span class=\"o\">.</span><span class=\"n\">install</span><span class=\"p\">(</span><span class=\"n\">cluster</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_sync_runhouse_to_cluster</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">_install_url</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;No address set for cluster &lt;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">&gt;. Is it up?&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">env</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">default_env</span>\n\n        <span class=\"n\">local_rh_package_path</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">importlib</span><span class=\"o\">.</span><span class=\"n\">util</span><span class=\"o\">.</span><span class=\"n\">find_spec</span><span class=\"p\">(</span><span class=\"s2\">&quot;runhouse&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">origin</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">parent</span>\n\n        <span class=\"c1\"># Check if runhouse is installed from source and has setup.py</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"ow\">not</span> <span class=\"n\">_install_url</span>\n            <span class=\"ow\">and</span> <span class=\"n\">local_rh_package_path</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;runhouse&quot;</span>\n            <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"n\">local_rh_package_path</span><span class=\"o\">.</span><span class=\"n\">parent</span> <span class=\"o\">/</span> <span class=\"s2\">&quot;setup.py&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">()</span>\n        <span class=\"p\">):</span>\n            <span class=\"c1\"># Package is installed in editable mode</span>\n            <span class=\"n\">local_rh_package_path</span> <span class=\"o\">=</span> <span class=\"n\">local_rh_package_path</span><span class=\"o\">.</span><span class=\"n\">parent</span>\n            <span class=\"n\">dest_path</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;~/</span><span class=\"si\">{</span><span class=\"n\">local_rh_package_path</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rsync</span><span class=\"p\">(</span>\n                <span class=\"n\">source</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">local_rh_package_path</span><span class=\"p\">),</span>\n                <span class=\"n\">dest</span><span class=\"o\">=</span><span class=\"n\">dest_path</span><span class=\"p\">,</span>\n                <span class=\"n\">node</span><span class=\"o\">=</span><span class=\"s2\">&quot;all&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">up</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"n\">contents</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"n\">filter_options</span><span class=\"o\">=</span><span class=\"s2\">&quot;- docs/&quot;</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">rh_install_cmd</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;python3 -m pip install ./runhouse&quot;</span>\n        <span class=\"c1\"># elif local_rh_package_path.parent.name == &#39;site-packages&#39;:</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Package is installed in site-packages</span>\n            <span class=\"c1\"># status_codes = self.run([&#39;pip install runhouse-nightly==0.0.2.20221202&#39;], stream_logs=True)</span>\n            <span class=\"c1\"># rh_package = &#39;runhouse_nightly-0.0.1.dev20221202-py3-none-any.whl&#39;</span>\n            <span class=\"c1\"># rh_download_cmd = f&#39;curl https://runhouse-package.s3.amazonaws.com/{rh_package} --output {rh_package}&#39;</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">_install_url</span><span class=\"p\">:</span>\n                <span class=\"kn\">import</span> <span class=\"nn\">runhouse</span>\n\n                <span class=\"n\">_install_url</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;runhouse==</span><span class=\"si\">{</span><span class=\"n\">runhouse</span><span class=\"o\">.</span><span class=\"n\">__version__</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n            <span class=\"n\">rh_install_cmd</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;python3 -m pip install </span><span class=\"si\">{</span><span class=\"n\">_install_url</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">node</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ips</span><span class=\"p\">:</span>\n            <span class=\"n\">status_codes</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span>\n                <span class=\"p\">[</span><span class=\"n\">rh_install_cmd</span><span class=\"p\">],</span>\n                <span class=\"n\">node</span><span class=\"o\">=</span><span class=\"n\">node</span><span class=\"p\">,</span>\n                <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"n\">env</span><span class=\"p\">,</span>\n                <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">status_codes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;Error installing runhouse on cluster &lt;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">&gt; node &lt;</span><span class=\"si\">{</span><span class=\"n\">node</span><span class=\"si\">}</span><span class=\"s2\">&gt;&quot;</span>\n                <span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"Cluster.install_packages\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.install_packages\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">install_packages</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">reqs</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"s2\">&quot;Package&quot;</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]],</span> <span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"s2\">&quot;Env&quot;</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Install the given packages on the cluster.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            reqs (List[Package or str): List of packages to install on cluster and env</span>\n<span class=\"sd\">            env (Env or str): Environment to install package on. If left empty, defaults to base environment.</span>\n<span class=\"sd\">                (Default: ``None``)</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; cluster.install_packages(reqs=[&quot;accelerate&quot;, &quot;diffusers&quot;])</span>\n<span class=\"sd\">            &gt;&gt;&gt; cluster.install_packages(reqs=[&quot;accelerate&quot;, &quot;diffusers&quot;], env=&quot;my_conda_env&quot;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">check_server</span><span class=\"p\">()</span>\n        <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">_get_env_from</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">env</span> <span class=\"k\">else</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">default_env</span>\n        <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">reqs</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">_reqs</span> <span class=\"o\">+</span> <span class=\"n\">reqs</span>\n        <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Cluster.get\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.get\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"n\">Any</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">remote</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Get the result for a given key from the cluster&#39;s object store. To raise an error if the key is not found,</span>\n<span class=\"sd\">        use `cluster.get(key, default=KeyError)`.&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">check_server</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">default</span><span class=\"p\">,</span> <span class=\"n\">remote</span><span class=\"o\">=</span><span class=\"n\">remote</span><span class=\"p\">)</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span>\n                <span class=\"n\">key</span><span class=\"p\">,</span>\n                <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">default</span><span class=\"p\">,</span>\n                <span class=\"n\">remote</span><span class=\"o\">=</span><span class=\"n\">remote</span><span class=\"p\">,</span>\n                <span class=\"n\">system</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">KeyError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">default</span> <span class=\"o\">==</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"n\">e</span>\n            <span class=\"k\">return</span> <span class=\"n\">default</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span></div>\n\n    <span class=\"c1\"># TODO deprecate</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">run_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">folder_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">check_server</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">run_name</span><span class=\"p\">,</span> <span class=\"n\">remote</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">provenance</span>\n\n    <span class=\"c1\"># TODO This should accept an env (for env var secrets and docker envs).</span>\n<div class=\"viewcode-block\" id=\"Cluster.add_secrets\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.add_secrets\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">add_secrets</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">provider_secrets</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span> <span class=\"ow\">or</span> <span class=\"s2\">&quot;Secret&quot;</span><span class=\"p\">],</span> <span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Env&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Copy secrets from current environment onto the cluster&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">check_server</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sync_secrets</span><span class=\"p\">(</span><span class=\"n\">provider_secrets</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"n\">env</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">default_env</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Cluster.put\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.put\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">put</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">:</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Put the given object on the cluster&#39;s object store at the given key.&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">check_server</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"n\">env</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">put_object</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"n\">env</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">default_env</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Cluster.put_resource\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.put_resource\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">put_resource</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">resource</span><span class=\"p\">:</span> <span class=\"n\">Resource</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">Dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"kc\">None</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Put the given resource on the cluster&#39;s object store. Returns the key (important if name is not set).&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">check_server</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"n\">RESOURCE_TYPE</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;env&quot;</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">default_env</span><span class=\"o\">.</span><span class=\"n\">name</span>\n\n        <span class=\"c1\"># Logic to get env_name from different ways env can be provided</span>\n        <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">env</span> <span class=\"ow\">or</span> <span class=\"p\">(</span>\n            <span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"n\">env</span>\n            <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">resource</span><span class=\"p\">,</span> <span class=\"s2\">&quot;env&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span> <span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"ow\">or</span> <span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"n\">env_name</span>\n            <span class=\"k\">if</span> <span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"n\">RESOURCE_TYPE</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;env&quot;</span>\n            <span class=\"k\">else</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">default_env</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"n\">RESOURCE_TYPE</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;env&quot;</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">default_env</span><span class=\"o\">.</span><span class=\"n\">name</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">env</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">_get_env_from</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">)</span>\n            <span class=\"n\">env_name</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">default_env</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">env_name</span> <span class=\"o\">=</span> <span class=\"n\">env</span>\n\n        <span class=\"c1\"># Env name could somehow be a full length `username/base_env`, trim it down to just the env name</span>\n        <span class=\"k\">if</span> <span class=\"n\">env_name</span><span class=\"p\">:</span>\n            <span class=\"n\">env_name</span> <span class=\"o\">=</span> <span class=\"n\">env_name</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;/&quot;</span><span class=\"p\">)[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n        <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">state</span> <span class=\"ow\">or</span> <span class=\"p\">{}</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">():</span>\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">(</span><span class=\"n\">condensed</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">),</span> <span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">put_resource</span><span class=\"p\">(</span><span class=\"n\">serialized_data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">env_name</span><span class=\"o\">=</span><span class=\"n\">env_name</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">put_resource</span><span class=\"p\">(</span>\n            <span class=\"n\">resource</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"o\">=</span><span class=\"n\">state</span> <span class=\"ow\">or</span> <span class=\"p\">{},</span> <span class=\"n\">env_name</span><span class=\"o\">=</span><span class=\"n\">env_name</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span>\n        <span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Cluster.rename\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.rename\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">rename</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">old_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">new_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Rename a key in the cluster&#39;s object store.&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">check_server</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">rename</span><span class=\"p\">(</span><span class=\"n\">old_key</span><span class=\"p\">,</span> <span class=\"n\">new_key</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">rename_object</span><span class=\"p\">(</span><span class=\"n\">old_key</span><span class=\"p\">,</span> <span class=\"n\">new_key</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Cluster.keys\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.keys\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">keys</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;List all keys in the cluster&#39;s object store.&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">check_server</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span>\n        <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"o\">=</span><span class=\"n\">env</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span></div>\n\n<div class=\"viewcode-block\" id=\"Cluster.delete\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.delete\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">delete</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">keys</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Delete the given items from the cluster&#39;s object store. To delete all items, use `cluster.clear()`&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">check_server</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">keys</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">keys</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">keys</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">keys</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">keys</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Cluster.clear\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.clear\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">clear</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Clear the cluster&#39;s object store.&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">check_server</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span></div>\n\n<div class=\"viewcode-block\" id=\"Cluster.on_this_cluster\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.on_this_cluster\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">on_this_cluster</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Whether this function is being called on the same cluster.&quot;&quot;&quot;</span>\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">_current_cluster</span><span class=\"p\">(</span><span class=\"s2\">&quot;config&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">config</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rns_address</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"p\">)</span></div>\n\n    <span class=\"c1\"># ----------------- RPC Methods ----------------- #</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">connect_tunnel</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">force_reconnect</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rpc_tunnel</span> <span class=\"ow\">and</span> <span class=\"n\">force_reconnect</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rpc_tunnel</span><span class=\"o\">.</span><span class=\"n\">terminate</span><span class=\"p\">()</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rpc_tunnel</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rpc_tunnel</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rpc_tunnel</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ssh_tunnel</span><span class=\"p\">(</span>\n                <span class=\"n\">local_port</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_port</span><span class=\"p\">,</span>\n                <span class=\"n\">remote_port</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_port</span><span class=\"p\">,</span>\n                <span class=\"n\">num_ports_to_try</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">connect_server_client</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">force_reconnect</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;No address set for cluster &lt;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">&gt;. Is it up?&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_connection_type</span> <span class=\"ow\">in</span> <span class=\"p\">[</span>\n            <span class=\"n\">ServerConnectionType</span><span class=\"o\">.</span><span class=\"n\">SSH</span><span class=\"p\">,</span>\n            <span class=\"n\">ServerConnectionType</span><span class=\"o\">.</span><span class=\"n\">AWS_SSM</span><span class=\"p\">,</span>\n        <span class=\"p\">]:</span>\n            <span class=\"c1\"># For a password cluster, the &#39;ssh_tunnel&#39; command assumes a Control Master is already set up with</span>\n            <span class=\"c1\"># an authenticated password.</span>\n            <span class=\"c1\"># TODO: I wonder if this authentication ever goes dry, and our SSH tunnel would need to be</span>\n            <span class=\"c1\"># re-established, would require a password, and then fail. We should really figure out how to</span>\n            <span class=\"c1\"># authenticate with a password in the SSH tunnel command. But, this is a fine hack for now.</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">creds_values</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;password&quot;</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_run_commands_with_ssh</span><span class=\"p\">([</span><span class=\"s2\">&quot;echo &#39;Initiating password connection.&#39;&quot;</span><span class=\"p\">])</span>\n\n            <span class=\"c1\"># Case 1: Server connection requires SSH tunnel</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">connect_tunnel</span><span class=\"p\">(</span><span class=\"n\">force_reconnect</span><span class=\"o\">=</span><span class=\"n\">force_reconnect</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client_port</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rpc_tunnel</span><span class=\"o\">.</span><span class=\"n\">local_bind_port</span>\n\n            <span class=\"c1\"># Connecting to localhost because it&#39;s tunneled into the server at the specified port.</span>\n            <span class=\"c1\"># As long as the tunnel was initialized,</span>\n            <span class=\"c1\"># self.client_port has been set to the correct port</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_http_client</span> <span class=\"o\">=</span> <span class=\"n\">HTTPClient</span><span class=\"p\">(</span>\n                <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"n\">LOCALHOST</span><span class=\"p\">,</span>\n                <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client_port</span><span class=\"p\">,</span>\n                <span class=\"n\">resource_address</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rns_address</span><span class=\"p\">,</span>\n                <span class=\"n\">system</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Case 2: We&#39;re making a direct connection to the server, either via HTTP or HTTPS</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_connection_type</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">[</span>\n                <span class=\"n\">ServerConnectionType</span><span class=\"o\">.</span><span class=\"n\">NONE</span><span class=\"p\">,</span>\n                <span class=\"n\">ServerConnectionType</span><span class=\"o\">.</span><span class=\"n\">TLS</span><span class=\"p\">,</span>\n            <span class=\"p\">]:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;Unknown server connection type </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_connection_type</span><span class=\"si\">}</span><span class=\"s2\">.&quot;</span>\n                <span class=\"p\">)</span>\n\n            <span class=\"n\">cert_path</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_use_https</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">domain</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_use_caddy</span><span class=\"p\">):</span>\n                <span class=\"c1\"># Only use the cert path if HTTPS is enabled and not providing a domain with Caddy</span>\n                <span class=\"n\">cert_path</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cert_config</span><span class=\"o\">.</span><span class=\"n\">cert_path</span>\n\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client_port</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client_port</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_port</span>\n\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_http_client</span> <span class=\"o\">=</span> <span class=\"n\">HTTPClient</span><span class=\"p\">(</span>\n                <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_address</span><span class=\"p\">,</span>\n                <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client_port</span><span class=\"p\">,</span>\n                <span class=\"n\">cert_path</span><span class=\"o\">=</span><span class=\"n\">cert_path</span><span class=\"p\">,</span>\n                <span class=\"n\">use_https</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_use_https</span><span class=\"p\">,</span>\n                <span class=\"n\">resource_address</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rns_address</span><span class=\"p\">,</span>\n                <span class=\"n\">system</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">check_server</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">restart_server</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Checking server </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">check_server</span><span class=\"p\">()</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Server </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\"> is up.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"p\">(</span>\n            <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">exceptions</span><span class=\"o\">.</span><span class=\"n\">ConnectionError</span><span class=\"p\">,</span>\n            <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">exceptions</span><span class=\"o\">.</span><span class=\"n\">ReadTimeout</span><span class=\"p\">,</span>\n            <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">exceptions</span><span class=\"o\">.</span><span class=\"n\">ChunkedEncodingError</span><span class=\"p\">,</span>\n        <span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">restart_server</span><span class=\"p\">:</span>\n                <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;Server </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\"> is up, but the Runhouse API server may not be up.&quot;</span>\n                <span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_http_client</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">restart_server</span><span class=\"p\">()</span>\n                <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span>\n                    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Checking server </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\"> again [</span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"si\">}</span><span class=\"s2\">/5].&quot;</span><span class=\"p\">)</span>\n                    <span class=\"k\">try</span><span class=\"p\">:</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">check_server</span><span class=\"p\">()</span>\n                        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Server </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\"> is up.&quot;</span><span class=\"p\">)</span>\n                        <span class=\"k\">return</span>\n                    <span class=\"k\">except</span> <span class=\"p\">(</span>\n                        <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">exceptions</span><span class=\"o\">.</span><span class=\"n\">ConnectionError</span><span class=\"p\">,</span>\n                        <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">exceptions</span><span class=\"o\">.</span><span class=\"n\">ReadTimeout</span><span class=\"p\">,</span>\n                    <span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">error</span><span class=\"p\">:</span>\n                        <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">5</span><span class=\"p\">:</span>\n                            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">)</span>\n                        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Could not connect to server </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span>\n\n<div class=\"viewcode-block\" id=\"Cluster.status\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.status\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">status</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">resource_address</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Loads the status of the Runhouse daemon running on the cluster.&quot;&quot;&quot;</span>\n        <span class=\"c1\"># Note: If running outside a local cluster need to include a resource address to construct the cluster subtoken</span>\n        <span class=\"c1\"># Allow for specifying a resource address explicitly in case the resource has no rns address yet</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">check_server</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">():</span>\n            <span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">(</span>\n                <span class=\"n\">resource_address</span><span class=\"o\">=</span><span class=\"n\">resource_address</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rns_address</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">status</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">ssh_tunnel</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">local_port</span><span class=\"p\">,</span> <span class=\"n\">remote_port</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">num_ports_to_try</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"s2\">&quot;SkySSHRunner&quot;</span><span class=\"p\">:</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.hardware.sky_ssh_runner</span> <span class=\"kn\">import</span> <span class=\"n\">ssh_tunnel</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">ssh_tunnel</span><span class=\"p\">(</span>\n            <span class=\"n\">address</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"p\">,</span>\n            <span class=\"n\">ssh_creds</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">creds_values</span><span class=\"p\">,</span>\n            <span class=\"n\">docker_user</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">docker_user</span><span class=\"p\">,</span>\n            <span class=\"n\">local_port</span><span class=\"o\">=</span><span class=\"n\">local_port</span><span class=\"p\">,</span>\n            <span class=\"n\">ssh_port</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ssh_port</span><span class=\"p\">,</span>\n            <span class=\"n\">remote_port</span><span class=\"o\">=</span><span class=\"n\">remote_port</span><span class=\"p\">,</span>\n            <span class=\"n\">num_ports_to_try</span><span class=\"o\">=</span><span class=\"n\">num_ports_to_try</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_use_https</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Use HTTPS if server connection type is set to ``tls``&quot;&quot;&quot;</span>\n\n        <span class=\"k\">return</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_connection_type</span> <span class=\"o\">==</span> <span class=\"n\">ServerConnectionType</span><span class=\"o\">.</span><span class=\"n\">TLS</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_connection_type</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n            <span class=\"k\">else</span> <span class=\"kc\">False</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_use_caddy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Use Caddy if the server port is set to the default HTTP (80) or HTTPS (443) port.</span>\n<span class=\"sd\">        Note: Caddy will serve as a reverse proxy, forwarding traffic from the server port to the Runhouse API</span>\n<span class=\"sd\">        server running on port 32300.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_port</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">DEFAULT_HTTP_PORT</span><span class=\"p\">,</span> <span class=\"n\">DEFAULT_HTTPS_PORT</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_use_custom_certs</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Use custom certs when HTTPS is not enabled, or when HTTPS is enabled, Caddy is enabled,</span>\n<span class=\"sd\">        and a domain is provided.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_use_https</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_use_caddy</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">domain</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_start_ray_workers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">ray_port</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">host</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ips</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">host</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"p\">:</span>\n                <span class=\"c1\"># This is the master node, skip</span>\n                <span class=\"k\">continue</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;Starting Ray on worker </span><span class=\"si\">{</span><span class=\"n\">host</span><span class=\"si\">}</span><span class=\"s2\"> with head node at </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"si\">}</span><span class=\"s2\">:</span><span class=\"si\">{</span><span class=\"n\">ray_port</span><span class=\"si\">}</span><span class=\"s2\">.&quot;</span>\n            <span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span>\n                <span class=\"n\">commands</span><span class=\"o\">=</span><span class=\"p\">[</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;ray start --address=</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"si\">}</span><span class=\"s2\">:</span><span class=\"si\">{</span><span class=\"n\">ray_port</span><span class=\"si\">}</span><span class=\"s2\"> --disable-usage-stats&quot;</span><span class=\"p\">,</span>\n                <span class=\"p\">],</span>\n                <span class=\"n\">node</span><span class=\"o\">=</span><span class=\"n\">host</span><span class=\"p\">,</span>\n                <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"n\">env</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_run_cli_commands_on_cluster_helper</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">commands</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">commands</span><span class=\"o\">=</span><span class=\"n\">commands</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_default_env</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_default_env</span><span class=\"p\">:</span>\n                <span class=\"n\">commands</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_default_env</span><span class=\"o\">.</span><span class=\"n\">_full_command</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">cmd</span> <span class=\"ow\">in</span> <span class=\"n\">commands</span><span class=\"p\">]</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_run_commands_with_ssh</span><span class=\"p\">(</span>\n                <span class=\"n\">commands</span><span class=\"o\">=</span><span class=\"n\">commands</span><span class=\"p\">,</span>\n                <span class=\"n\">cmd_prefix</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">env_vars</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_default_env</span><span class=\"o\">.</span><span class=\"n\">env_vars</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_default_env</span> <span class=\"k\">else</span> <span class=\"p\">{},</span>\n                <span class=\"n\">node</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"p\">,</span>\n                <span class=\"n\">require_outputs</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"Cluster.restart_server\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.restart_server\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">restart_server</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">_rh_install_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">resync_rh</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">restart_ray</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">restart_proxy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">logs_level</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Restart the RPC server.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            resync_rh (bool): Whether to resync runhouse. (Default: ``True``)</span>\n<span class=\"sd\">            restart_ray (bool): Whether to restart Ray. (Default: ``True``)</span>\n<span class=\"sd\">            env (str or Env, optional): Specified environment to restart the server on. (Default: ``None``)</span>\n<span class=\"sd\">            restart_proxy (bool): Whether to restart Caddy on the cluster, if configured. (Default: ``False``)</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; rh.cluster(&quot;rh-cpu&quot;).restart_server()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Restarting Runhouse API server on </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">.&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">default_env</span> <span class=\"o\">=</span> <span class=\"n\">_get_env_from</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_default_env</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_default_env</span> <span class=\"k\">else</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"n\">default_env</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_sync_default_env_to_cluster</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">resync_rh</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_sync_runhouse_to_cluster</span><span class=\"p\">(</span><span class=\"n\">_install_url</span><span class=\"o\">=</span><span class=\"n\">_rh_install_url</span><span class=\"p\">)</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">&quot;Finished syncing Runhouse to cluster.&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">https_flag</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_use_https</span>\n        <span class=\"n\">caddy_flag</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_use_caddy</span>\n        <span class=\"n\">domain</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">domain</span>\n\n        <span class=\"n\">cluster_key_path</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">cluster_cert_path</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">https_flag</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Make sure certs are copied to the cluster (where relevant)</span>\n            <span class=\"n\">base_cluster_dir</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cert_config</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_CLUSTER_DIR</span>\n            <span class=\"n\">cluster_key_path</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">base_cluster_dir</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cert_config</span><span class=\"o\">.</span><span class=\"n\">PRIVATE_KEY_NAME</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n            <span class=\"n\">cluster_cert_path</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">base_cluster_dir</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cert_config</span><span class=\"o\">.</span><span class=\"n\">CERT_NAME</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">domain</span> <span class=\"ow\">and</span> <span class=\"n\">caddy_flag</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Certs generated by Caddy are stored in the data directory path on the cluster</span>\n                <span class=\"c1\"># https://caddyserver.com/docs/conventions#data-directory</span>\n\n                <span class=\"c1\"># Reset to None - Caddy will automatically generate certs on the cluster</span>\n                <span class=\"n\">cluster_key_path</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n                <span class=\"n\">cluster_cert_path</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Rebuild on restart to ensure the correct subject name is included in the cert SAN</span>\n                <span class=\"c1\"># Cert subject name needs to match the target (IP address or domain)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cert_config</span><span class=\"o\">.</span><span class=\"n\">generate_certs</span><span class=\"p\">(</span>\n                    <span class=\"n\">address</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"p\">,</span> <span class=\"n\">domain</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">domain</span>\n                <span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_copy_certs_to_cluster</span><span class=\"p\">()</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">caddy_flag</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">domain</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Update pointers to the cert and key files as stored on the cluster for Caddy to use</span>\n                <span class=\"n\">base_caddy_dir</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cert_config</span><span class=\"o\">.</span><span class=\"n\">CADDY_CLUSTER_DIR</span>\n                <span class=\"n\">cluster_key_path</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">base_caddy_dir</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cert_config</span><span class=\"o\">.</span><span class=\"n\">PRIVATE_KEY_NAME</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n                <span class=\"p\">)</span>\n                <span class=\"n\">cluster_cert_path</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">base_caddy_dir</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cert_config</span><span class=\"o\">.</span><span class=\"n\">CERT_NAME</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n\n        <span class=\"c1\"># Update the cluster config on the cluster</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">save_config_to_cluster</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Save a limited version of the local ~/.rh config to the cluster with the user&#39;s hashed token,</span>\n        <span class=\"c1\"># if such does not exist on the cluster</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">token</span><span class=\"p\">:</span>\n            <span class=\"n\">user_config</span> <span class=\"o\">=</span> <span class=\"n\">yaml</span><span class=\"o\">.</span><span class=\"n\">safe_dump</span><span class=\"p\">(</span>\n                <span class=\"p\">{</span>\n                    <span class=\"s2\">&quot;token&quot;</span><span class=\"p\">:</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">cluster_token</span><span class=\"p\">(</span>\n                        <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">token</span><span class=\"p\">,</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">username</span>\n                    <span class=\"p\">),</span>\n                    <span class=\"s2\">&quot;username&quot;</span><span class=\"p\">:</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">username</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;default_folder&quot;</span><span class=\"p\">:</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">default_folder</span><span class=\"p\">,</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_run_cli_commands_on_cluster_helper</span><span class=\"p\">([</span><span class=\"s2\">&quot;[ -f ~/.rh/config.yaml ]&quot;</span><span class=\"p\">])[</span>\n                    <span class=\"mi\">0</span>\n                <span class=\"p\">]</span>\n                <span class=\"o\">==</span> <span class=\"mi\">0</span>\n            <span class=\"p\">):</span>\n                <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">&quot;Did not change config.yaml&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">command</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;echo &#39;</span><span class=\"si\">{</span><span class=\"n\">user_config</span><span class=\"si\">}</span><span class=\"s2\">&#39; &gt; ~/.rh/config.yaml&quot;</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_run_cli_commands_on_cluster_helper</span><span class=\"p\">([</span><span class=\"n\">command</span><span class=\"p\">])</span>\n                <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">&quot;Saved user config to cluster&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">allowed_log_levels</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">_nameToLevel</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">logs_level</span> <span class=\"ow\">or</span> <span class=\"n\">logs_level</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">allowed_log_levels</span><span class=\"p\">:</span>\n            <span class=\"n\">logs_level</span> <span class=\"o\">=</span> <span class=\"n\">DEFAULT_LOG_LEVEL</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Setting cluster log level to: </span><span class=\"si\">{</span><span class=\"n\">logs_level</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">restart_cmd</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"n\">CLI_RESTART_CMD</span>\n            <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"s2\">&quot; --restart-ray&quot;</span> <span class=\"k\">if</span> <span class=\"n\">restart_ray</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n            <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"s2\">&quot; --use-https&quot;</span> <span class=\"k\">if</span> <span class=\"n\">https_flag</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n            <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"s2\">&quot; --use-caddy&quot;</span> <span class=\"k\">if</span> <span class=\"n\">caddy_flag</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n            <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"s2\">&quot; --restart-proxy&quot;</span> <span class=\"k\">if</span> <span class=\"n\">restart_proxy</span> <span class=\"ow\">and</span> <span class=\"n\">caddy_flag</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n            <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot; --ssl-certfile </span><span class=\"si\">{</span><span class=\"n\">cluster_cert_path</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_use_custom_certs</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n            <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot; --ssl-keyfile </span><span class=\"si\">{</span><span class=\"n\">cluster_key_path</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_use_custom_certs</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n            <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot; --domain </span><span class=\"si\">{</span><span class=\"n\">domain</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span> <span class=\"k\">if</span> <span class=\"n\">domain</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n            <span class=\"o\">+</span> <span class=\"sa\">f</span><span class=\"s2\">&quot; --port </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_port</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n            <span class=\"o\">+</span> <span class=\"sa\">f</span><span class=\"s2\">&quot; --api-server-url </span><span class=\"si\">{</span><span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">api_server_url</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n            <span class=\"o\">+</span> <span class=\"sa\">f</span><span class=\"s2\">&quot; --default-env-name </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">default_env</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n            <span class=\"o\">+</span> <span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot; --conda-env </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">default_env</span><span class=\"o\">.</span><span class=\"n\">env_name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">default_env</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;resource_subtype&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;CondaEnv&quot;</span>\n                <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n            <span class=\"p\">)</span>\n            <span class=\"o\">+</span> <span class=\"s2\">&quot; --from-python&quot;</span>\n            <span class=\"o\">+</span> <span class=\"sa\">f</span><span class=\"s2\">&quot; --log-level </span><span class=\"si\">{</span><span class=\"n\">logs_level</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">status_codes</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_run_cli_commands_on_cluster_helper</span><span class=\"p\">(</span><span class=\"n\">commands</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">restart_cmd</span><span class=\"p\">])</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">status_codes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Failed to restart server </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">https_flag</span><span class=\"p\">:</span>\n            <span class=\"n\">rns_address</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rns_address</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">rns_address</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Cluster must have a name in order to enable HTTPS.&quot;</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_http_client</span><span class=\"p\">:</span>\n                <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">&quot;Reconnecting server client. Server restarted with HTTPS.&quot;</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">connect_server_client</span><span class=\"p\">()</span>\n\n            <span class=\"c1\"># Refresh the client params to use HTTPS</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">use_https</span> <span class=\"o\">=</span> <span class=\"n\">https_flag</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">restart_ray</span> <span class=\"ow\">and</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ips</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_start_ray_workers</span><span class=\"p\">(</span><span class=\"n\">DEFAULT_RAY_PORT</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">default_env</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">put_resource</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">default_env</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">default_env</span><span class=\"p\">:</span>\n            <span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.envs.utils</span> <span class=\"kn\">import</span> <span class=\"n\">_process_env_vars</span>\n\n            <span class=\"n\">env_vars</span> <span class=\"o\">=</span> <span class=\"n\">_process_env_vars</span><span class=\"p\">(</span><span class=\"n\">default_env</span><span class=\"o\">.</span><span class=\"n\">env_vars</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">env_vars</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">default_env</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_set_env_vars&quot;</span><span class=\"p\">,</span> <span class=\"n\">env_vars</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">status_codes</span></div>\n\n<div class=\"viewcode-block\" id=\"Cluster.stop_server\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.stop_server\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">stop_server</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">stop_ray</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Env&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Stop the RPC server.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            stop_ray (bool): Whether to stop Ray. (Default: `True`)</span>\n<span class=\"sd\">            env (str or Env, optional): Specified environment to stop the server on. (Default: ``None``)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">cmd</span> <span class=\"o\">=</span> <span class=\"n\">CLI_STOP_CMD</span> <span class=\"k\">if</span> <span class=\"n\">stop_ray</span> <span class=\"k\">else</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">CLI_STOP_CMD</span><span class=\"si\">}</span><span class=\"s2\"> --no-stop-ray&quot;</span>\n\n        <span class=\"n\">status_codes</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">([</span><span class=\"n\">cmd</span><span class=\"p\">],</span> <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"n\">env</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_default_env</span><span class=\"p\">,</span> <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"n\">status_codes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">1</span></div>\n\n<div class=\"viewcode-block\" id=\"Cluster.pause_autostop\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.pause_autostop\">[docs]</a>    <span class=\"nd\">@contextlib</span><span class=\"o\">.</span><span class=\"n\">contextmanager</span>\n    <span class=\"k\">def</span> <span class=\"nf\">pause_autostop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Context manager to temporarily pause autostop. Mainly for OnDemand clusters, for BYO cluster</span>\n<span class=\"sd\">        there is no autostop.&quot;&quot;&quot;</span>\n        <span class=\"k\">pass</span></div>\n\n<div class=\"viewcode-block\" id=\"Cluster.call\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.call\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">call</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">module_name</span><span class=\"p\">,</span>\n        <span class=\"n\">method_name</span><span class=\"p\">,</span>\n        <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span>\n        <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">run_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">remote</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">run_async</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">save</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Call a method on a module that is in the cluster&#39;s object store.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            module_name (str): Name of the module saved on system.</span>\n<span class=\"sd\">            method_name (str): Name of the method.</span>\n<span class=\"sd\">            stream_logs (bool): Whether to stream logs from the method call.</span>\n<span class=\"sd\">            run_name (str): Name for the run.</span>\n<span class=\"sd\">            remote (bool): Return a remote object from the function, rather than the result proper.</span>\n<span class=\"sd\">            run_async (bool): Run the method asynchronously and return an awaitable.</span>\n<span class=\"sd\">            *args: Positional arguments to pass to the method.</span>\n<span class=\"sd\">            **kwargs: Keyword arguments to pass to the method.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; cluster.call(&quot;my_module&quot;, &quot;my_method&quot;, arg1, arg2, kwarg1=kwarg1)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">check_server</span><span class=\"p\">()</span>\n        <span class=\"c1\"># Note: might be single value, might be a generator!</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">():</span>\n            <span class=\"n\">method_to_call</span> <span class=\"o\">=</span> <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">acall</span> <span class=\"k\">if</span> <span class=\"n\">run_async</span> <span class=\"k\">else</span> <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">call</span>\n            <span class=\"k\">return</span> <span class=\"n\">method_to_call</span><span class=\"p\">(</span>\n                <span class=\"n\">module_name</span><span class=\"p\">,</span>\n                <span class=\"n\">method_name</span><span class=\"p\">,</span>\n                <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;args&quot;</span><span class=\"p\">:</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"s2\">&quot;kwargs&quot;</span><span class=\"p\">:</span> <span class=\"n\">kwargs</span><span class=\"p\">},</span>\n                <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"n\">stream_logs</span><span class=\"p\">,</span>\n                <span class=\"n\">run_name</span><span class=\"o\">=</span><span class=\"n\">run_name</span><span class=\"p\">,</span>\n                <span class=\"c1\"># remote=remote,</span>\n                <span class=\"n\">serialization</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"n\">method_to_call</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">acall_module_method</span>\n            <span class=\"k\">if</span> <span class=\"n\">run_async</span>\n            <span class=\"k\">else</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">call_module_method</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">method_to_call</span><span class=\"p\">(</span>\n            <span class=\"n\">module_name</span><span class=\"p\">,</span>\n            <span class=\"n\">method_name</span><span class=\"p\">,</span>\n            <span class=\"n\">resource_address</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rns_address</span><span class=\"p\">,</span>\n            <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"n\">stream_logs</span><span class=\"p\">,</span>\n            <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;args&quot;</span><span class=\"p\">:</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"s2\">&quot;kwargs&quot;</span><span class=\"p\">:</span> <span class=\"n\">kwargs</span><span class=\"p\">},</span>\n            <span class=\"n\">run_name</span><span class=\"o\">=</span><span class=\"n\">run_name</span><span class=\"p\">,</span>\n            <span class=\"n\">remote</span><span class=\"o\">=</span><span class=\"n\">remote</span><span class=\"p\">,</span>\n            <span class=\"n\">save</span><span class=\"o\">=</span><span class=\"n\">save</span><span class=\"p\">,</span>\n            <span class=\"n\">system</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Cluster.is_connected\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.is_connected\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">is_connected</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Whether the RPC tunnel is up.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; connected = cluster.is_connected()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span></div>\n\n<div class=\"viewcode-block\" id=\"Cluster.disconnect\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.disconnect\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">disconnect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Disconnect the RPC tunnel.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; cluster.disconnect()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rpc_tunnel</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rpc_tunnel</span><span class=\"o\">.</span><span class=\"n\">terminate</span><span class=\"p\">()</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__getstate__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Delete non-serializable elements (e.g. thread locks) before pickling.&quot;&quot;&quot;</span>\n        <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n        <span class=\"n\">state</span><span class=\"p\">[</span><span class=\"s2\">&quot;_http_client&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">state</span><span class=\"p\">[</span><span class=\"s2\">&quot;_rpc_tunnel&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">return</span> <span class=\"n\">state</span>\n\n    <span class=\"c1\"># ----------------- SSH Methods ----------------- #</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_rsync</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n        <span class=\"n\">dest</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n        <span class=\"n\">up</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"p\">,</span>\n        <span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">contents</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">filter_options</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">stream_logs</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Sync the contents of the source directory into the destination.</span>\n\n<span class=\"sd\">        .. note:</span>\n<span class=\"sd\">            Ending `source` with a slash will copy the contents of the directory into dest,</span>\n<span class=\"sd\">            while omitting it will copy the directory itself (adding a directory layer).</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># Theoretically we could reuse this logic from SkyPilot which Rsyncs to all nodes in parallel:</span>\n        <span class=\"c1\"># https://github.com/skypilot-org/skypilot/blob/v0.4.1/sky/backends/cloud_vm_ray_backend.py#L3094</span>\n        <span class=\"c1\"># This is an interesting policy... by default we&#39;re syncing to all nodes if the cluster is multinode.</span>\n        <span class=\"c1\"># If we need to change it to be greedier we can.</span>\n        <span class=\"k\">if</span> <span class=\"n\">up</span> <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"n\">node</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;all&quot;</span> <span class=\"ow\">or</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ips</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">node</span><span class=\"p\">)):</span>\n            <span class=\"k\">for</span> <span class=\"n\">node</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ips</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rsync</span><span class=\"p\">(</span>\n                    <span class=\"n\">source</span><span class=\"p\">,</span>\n                    <span class=\"n\">dest</span><span class=\"p\">,</span>\n                    <span class=\"n\">up</span><span class=\"o\">=</span><span class=\"n\">up</span><span class=\"p\">,</span>\n                    <span class=\"n\">node</span><span class=\"o\">=</span><span class=\"n\">node</span><span class=\"p\">,</span>\n                    <span class=\"n\">contents</span><span class=\"o\">=</span><span class=\"n\">contents</span><span class=\"p\">,</span>\n                    <span class=\"n\">filter_options</span><span class=\"o\">=</span><span class=\"n\">filter_options</span><span class=\"p\">,</span>\n                    <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"n\">stream_logs</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">return</span>\n\n        <span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.hardware.sky_ssh_runner</span> <span class=\"kn\">import</span> <span class=\"n\">SkySSHRunner</span><span class=\"p\">,</span> <span class=\"n\">SshMode</span>\n\n        <span class=\"c1\"># If no address provided explicitly use the head node address</span>\n        <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">node</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span>\n        <span class=\"c1\"># FYI, could be useful: https://github.com/gchamon/sysrsync</span>\n        <span class=\"k\">if</span> <span class=\"n\">contents</span><span class=\"p\">:</span>\n            <span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"n\">source</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/&quot;</span> <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;/&quot;</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"n\">source</span>\n            <span class=\"n\">dest</span> <span class=\"o\">=</span> <span class=\"n\">dest</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/&quot;</span> <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">dest</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;/&quot;</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"n\">dest</span>\n\n        <span class=\"c1\"># If we&#39;re already on this cluster (and node, if multinode), this is just a local rsync</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">()</span> <span class=\"ow\">and</span> <span class=\"n\">node</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">expanduser</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">resolve</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">dest</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">expanduser</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">resolve</span><span class=\"p\">():</span>\n                <span class=\"k\">return</span>\n\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">up</span><span class=\"p\">:</span>\n                <span class=\"c1\"># If we&#39;re not uploading, we&#39;re downloading</span>\n                <span class=\"n\">source</span><span class=\"p\">,</span> <span class=\"n\">dest</span> <span class=\"o\">=</span> <span class=\"n\">dest</span><span class=\"p\">,</span> <span class=\"n\">source</span>\n\n            <span class=\"n\">dest</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">dest</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">expanduser</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">dest</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">():</span>\n                <span class=\"n\">dest</span><span class=\"o\">.</span><span class=\"n\">mkdir</span><span class=\"p\">(</span><span class=\"n\">parents</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">exist_ok</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">dest</span><span class=\"o\">.</span><span class=\"n\">is_dir</span><span class=\"p\">():</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Destination </span><span class=\"si\">{</span><span class=\"n\">dest</span><span class=\"si\">}</span><span class=\"s2\"> is not a directory.&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">dest</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">dest</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/&quot;</span> <span class=\"k\">if</span> <span class=\"n\">contents</span> <span class=\"k\">else</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">dest</span><span class=\"p\">)</span>\n\n            <span class=\"n\">cmd</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;rsync&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;-avz&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">source</span><span class=\"p\">,</span>\n                <span class=\"n\">dest</span><span class=\"p\">,</span>\n            <span class=\"p\">]</span>  <span class=\"c1\"># -a is archive mode, -v is verbose, -z is compress</span>\n            <span class=\"k\">if</span> <span class=\"n\">filter_options</span><span class=\"p\">:</span>\n                <span class=\"n\">cmd</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">filter_options</span><span class=\"p\">]</span>\n\n            <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"p\">,</span> <span class=\"n\">check</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">capture_output</span><span class=\"o\">=</span><span class=\"ow\">not</span> <span class=\"n\">stream_logs</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span>\n\n        <span class=\"n\">ssh_credentials</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">creds_values</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"p\">{}</span>\n        <span class=\"n\">ssh_credentials</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;ssh_host&quot;</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">)</span>\n        <span class=\"n\">pwd</span> <span class=\"o\">=</span> <span class=\"n\">ssh_credentials</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;password&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"n\">ssh_credentials</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;private_key&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"n\">ssh_credentials</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;public_key&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"n\">ssh_control_name</span> <span class=\"o\">=</span> <span class=\"n\">ssh_credentials</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;ssh_control_name&quot;</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">node</span><span class=\"si\">}</span><span class=\"s2\">:</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ssh_port</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">runner</span> <span class=\"o\">=</span> <span class=\"n\">SkySSHRunner</span><span class=\"p\">(</span>\n            <span class=\"n\">node</span><span class=\"p\">,</span>\n            <span class=\"o\">**</span><span class=\"n\">ssh_credentials</span><span class=\"p\">,</span>\n            <span class=\"n\">ssh_control_name</span><span class=\"o\">=</span><span class=\"n\">ssh_control_name</span><span class=\"p\">,</span>\n            <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ssh_port</span><span class=\"p\">,</span>\n            <span class=\"n\">docker_user</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">docker_user</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">pwd</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">up</span><span class=\"p\">:</span>\n                <span class=\"n\">runner</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span>\n                    <span class=\"p\">[</span><span class=\"s2\">&quot;mkdir&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;-p&quot;</span><span class=\"p\">,</span> <span class=\"n\">dest</span><span class=\"p\">],</span>\n                    <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                    <span class=\"n\">ssh_mode</span><span class=\"o\">=</span><span class=\"n\">SshMode</span><span class=\"o\">.</span><span class=\"n\">INTERACTIVE</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">dest</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">expanduser</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">mkdir</span><span class=\"p\">(</span><span class=\"n\">parents</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">exist_ok</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n            <span class=\"n\">runner</span><span class=\"o\">.</span><span class=\"n\">rsync</span><span class=\"p\">(</span>\n                <span class=\"n\">source</span><span class=\"p\">,</span>\n                <span class=\"n\">dest</span><span class=\"p\">,</span>\n                <span class=\"n\">up</span><span class=\"o\">=</span><span class=\"n\">up</span><span class=\"p\">,</span>\n                <span class=\"n\">filter_options</span><span class=\"o\">=</span><span class=\"n\">filter_options</span><span class=\"p\">,</span>\n                <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"n\">stream_logs</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">up</span><span class=\"p\">:</span>\n                <span class=\"n\">ssh_command</span> <span class=\"o\">=</span> <span class=\"n\">runner</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span>\n                    <span class=\"p\">[</span><span class=\"s2\">&quot;mkdir&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;-p&quot;</span><span class=\"p\">,</span> <span class=\"n\">dest</span><span class=\"p\">],</span>\n                    <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                    <span class=\"n\">return_cmd</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"n\">ssh_mode</span><span class=\"o\">=</span><span class=\"n\">SshMode</span><span class=\"o\">.</span><span class=\"n\">INTERACTIVE</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n                <span class=\"n\">run_command_with_password_login</span><span class=\"p\">(</span><span class=\"n\">ssh_command</span><span class=\"p\">,</span> <span class=\"n\">pwd</span><span class=\"p\">,</span> <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">dest</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">expanduser</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">mkdir</span><span class=\"p\">(</span><span class=\"n\">parents</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">exist_ok</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n            <span class=\"n\">rsync_cmd</span> <span class=\"o\">=</span> <span class=\"n\">runner</span><span class=\"o\">.</span><span class=\"n\">rsync</span><span class=\"p\">(</span>\n                <span class=\"n\">source</span><span class=\"p\">,</span>\n                <span class=\"n\">dest</span><span class=\"p\">,</span>\n                <span class=\"n\">up</span><span class=\"o\">=</span><span class=\"n\">up</span><span class=\"p\">,</span>\n                <span class=\"n\">filter_options</span><span class=\"o\">=</span><span class=\"n\">filter_options</span><span class=\"p\">,</span>\n                <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"n\">stream_logs</span><span class=\"p\">,</span>\n                <span class=\"n\">return_cmd</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">run_command_with_password_login</span><span class=\"p\">(</span><span class=\"n\">rsync_cmd</span><span class=\"p\">,</span> <span class=\"n\">pwd</span><span class=\"p\">,</span> <span class=\"n\">stream_logs</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"Cluster.ssh\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.ssh\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">ssh</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;SSH into the cluster</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; rh.cluster(&quot;rh-cpu&quot;).ssh()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.hardware.sky_ssh_runner</span> <span class=\"kn\">import</span> <span class=\"n\">SkySSHRunner</span><span class=\"p\">,</span> <span class=\"n\">SshMode</span>\n\n        <span class=\"n\">creds</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">creds_values</span>\n        <span class=\"n\">runner</span> <span class=\"o\">=</span> <span class=\"n\">SkySSHRunner</span><span class=\"p\">(</span>\n            <span class=\"n\">ip</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"p\">,</span>\n            <span class=\"n\">ssh_user</span><span class=\"o\">=</span><span class=\"n\">creds</span><span class=\"p\">[</span><span class=\"s2\">&quot;ssh_user&quot;</span><span class=\"p\">],</span>\n            <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ssh_port</span><span class=\"p\">,</span>\n            <span class=\"n\">ssh_private_key</span><span class=\"o\">=</span><span class=\"n\">creds</span><span class=\"p\">[</span><span class=\"s2\">&quot;ssh_private_key&quot;</span><span class=\"p\">],</span>\n            <span class=\"n\">docker_user</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">docker_user</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span>\n            <span class=\"n\">runner</span><span class=\"o\">.</span><span class=\"n\">_ssh_base_command</span><span class=\"p\">(</span><span class=\"n\">ssh_mode</span><span class=\"o\">=</span><span class=\"n\">SshMode</span><span class=\"o\">.</span><span class=\"n\">INTERACTIVE</span><span class=\"p\">,</span> <span class=\"n\">port_forward</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_ping</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">):</span>\n        <span class=\"n\">ssh_call</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">([</span><span class=\"s1\">&#39;echo &quot;hello&quot;&#39;</span><span class=\"p\">]))</span>\n        <span class=\"n\">ssh_call</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n        <span class=\"n\">ssh_call</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"n\">timeout</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">ssh_call</span><span class=\"o\">.</span><span class=\"n\">is_alive</span><span class=\"p\">():</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TimeoutError</span><span class=\"p\">(</span><span class=\"s2\">&quot;SSH call timed out&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_copy_certs_to_cluster</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Copy local certs to the cluster. Destination on the cluster depends on whether Caddy is enabled. This is</span>\n<span class=\"sd\">        to ensure that the Caddy service has the necessary access to load the certs when the service is started.&quot;&quot;&quot;</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">runhouse</span> <span class=\"kn\">import</span> <span class=\"n\">folder</span>\n\n        <span class=\"c1\"># Copy to the home directory by default</span>\n        <span class=\"n\">local_certs_path</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cert_config</span><span class=\"o\">.</span><span class=\"n\">key_path</span>\n        <span class=\"n\">dest</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cert_config</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_CLUSTER_DIR</span>\n        <span class=\"n\">folder</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">local_certs_path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">dest</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_use_caddy</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Move to the Caddy directory to ensure the daemon has access to the certs</span>\n            <span class=\"n\">src</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cert_config</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_CLUSTER_DIR</span>\n            <span class=\"n\">dest</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cert_config</span><span class=\"o\">.</span><span class=\"n\">CADDY_CLUSTER_DIR</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_run_commands_with_ssh</span><span class=\"p\">(</span>\n                <span class=\"p\">[</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;sudo mkdir -p </span><span class=\"si\">{</span><span class=\"n\">dest</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;sudo mv </span><span class=\"si\">{</span><span class=\"n\">src</span><span class=\"si\">}</span><span class=\"s2\">/* </span><span class=\"si\">{</span><span class=\"n\">dest</span><span class=\"si\">}</span><span class=\"s2\">/&quot;</span><span class=\"p\">,</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;sudo rm -r </span><span class=\"si\">{</span><span class=\"n\">src</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span>\n                <span class=\"p\">]</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Copied local certs onto the cluster in path: </span><span class=\"si\">{</span><span class=\"n\">dest</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"Cluster.run\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.run\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">commands</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span>\n        <span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"s2\">&quot;Env&quot;</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">stream_logs</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">require_outputs</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">_ssh_mode</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;interactive&quot;</span><span class=\"p\">,</span>  <span class=\"c1\"># Note, this only applies for non-password SSH</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Run a list of shell commands on the cluster. If `run_name` is provided, the commands will be</span>\n<span class=\"sd\">        sent over to the cluster before being executed and a Run object will be created.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; cpu.run([&quot;pip install numpy&quot;])</span>\n<span class=\"sd\">            &gt;&gt;&gt; cpu.run([&quot;pip install numpy&quot;], env=&quot;my_conda_env&quot;])</span>\n<span class=\"sd\">            &gt;&gt;&gt; cpu.run([&quot;python script.py&quot;])</span>\n<span class=\"sd\">            &gt;&gt;&gt; cpu.run([&quot;python script.py&quot;], node=&quot;3.89.174.234&quot;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.envs</span> <span class=\"kn\">import</span> <span class=\"n\">Env</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">()</span> <span class=\"ow\">and</span> <span class=\"n\">node</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Cannot specify a node when running from within the cluster.&quot;</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">commands</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">commands</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">commands</span><span class=\"p\">]</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"n\">Env</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_default_env</span>\n        <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">env</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">default_env</span>\n        <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">_get_env_from</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># If node is not specified, then we just use normal logic, knowing that we are likely on the head node</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">node</span><span class=\"p\">:</span>\n            <span class=\"n\">env_name</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                <span class=\"n\">env</span>\n                <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">name</span>\n                <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"n\">Env</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span> <span class=\"kc\">None</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">return_codes</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">command</span> <span class=\"ow\">in</span> <span class=\"n\">commands</span><span class=\"p\">:</span>\n                <span class=\"n\">ret_code</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span>\n                    <span class=\"n\">env_name</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;_run_command&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">command</span><span class=\"p\">,</span>\n                    <span class=\"n\">require_outputs</span><span class=\"o\">=</span><span class=\"n\">require_outputs</span><span class=\"p\">,</span>\n                    <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"n\">stream_logs</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n                <span class=\"n\">return_codes</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ret_code</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">return_codes</span>\n\n        <span class=\"c1\"># Node is specified, so we do everything via ssh</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">node</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;all&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">res_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n                <span class=\"k\">for</span> <span class=\"n\">node</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ips</span><span class=\"p\">:</span>\n                    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span>\n                        <span class=\"n\">commands</span><span class=\"o\">=</span><span class=\"n\">commands</span><span class=\"p\">,</span>\n                        <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"n\">env</span><span class=\"p\">,</span>\n                        <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"n\">stream_logs</span><span class=\"p\">,</span>\n                        <span class=\"n\">require_outputs</span><span class=\"o\">=</span><span class=\"n\">require_outputs</span><span class=\"p\">,</span>\n                        <span class=\"n\">node</span><span class=\"o\">=</span><span class=\"n\">node</span><span class=\"p\">,</span>\n                        <span class=\"n\">_ssh_mode</span><span class=\"o\">=</span><span class=\"n\">_ssh_mode</span><span class=\"p\">,</span>\n                    <span class=\"p\">)</span>\n                    <span class=\"n\">res_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"n\">res_list</span>\n\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n\n                <span class=\"n\">full_commands</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">_full_command</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">cmd</span> <span class=\"ow\">in</span> <span class=\"n\">commands</span><span class=\"p\">]</span>\n\n                <span class=\"n\">return_codes</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_run_commands_with_ssh</span><span class=\"p\">(</span>\n                    <span class=\"n\">full_commands</span><span class=\"p\">,</span>\n                    <span class=\"n\">cmd_prefix</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"n\">stream_logs</span><span class=\"p\">,</span>\n                    <span class=\"n\">node</span><span class=\"o\">=</span><span class=\"n\">node</span><span class=\"p\">,</span>\n                    <span class=\"n\">require_outputs</span><span class=\"o\">=</span><span class=\"n\">require_outputs</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n\n                <span class=\"k\">return</span> <span class=\"n\">return_codes</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_run_commands_with_ssh</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">commands</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">,</span>\n        <span class=\"n\">env_vars</span><span class=\"p\">:</span> <span class=\"n\">Dict</span> <span class=\"o\">=</span> <span class=\"p\">{},</span>\n        <span class=\"n\">cmd_prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">stream_logs</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">require_outputs</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">_ssh_mode</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;interactive&quot;</span><span class=\"p\">,</span>  <span class=\"c1\"># Note, this only applies for non-password SSH</span>\n    <span class=\"p\">):</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.hardware.sky_ssh_runner</span> <span class=\"kn\">import</span> <span class=\"n\">SkySSHRunner</span><span class=\"p\">,</span> <span class=\"n\">SshMode</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">commands</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">commands</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">commands</span><span class=\"p\">]</span>\n\n        <span class=\"c1\"># If no address provided explicitly use the head node address</span>\n        <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">node</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span>\n\n        <span class=\"n\">return_codes</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n        <span class=\"n\">ssh_credentials</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">creds_values</span><span class=\"p\">)</span>\n        <span class=\"n\">host</span> <span class=\"o\">=</span> <span class=\"n\">ssh_credentials</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;ssh_host&quot;</span><span class=\"p\">,</span> <span class=\"n\">node</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"p\">)</span>\n        <span class=\"n\">pwd</span> <span class=\"o\">=</span> <span class=\"n\">ssh_credentials</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;password&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"n\">ssh_credentials</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;private_key&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"n\">ssh_credentials</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;public_key&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"n\">ssh_control_name</span> <span class=\"o\">=</span> <span class=\"n\">ssh_credentials</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;ssh_control_name&quot;</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">node</span><span class=\"si\">}</span><span class=\"s2\">:</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ssh_port</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">runner</span> <span class=\"o\">=</span> <span class=\"n\">SkySSHRunner</span><span class=\"p\">(</span>\n            <span class=\"n\">host</span><span class=\"p\">,</span>\n            <span class=\"o\">**</span><span class=\"n\">ssh_credentials</span><span class=\"p\">,</span>\n            <span class=\"n\">ssh_control_name</span><span class=\"o\">=</span><span class=\"n\">ssh_control_name</span><span class=\"p\">,</span>\n            <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ssh_port</span><span class=\"p\">,</span>\n            <span class=\"n\">docker_user</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">docker_user</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">env_var_prefix</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"s2\">&quot; &quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">key</span><span class=\"si\">}</span><span class=\"s2\">=</span><span class=\"si\">{</span><span class=\"n\">val</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span> <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"n\">env_vars</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">())</span>\n            <span class=\"k\">if</span> <span class=\"n\">env_vars</span>\n            <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">command</span> <span class=\"ow\">in</span> <span class=\"n\">commands</span><span class=\"p\">:</span>\n            <span class=\"n\">command</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">cmd_prefix</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">{</span><span class=\"n\">command</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span> <span class=\"k\">if</span> <span class=\"n\">cmd_prefix</span> <span class=\"k\">else</span> <span class=\"n\">command</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Running command on </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">: </span><span class=\"si\">{</span><span class=\"n\">command</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n            <span class=\"c1\"># set env vars after log statement</span>\n            <span class=\"n\">command</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">env_var_prefix</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">{</span><span class=\"n\">command</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span> <span class=\"k\">if</span> <span class=\"n\">env_var_prefix</span> <span class=\"k\">else</span> <span class=\"n\">command</span>\n\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">pwd</span><span class=\"p\">:</span>\n                <span class=\"n\">ssh_mode</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                    <span class=\"n\">SshMode</span><span class=\"o\">.</span><span class=\"n\">INTERACTIVE</span>\n                    <span class=\"k\">if</span> <span class=\"n\">_ssh_mode</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;interactive&quot;</span>\n                    <span class=\"k\">else</span> <span class=\"n\">SshMode</span><span class=\"o\">.</span><span class=\"n\">NON_INTERACTIVE</span>\n                    <span class=\"k\">if</span> <span class=\"n\">_ssh_mode</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;non_interactive&quot;</span>\n                    <span class=\"k\">else</span> <span class=\"n\">SshMode</span><span class=\"o\">.</span><span class=\"n\">LOGIN</span>\n                    <span class=\"k\">if</span> <span class=\"n\">_ssh_mode</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;login&quot;</span>\n                    <span class=\"k\">else</span> <span class=\"kc\">None</span>\n                <span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">ssh_mode</span><span class=\"p\">:</span>\n                    <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Invalid SSH mode: </span><span class=\"si\">{</span><span class=\"n\">_ssh_mode</span><span class=\"si\">}</span><span class=\"s2\">.&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">ret_code</span> <span class=\"o\">=</span> <span class=\"n\">runner</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span>\n                    <span class=\"n\">command</span><span class=\"p\">,</span>\n                    <span class=\"n\">require_outputs</span><span class=\"o\">=</span><span class=\"n\">require_outputs</span><span class=\"p\">,</span>\n                    <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"n\">stream_logs</span><span class=\"p\">,</span>\n                    <span class=\"n\">ssh_mode</span><span class=\"o\">=</span><span class=\"n\">ssh_mode</span><span class=\"p\">,</span>\n                    <span class=\"n\">quiet_ssh</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n                <span class=\"n\">return_codes</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ret_code</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"c1\"># We need to quiet the SSH output here or it will print</span>\n                <span class=\"c1\"># &quot;Shared connection to ____ closed.&quot; at the end, which messes with the output.</span>\n                <span class=\"n\">ssh_command</span> <span class=\"o\">=</span> <span class=\"n\">runner</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span>\n                    <span class=\"n\">command</span><span class=\"p\">,</span>\n                    <span class=\"n\">require_outputs</span><span class=\"o\">=</span><span class=\"n\">require_outputs</span><span class=\"p\">,</span>\n                    <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"n\">stream_logs</span><span class=\"p\">,</span>\n                    <span class=\"n\">return_cmd</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"n\">ssh_mode</span><span class=\"o\">=</span><span class=\"n\">SshMode</span><span class=\"o\">.</span><span class=\"n\">INTERACTIVE</span><span class=\"p\">,</span>\n                    <span class=\"n\">quiet_ssh</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n                <span class=\"n\">command_run</span> <span class=\"o\">=</span> <span class=\"n\">run_command_with_password_login</span><span class=\"p\">(</span>\n                    <span class=\"n\">ssh_command</span><span class=\"p\">,</span> <span class=\"n\">pwd</span><span class=\"p\">,</span> <span class=\"n\">stream_logs</span>\n                <span class=\"p\">)</span>\n                <span class=\"c1\"># Filter color characters from ssh.before, as otherwise sometimes random color characters</span>\n                <span class=\"c1\"># will be printed to the console.</span>\n                <span class=\"n\">command_run</span><span class=\"o\">.</span><span class=\"n\">before</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;\\x1b\\[[0-9;]*m&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">command_run</span><span class=\"o\">.</span><span class=\"n\">before</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">require_outputs</span><span class=\"p\">:</span>\n                    <span class=\"n\">return_codes</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n                        <span class=\"p\">[</span>\n                            <span class=\"n\">command_run</span><span class=\"o\">.</span><span class=\"n\">exitstatus</span><span class=\"p\">,</span>\n                            <span class=\"n\">command_run</span><span class=\"o\">.</span><span class=\"n\">before</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">(),</span>\n                            <span class=\"n\">command_run</span><span class=\"o\">.</span><span class=\"n\">signalstatus</span><span class=\"p\">,</span>\n                        <span class=\"p\">]</span>\n                    <span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">return_codes</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">command_run</span><span class=\"o\">.</span><span class=\"n\">exitstatus</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">return_codes</span>\n\n<div class=\"viewcode-block\" id=\"Cluster.run_python\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.run_python\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">run_python</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">commands</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span>\n        <span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"s2\">&quot;Env&quot;</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">stream_logs</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Run a list of python commands on the cluster, or a specific cluster node if its IP is provided.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; cpu.run_python([&#39;import numpy&#39;, &#39;print(numpy.__version__)&#39;])</span>\n<span class=\"sd\">            &gt;&gt;&gt; cpu.run_python([&quot;print(&#39;hello&#39;)&quot;])</span>\n<span class=\"sd\">            &gt;&gt;&gt; cpu.run_python([&quot;print(&#39;hello&#39;)&quot;], node=&quot;3.89.174.234&quot;)</span>\n\n<span class=\"sd\">        Note:</span>\n<span class=\"sd\">            Running Python commands with nested quotes can be finicky. If using nested quotes,</span>\n<span class=\"sd\">            try to wrap the outer quote with double quotes (&quot;) and the inner quotes with a single quote (&#39;).</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">cmd_prefix</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;python3 -c&quot;</span>\n        <span class=\"n\">command_str</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;; &quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">commands</span><span class=\"p\">)</span>\n        <span class=\"n\">command_str_repr</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">command_str</span><span class=\"p\">))[</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">creds_values</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;password&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span> <span class=\"n\">command_str</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">formatted_command</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s1\">&#39;</span><span class=\"si\">{</span><span class=\"n\">cmd_prefix</span><span class=\"si\">}</span><span class=\"s1\"> &quot;</span><span class=\"si\">{</span><span class=\"n\">command_str_repr</span><span class=\"si\">}</span><span class=\"s1\">&quot;&#39;</span>\n\n        <span class=\"c1\"># If invoking a run as part of the python commands also return the Run object</span>\n        <span class=\"n\">return_codes</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span><span class=\"n\">formatted_command</span><span class=\"p\">],</span>\n            <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"n\">env</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_default_env</span><span class=\"p\">,</span>\n            <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"n\">stream_logs</span><span class=\"p\">,</span>\n            <span class=\"n\">node</span><span class=\"o\">=</span><span class=\"n\">node</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">return_codes</span></div>\n\n<div class=\"viewcode-block\" id=\"Cluster.sync_secrets\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.sync_secrets\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">sync_secrets</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">providers</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span> <span class=\"ow\">or</span> <span class=\"s2\">&quot;Secret&quot;</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Env&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Send secrets for the given providers.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            providers(List[str] or None): List of providers to send secrets for.</span>\n<span class=\"sd\">                If `None`, all providers configured in the environment will by sent.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; cpu.sync_secrets(secrets=[&quot;aws&quot;, &quot;lambda&quot;])</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">check_server</span><span class=\"p\">()</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.secrets</span> <span class=\"kn\">import</span> <span class=\"n\">Secret</span>\n\n        <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">env</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_default_env</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.envs</span> <span class=\"kn\">import</span> <span class=\"n\">Env</span>\n\n            <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">Env</span><span class=\"o\">.</span><span class=\"n\">from_name</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">)</span>\n\n        <span class=\"n\">secrets</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"n\">providers</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">secret</span> <span class=\"ow\">in</span> <span class=\"n\">providers</span><span class=\"p\">:</span>\n                <span class=\"n\">secrets</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n                    <span class=\"n\">Secret</span><span class=\"o\">.</span><span class=\"n\">from_name</span><span class=\"p\">(</span><span class=\"n\">secret</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">secret</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"n\">secret</span>\n                <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">secrets</span> <span class=\"o\">=</span> <span class=\"n\">Secret</span><span class=\"o\">.</span><span class=\"n\">local_secrets</span><span class=\"p\">()</span>\n            <span class=\"n\">enabled_provider_secrets</span> <span class=\"o\">=</span> <span class=\"n\">Secret</span><span class=\"o\">.</span><span class=\"n\">extract_provider_secrets</span><span class=\"p\">()</span>\n            <span class=\"n\">secrets</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">enabled_provider_secrets</span><span class=\"p\">)</span>\n            <span class=\"n\">secrets</span> <span class=\"o\">=</span> <span class=\"n\">secrets</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">secret</span> <span class=\"ow\">in</span> <span class=\"n\">secrets</span><span class=\"p\">:</span>\n            <span class=\"n\">secret</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"n\">env</span><span class=\"p\">)</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">ipython</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># TODO tunnel into python interpreter in cluster</span>\n        <span class=\"k\">pass</span>\n\n<div class=\"viewcode-block\" id=\"Cluster.notebook\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.notebook\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">notebook</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">persist</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">sync_package_on_close</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">port_forward</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">8888</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Tunnel into and launch notebook from the cluster.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; rh.cluster(&quot;test-cluster&quot;).notebook()</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># Roughly trying to follow:</span>\n        <span class=\"c1\"># https://towardsdatascience.com/using-jupyter-notebook-running-on-a-remote-docker-container-via-ssh-ea2c3ebb9055</span>\n        <span class=\"c1\"># https://docs.ray.io/en/latest/ray-core/using-ray-with-jupyter.html</span>\n\n        <span class=\"n\">tunnel</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ssh_tunnel</span><span class=\"p\">(</span>\n            <span class=\"n\">local_port</span><span class=\"o\">=</span><span class=\"n\">port_forward</span><span class=\"p\">,</span>\n            <span class=\"n\">num_ports_to_try</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">port_fwd</span> <span class=\"o\">=</span> <span class=\"n\">tunnel</span><span class=\"o\">.</span><span class=\"n\">local_bind_port</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">install_cmd</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;pip install jupyterlab&quot;</span>\n            <span class=\"n\">jupyter_cmd</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;jupyter lab --port </span><span class=\"si\">{</span><span class=\"n\">port_fwd</span><span class=\"si\">}</span><span class=\"s2\"> --no-browser&quot;</span>\n            <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pause_autostop</span><span class=\"p\">():</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">commands</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">install_cmd</span><span class=\"p\">,</span> <span class=\"n\">jupyter_cmd</span><span class=\"p\">],</span> <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n        <span class=\"k\">finally</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">sync_package_on_close</span><span class=\"p\">:</span>\n                <span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.packages.package</span> <span class=\"kn\">import</span> <span class=\"n\">Package</span>\n\n                <span class=\"k\">if</span> <span class=\"n\">sync_package_on_close</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;./&quot;</span><span class=\"p\">:</span>\n                    <span class=\"n\">sync_package_on_close</span> <span class=\"o\">=</span> <span class=\"n\">locate_working_dir</span><span class=\"p\">()</span>\n                <span class=\"n\">pkg</span> <span class=\"o\">=</span> <span class=\"n\">Package</span><span class=\"o\">.</span><span class=\"n\">from_string</span><span class=\"p\">(</span><span class=\"s2\">&quot;local:&quot;</span> <span class=\"o\">+</span> <span class=\"n\">sync_package_on_close</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rsync</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s2\">&quot;~/</span><span class=\"si\">{</span><span class=\"n\">pkg</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">dest</span><span class=\"o\">=</span><span class=\"n\">pkg</span><span class=\"o\">.</span><span class=\"n\">local_path</span><span class=\"p\">,</span> <span class=\"n\">up</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">persist</span><span class=\"p\">:</span>\n                <span class=\"n\">tunnel</span><span class=\"o\">.</span><span class=\"n\">terminate</span><span class=\"p\">()</span>\n                <span class=\"n\">kill_jupyter_cmd</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;jupyter notebook stop </span><span class=\"si\">{</span><span class=\"n\">port_fwd</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">commands</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">kill_jupyter_cmd</span><span class=\"p\">])</span></div>\n\n<div class=\"viewcode-block\" id=\"Cluster.remove_conda_env\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.remove_conda_env\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">remove_conda_env</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"s2\">&quot;CondaEnv&quot;</span><span class=\"p\">],</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Remove conda env from the cluster.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; rh.ondemand_cluster(&quot;rh-cpu&quot;).remove_conda_env(&quot;my_conda_env&quot;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">env_name</span> <span class=\"o\">=</span> <span class=\"n\">env</span> <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">env_name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">([</span><span class=\"sa\">f</span><span class=\"s2\">&quot;conda env remove -n </span><span class=\"si\">{</span><span class=\"n\">env_name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">])</span></div>\n\n<div class=\"viewcode-block\" id=\"Cluster.download_cert\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.download_cert\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">download_cert</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Download certificate from the cluster (Note: user must have access to the cluster)&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">check_server</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_certificate</span><span class=\"p\">()</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n            <span class=\"sa\">f</span><span class=\"s2\">&quot;Latest TLS certificate for </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\"> saved to local path: </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cert_config</span><span class=\"o\">.</span><span class=\"n\">cert_path</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n        <span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Cluster.enable_den_auth\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.enable_den_auth\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">enable_den_auth</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">flush</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Enable Den auth on the cluster.&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">check_server</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">():</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Cannot toggle Den Auth live on the cluster.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">den_auth</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">set_settings</span><span class=\"p\">({</span><span class=\"s2\">&quot;den_auth&quot;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s2\">&quot;flush_auth_cache&quot;</span><span class=\"p\">:</span> <span class=\"n\">flush</span><span class=\"p\">})</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">disable_den_auth</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">check_server</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">():</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Cannot toggle Den Auth live on the cluster.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">den_auth</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">set_settings</span><span class=\"p\">({</span><span class=\"s2\">&quot;den_auth&quot;</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">})</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">set_connection_defaults</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_host</span> <span class=\"ow\">and</span> <span class=\"p\">(</span>\n            <span class=\"s2\">&quot;localhost&quot;</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_host</span> <span class=\"ow\">or</span> <span class=\"s2\">&quot;:&quot;</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_host</span>\n        <span class=\"p\">):</span>\n            <span class=\"c1\"># If server_connection_type is not specified, we</span>\n            <span class=\"c1\"># assume we can hit the server directly via HTTP</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_connection_type</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_connection_type</span> <span class=\"ow\">or</span> <span class=\"n\">ServerConnectionType</span><span class=\"o\">.</span><span class=\"n\">NONE</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"s2\">&quot;:&quot;</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_host</span><span class=\"p\">:</span>\n                <span class=\"c1\"># e.g. &quot;localhost:23324&quot; or &lt;real_ip&gt;:&lt;custom port&gt; (e.g. a port is already open to the server)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_host</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client_port</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_host</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;:&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;client_port&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client_port</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_connection_type</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_connection_type</span> <span class=\"ow\">or</span> <span class=\"p\">(</span>\n            <span class=\"n\">ServerConnectionType</span><span class=\"o\">.</span><span class=\"n\">TLS</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ssl_certfile</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ssl_keyfile</span>\n            <span class=\"k\">else</span> <span class=\"n\">ServerConnectionType</span><span class=\"o\">.</span><span class=\"n\">SSH</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_port</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_connection_type</span> <span class=\"o\">==</span> <span class=\"n\">ServerConnectionType</span><span class=\"o\">.</span><span class=\"n\">TLS</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_port</span> <span class=\"o\">=</span> <span class=\"n\">DEFAULT_HTTPS_PORT</span>\n            <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_connection_type</span> <span class=\"o\">==</span> <span class=\"n\">ServerConnectionType</span><span class=\"o\">.</span><span class=\"n\">NONE</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_port</span> <span class=\"o\">=</span> <span class=\"n\">DEFAULT_HTTP_PORT</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">server_port</span> <span class=\"o\">=</span> <span class=\"n\">DEFAULT_SERVER_PORT</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">RESERVED_SYSTEM_NAMES</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;Cluster name </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\"> is a reserved name. Please use a different name which is not one of &quot;</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">RESERVED_SYSTEM_NAMES</span><span class=\"si\">}</span><span class=\"s2\">.&quot;</span>\n            <span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"Cluster.share\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.Cluster.share\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">share</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">users</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">access_level</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">ResourceAccess</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ResourceAccess</span><span class=\"o\">.</span><span class=\"n\">READ</span><span class=\"p\">,</span>\n        <span class=\"n\">visibility</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">ResourceVisibility</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">notify_users</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">headers</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ResourceAccess</span><span class=\"p\">],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ResourceAccess</span><span class=\"p\">]]:</span>\n\n        <span class=\"c1\"># save cluster and creds if not saved</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># share creds</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;Sharing cluster credentials, which enables the recipient to SSH into the cluster.&quot;</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_creds</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_creds</span><span class=\"o\">.</span><span class=\"n\">share</span><span class=\"p\">(</span>\n                <span class=\"n\">users</span><span class=\"o\">=</span><span class=\"n\">users</span><span class=\"p\">,</span>\n                <span class=\"n\">access_level</span><span class=\"o\">=</span><span class=\"n\">access_level</span><span class=\"p\">,</span>\n                <span class=\"n\">visibility</span><span class=\"o\">=</span><span class=\"n\">visibility</span><span class=\"p\">,</span>\n                <span class=\"n\">notify_users</span><span class=\"o\">=</span><span class=\"n\">notify_users</span><span class=\"p\">,</span>\n                <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_default_env</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_default_env</span><span class=\"o\">.</span><span class=\"n\">share</span><span class=\"p\">(</span>\n                <span class=\"n\">users</span><span class=\"o\">=</span><span class=\"n\">users</span><span class=\"p\">,</span>\n                <span class=\"n\">access_level</span><span class=\"o\">=</span><span class=\"n\">access_level</span><span class=\"p\">,</span>\n                <span class=\"n\">visibility</span><span class=\"o\">=</span><span class=\"n\">visibility</span><span class=\"p\">,</span>\n                <span class=\"n\">notify_users</span><span class=\"o\">=</span><span class=\"n\">notify_users</span><span class=\"p\">,</span>\n                <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"c1\"># share cluster</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">share</span><span class=\"p\">(</span>\n            <span class=\"n\">users</span><span class=\"o\">=</span><span class=\"n\">users</span><span class=\"p\">,</span>\n            <span class=\"n\">access_level</span><span class=\"o\">=</span><span class=\"n\">access_level</span><span class=\"p\">,</span>\n            <span class=\"n\">visibility</span><span class=\"o\">=</span><span class=\"n\">visibility</span><span class=\"p\">,</span>\n            <span class=\"n\">notify_users</span><span class=\"o\">=</span><span class=\"n\">notify_users</span><span class=\"p\">,</span>\n            <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span></div>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_check_for_child_configs</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Overload by child resources to load any resources they hold internally.&quot;&quot;&quot;</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.envs.env</span> <span class=\"kn\">import</span> <span class=\"n\">Env</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.secrets.secret</span> <span class=\"kn\">import</span> <span class=\"n\">Secret</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.secrets.utils</span> <span class=\"kn\">import</span> <span class=\"n\">load_config</span><span class=\"p\">,</span> <span class=\"n\">setup_cluster_creds</span>\n\n        <span class=\"n\">creds</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;creds&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;ssh_creds&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">creds</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">creds</span> <span class=\"o\">=</span> <span class=\"n\">Secret</span><span class=\"o\">.</span><span class=\"n\">from_config</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">load_config</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">creds</span><span class=\"p\">))</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">creds</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"s2\">&quot;name&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">creds</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">():</span>\n                <span class=\"n\">creds</span> <span class=\"o\">=</span> <span class=\"n\">Secret</span><span class=\"o\">.</span><span class=\"n\">from_config</span><span class=\"p\">(</span><span class=\"n\">creds</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">creds</span> <span class=\"o\">=</span> <span class=\"n\">setup_cluster_creds</span><span class=\"p\">(</span><span class=\"n\">creds</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">])</span>\n        <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;creds&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">creds</span>\n\n        <span class=\"n\">default_env</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;default_env&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">default_env</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">default_env</span> <span class=\"o\">=</span> <span class=\"n\">Env</span><span class=\"o\">.</span><span class=\"n\">from_name</span><span class=\"p\">(</span><span class=\"n\">default_env</span><span class=\"p\">,</span> <span class=\"n\">_resolve_children</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">default_env</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n            <span class=\"n\">default_env</span> <span class=\"o\">=</span> <span class=\"n\">Env</span><span class=\"o\">.</span><span class=\"n\">from_config</span><span class=\"p\">(</span><span class=\"n\">default_env</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">default_env</span><span class=\"p\">:</span>\n            <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;default_env&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">default_env</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">config</span>\n\n    <span class=\"c1\">##############################################</span>\n    <span class=\"c1\"># Send Cluster status to Den methods</span>\n    <span class=\"c1\">##############################################</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_disable_status_check</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Stopping sending status to Den.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">den_auth</span><span class=\"p\">:</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Cluster must have Den authorization to disable periodic status checks. &quot;</span>\n                <span class=\"s2\">&quot;Make sure you have a Den account, and you&#39;ve created your cluster with den_auth = True.&quot;</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">return</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">check_server</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">set_settings</span><span class=\"p\">({</span><span class=\"s2\">&quot;status_check_interval&quot;</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">})</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_enable_or_update_status_check</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">new_interval</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"n\">DEFAULT_STATUS_CHECK_INTERVAL</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Enables a periodic status check or updates the interval between to consecutive cluster status checks.</span>\n<span class=\"sd\">        :param new_interval: int, the new interval size.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">den_auth</span><span class=\"p\">:</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Cluster must have Den authorization to change periodic status checks interval size. &quot;</span>\n                <span class=\"s2\">&quot;Make sure you have a Den account, and you&#39;ve created your cluster with den_auth = True.&quot;</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">return</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">check_server</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">set_settings</span><span class=\"p\">({</span><span class=\"s2\">&quot;status_check_interval&quot;</span><span class=\"p\">:</span> <span class=\"n\">new_interval</span><span class=\"p\">})</span></div>\n</pre></div>", "current_page_name": "_modules/runhouse/resources/hardware/cluster", "sidebars": ["about.html", "navigation.html", "relations.html", "searchbox.html", "donate.html"], "customsidebar": null, "alabaster_version": "0.7.16", "alabaster_version_info": [0, 7, 16]}