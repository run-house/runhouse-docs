{"parents": [{"link": "../../../../", "title": "Module code"}], "title": "runhouse.resources.hardware.cluster_factory", "body": "<h1>Source code for runhouse.resources.hardware.cluster_factory</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">,</span> <span class=\"n\">Union</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.globals</span> <span class=\"kn\">import</span> <span class=\"n\">configs</span><span class=\"p\">,</span> <span class=\"n\">rns_client</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.logger</span> <span class=\"kn\">import</span> <span class=\"n\">get_logger</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.hardware.cluster</span> <span class=\"kn\">import</span> <span class=\"n\">Cluster</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.hardware.constants</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">KUBERNETES_CLUSTER_ARGS</span><span class=\"p\">,</span>\n    <span class=\"n\">ONDEMAND_COMPUTE_ARGS</span><span class=\"p\">,</span>\n    <span class=\"n\">RH_SERVER_ARGS</span><span class=\"p\">,</span>\n    <span class=\"n\">STATIC_CLUSTER_ARGS</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.hardware.on_demand_cluster</span> <span class=\"kn\">import</span> <span class=\"n\">OnDemandCluster</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.hardware.utils</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">_config_and_args_mismatches</span><span class=\"p\">,</span>\n    <span class=\"n\">LauncherType</span><span class=\"p\">,</span>\n    <span class=\"n\">ServerConnectionType</span><span class=\"p\">,</span>\n    <span class=\"n\">setup_kubernetes</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.images.image</span> <span class=\"kn\">import</span> <span class=\"n\">Image</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">get_logger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"cluster\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.cluster\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">cluster</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n    <span class=\"n\">host</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">ssh_creds</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">ssh_port</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">client_port</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">server_port</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">server_host</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">server_connection_type</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">ServerConnectionType</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">ssl_keyfile</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">ssl_certfile</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">domain</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">image</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Image</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">den_auth</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">load_from_den</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">dryrun</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n<span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Builds an instance of :class:`Cluster`.</span>\n\n<span class=\"sd\">    * If Cluster with same name is found in Den and ``load_from_den`` is ``True``, load it down from Den</span>\n<span class=\"sd\">    * If arguments corresponding to ondemand clusters are provided, arguments are fed through to</span>\n<span class=\"sd\">      ``rh.ondemand_cluster`` factory function</span>\n<span class=\"sd\">    * If arguments are mismatched with loaded Cluster, return a new Cluster with the provided args</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        name (str): Name for the cluster.</span>\n<span class=\"sd\">        host (str or List[str], optional): Hostname (e.g. domain or name in .ssh/config), IP address, or list of IP</span>\n<span class=\"sd\">            addresses for the cluster (the first of which is the head node). (Default: ``None``).</span>\n<span class=\"sd\">        ssh_creds (Dict or str, optional): SSH credentials, passed as dictionary or the name of an ``SSHSecret`` object.</span>\n<span class=\"sd\">            Example: ``ssh_creds={&#39;ssh_user&#39;: &#39;...&#39;, &#39;ssh_private_key&#39;:&#39;&lt;path_to_key&gt;&#39;}`` (Default: ``None``).</span>\n<span class=\"sd\">        ssh_port (int, optional): Port to use for ssh. If not provided, will default to ``22``.</span>\n<span class=\"sd\">        client_port (int, optional): Port to use for the client. If not provided, will default to the server port.</span>\n<span class=\"sd\">        server_port (bool, optional): Port to use for the server. If not provided will use 80 for a</span>\n<span class=\"sd\">            ``server_connection_type`` or ``none``, 443 for ``tls`` and ``32300`` for all other SSH connection types.</span>\n<span class=\"sd\">        server_host (bool, optional): Host from which the server listens for traffic (i.e. the --host argument</span>\n<span class=\"sd\">            `runhouse server start` run on the cluster). Defaults to ``&quot;0.0.0.0&quot;`` unless connecting to the server</span>\n<span class=\"sd\">            with an SSH connection, in which case ``localhost`` is used. (Default: ``None``).</span>\n<span class=\"sd\">        server_connection_type (ServerConnectionType or str, optional): Type of connection to use for the Runhouse</span>\n<span class=\"sd\">            API server. ``ssh`` will use start with server via an SSH tunnel. ``tls`` will start the server</span>\n<span class=\"sd\">            with HTTPS on port 443 using TLS certs without an SSH tunnel. ``none`` will start the server with HTTP</span>\n<span class=\"sd\">            without an SSH tunnel. (Default: ``None``).</span>\n<span class=\"sd\">        ssl_keyfile(str, optional): Path to SSL key file to use for launching the API server with HTTPS.</span>\n<span class=\"sd\">            (Default: ``None``).</span>\n<span class=\"sd\">        ssl_certfile(str, optional): Path to SSL certificate file to use for launching the API server with HTTPS.</span>\n<span class=\"sd\">            (Default: ``None``).</span>\n<span class=\"sd\">        domain(str, optional): Domain name for the cluster. Relevant if enabling HTTPs on the cluster. (Default: ``None``).</span>\n<span class=\"sd\">        image (Image, optional): Default image containing setup steps to run during cluster setup. See :class:`Image`.</span>\n<span class=\"sd\">            (Default: ``None``)</span>\n<span class=\"sd\">        den_auth (bool, optional): Whether to use Den authorization on the server. If ``True``, will validate incoming</span>\n<span class=\"sd\">            requests with a Runhouse token provided in the auth headers of the request with the format:</span>\n<span class=\"sd\">            ``{&quot;Authorization&quot;: &quot;Bearer &lt;token&gt;&quot;}``. (Default: ``None``).</span>\n<span class=\"sd\">        load_from_den (bool): Whether to try loading the Cluster resource from Den. (Default: ``True``)</span>\n<span class=\"sd\">        dryrun (bool): Whether to create the Cluster if it doesn&#39;t exist, or load a Cluster object as a dryrun.</span>\n<span class=\"sd\">            (Default: ``False``)</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        Union[Cluster, OnDemandCluster]: The resulting cluster.</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # using private key</span>\n<span class=\"sd\">        &gt;&gt;&gt; gpu = rh.cluster(host=&#39;&lt;hostname&gt;&#39;,</span>\n<span class=\"sd\">        &gt;&gt;&gt;                  ssh_creds={&#39;ssh_user&#39;: &#39;...&#39;, &#39;ssh_private_key&#39;:&#39;&lt;path_to_key&gt;&#39;},</span>\n<span class=\"sd\">        &gt;&gt;&gt;                  name=&#39;rh-a10x&#39;).save()</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; # using password</span>\n<span class=\"sd\">        &gt;&gt;&gt; gpu = rh.cluster(host=&#39;&lt;hostname&gt;&#39;,</span>\n<span class=\"sd\">        &gt;&gt;&gt;                  ssh_creds={&#39;ssh_user&#39;: &#39;...&#39;, &#39;password&#39;:&#39;*****&#39;},</span>\n<span class=\"sd\">        &gt;&gt;&gt;                  name=&#39;rh-a10x&#39;).save()</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; # using the name of an SSHSecret object</span>\n<span class=\"sd\">        &gt;&gt;&gt; gpu = rh.cluster(host=&#39;&lt;hostname&gt;&#39;,</span>\n<span class=\"sd\">        &gt;&gt;&gt;                  ssh_creds=&quot;my_ssh_secret&quot;,</span>\n<span class=\"sd\">        &gt;&gt;&gt;                  name=&#39;rh-a10x&#39;).save()</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; # Load cluster from above</span>\n<span class=\"sd\">        &gt;&gt;&gt; reloaded_cluster = rh.cluster(name=&quot;rh-a10x&quot;)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">host</span> <span class=\"ow\">and</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;ips&quot;</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;Cluster factory method can only accept one of `host` or `ips` as an argument.&quot;</span>\n        <span class=\"p\">)</span>\n    <span class=\"n\">ips</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;ips&quot;</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"p\">([</span><span class=\"n\">host</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"n\">host</span><span class=\"p\">)</span>\n\n    <span class=\"n\">cluster_args</span> <span class=\"o\">=</span> <span class=\"nb\">locals</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n    <span class=\"n\">cluster_args</span><span class=\"p\">[</span><span class=\"s2\">&quot;ips&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ips</span>\n    <span class=\"n\">cluster_args</span><span class=\"p\">[</span><span class=\"s2\">&quot;creds&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">cluster_args</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;ssh_creds&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">cluster_args</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;kwargs&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">cluster_args</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;host&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">cluster_args</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"n\">v</span> <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">cluster_args</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">v</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">}</span>\n\n    <span class=\"c1\"># check for invalid args</span>\n    <span class=\"n\">valid_kwargs</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"o\">*</span><span class=\"n\">ONDEMAND_COMPUTE_ARGS</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">KUBERNETES_CLUSTER_ARGS</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">RH_SERVER_ARGS</span><span class=\"p\">}</span>\n    <span class=\"n\">unsupported_kwargs</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">valid_kwargs</span>\n    <span class=\"k\">if</span> <span class=\"n\">unsupported_kwargs</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n            <span class=\"sa\">f</span><span class=\"s2\">&quot;Received unsupported kwargs </span><span class=\"si\">{</span><span class=\"n\">unsupported_kwargs</span><span class=\"si\">}</span><span class=\"s2\">. &quot;</span>\n            <span class=\"s2\">&quot;Please refer to `rh.cluster` or `rh.ondemand_cluster` for valid input args.&quot;</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span> <span class=\"o\">&amp;</span> <span class=\"p\">{</span><span class=\"o\">*</span><span class=\"n\">ONDEMAND_COMPUTE_ARGS</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">KUBERNETES_CLUSTER_ARGS</span><span class=\"p\">}:</span>\n        <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span> <span class=\"o\">&amp;</span> <span class=\"n\">STATIC_CLUSTER_ARGS</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Received incompatible args specific to both a static and ondemand cluster.&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">ondemand_cluster</span><span class=\"p\">(</span>\n            <span class=\"o\">**</span><span class=\"n\">cluster_args</span><span class=\"p\">,</span>\n            <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">new_cluster</span> <span class=\"o\">=</span> <span class=\"n\">Cluster</span><span class=\"o\">.</span><span class=\"n\">from_name</span><span class=\"p\">(</span>\n            <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">load_from_den</span><span class=\"o\">=</span><span class=\"n\">load_from_den</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">new_cluster</span><span class=\"p\">,</span> <span class=\"n\">OnDemandCluster</span><span class=\"p\">):</span>\n            <span class=\"c1\"># load from name, none of the other arguments were provided</span>\n            <span class=\"n\">cluster_type</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;ondemand&quot;</span>\n            <span class=\"k\">if</span> <span class=\"n\">cluster_args</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span> <span class=\"o\">&amp;</span> <span class=\"p\">{</span><span class=\"o\">*</span><span class=\"n\">RH_SERVER_ARGS</span><span class=\"p\">}:</span>\n                <span class=\"k\">return</span> <span class=\"n\">ondemand_cluster</span><span class=\"p\">(</span>\n                    <span class=\"o\">**</span><span class=\"n\">cluster_args</span><span class=\"p\">,</span>\n                    <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">cluster_type</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;static&quot;</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ValueError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"n\">new_cluster</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">cluster_type</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;unsaved&quot;</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">cluster_args</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;load_from_den&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;dryrun&quot;</span><span class=\"p\">}:</span>\n            <span class=\"c1\"># loading from name, error is either that cluster doesn&#39;t exist or an issue in setup</span>\n            <span class=\"k\">raise</span> <span class=\"n\">e</span>\n\n    <span class=\"n\">cluster_args</span><span class=\"p\">[</span><span class=\"s2\">&quot;creds&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">cluster_args</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;creds&quot;</span><span class=\"p\">,</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">default_ssh_key</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">cluster_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;unsaved&quot;</span><span class=\"p\">:</span>\n        <span class=\"n\">new_cluster</span> <span class=\"o\">=</span> <span class=\"n\">Cluster</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">cluster_args</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">cluster_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;static&quot;</span><span class=\"p\">:</span>\n        <span class=\"n\">mismatches</span> <span class=\"o\">=</span> <span class=\"n\">_config_and_args_mismatches</span><span class=\"p\">(</span><span class=\"n\">new_cluster</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">(),</span> <span class=\"n\">cluster_args</span><span class=\"p\">)</span>\n        <span class=\"n\">server_mismatches</span> <span class=\"o\">=</span> <span class=\"n\">mismatches</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span> <span class=\"o\">&amp;</span> <span class=\"n\">RH_SERVER_ARGS</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;ips&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">mismatches</span><span class=\"p\">:</span>\n            <span class=\"n\">new_cluster</span> <span class=\"o\">=</span> <span class=\"n\">Cluster</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">cluster_args</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">server_mismatches</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">new_cluster</span><span class=\"o\">.</span><span class=\"n\">is_up</span><span class=\"p\">():</span>\n                <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;Runhouse server setting has been updated. Please run `cluster.restart_server()` &quot;</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;to apply new server settings for </span><span class=\"si\">{</span><span class=\"n\">server_mismatches</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n                <span class=\"p\">)</span>\n            <span class=\"n\">new_cluster</span> <span class=\"o\">=</span> <span class=\"n\">Cluster</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">cluster_args</span><span class=\"p\">)</span>\n\n    <span class=\"n\">new_cluster</span><span class=\"o\">.</span><span class=\"n\">_set_connection_defaults</span><span class=\"p\">()</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">den_auth</span><span class=\"p\">:</span>\n        <span class=\"n\">new_cluster</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">new_cluster</span></div>\n\n\n<div class=\"viewcode-block\" id=\"ondemand_cluster\"><a class=\"viewcode-back\" href=\"../../../../../api/python/cluster/#runhouse.ondemand_cluster\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">ondemand_cluster</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"p\">,</span>\n    <span class=\"c1\"># sky arguments</span>\n    <span class=\"n\">instance_type</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">num_nodes</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">provider</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">pool</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">autostop_mins</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">use_spot</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">region</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">memory</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">disk_size</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">num_cpus</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">gpus</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">open_ports</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">vpc_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">sky_kwargs</span><span class=\"p\">:</span> <span class=\"n\">Dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"c1\"># kubernetes related arguments</span>\n    <span class=\"n\">kube_namespace</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">kube_config_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">kube_context</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"c1\"># runhouse server arguments</span>\n    <span class=\"n\">server_port</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">server_host</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">server_connection_type</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">ServerConnectionType</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">ssl_keyfile</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">ssl_certfile</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">domain</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">image</span><span class=\"p\">:</span> <span class=\"n\">Image</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"c1\"># misc arguments</span>\n    <span class=\"n\">launcher</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">LauncherType</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">den_auth</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">load_from_den</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">dryrun</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n<span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Builds an instance of :class:`OnDemandCluster`.</span>\n\n<span class=\"sd\">    * If Cluster with same name is found in Den and ``load_from_den`` is ``True``, load it down from Den</span>\n<span class=\"sd\">    * If launch arguments are mismatched with loaded Cluster, return a new Cluster with the provided args.</span>\n<span class=\"sd\">      These args are passed through to SkyPilot&#39;s `Resource constructor</span>\n<span class=\"sd\">      &lt;https://skypilot.readthedocs.io/en/latest/reference/api.html#resources&gt;`__: ``instance_type``,</span>\n<span class=\"sd\">      ``num_nodes``, ``provider``, ``use_spot``, ``region``, ``memory``, ``disk_size``, ``num_cpus``,</span>\n<span class=\"sd\">      ``gpus`` (``accelerators``), ``open_ports``, ``autostop_mins``, ``sky_kwargs``.</span>\n<span class=\"sd\">    * If runhouse related arguments are mismatched with loaded Cluster, override those Cluster properties</span>\n\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        name (str): Name for the cluster, to re-use later on.</span>\n<span class=\"sd\">        instance_type (int, optional): Type of cloud VM type to use for the cluster, e.g. &quot;r5d.xlarge&quot;.</span>\n<span class=\"sd\">            Optional, as may instead choose to specify resource requirements (e.g. memory, disk_size,</span>\n<span class=\"sd\">            num_cpus, gpus).</span>\n<span class=\"sd\">        num_nodes (int, optional): Number of nodes to use for the cluster.</span>\n<span class=\"sd\">        provider (str, optional): Cloud provider to use for the cluster.</span>\n<span class=\"sd\">        pool (str, optional): Compute pool to use for the cluster.</span>\n<span class=\"sd\">        autostop_mins (int, optional): Number of minutes to keep the cluster up after inactivity,</span>\n<span class=\"sd\">            or ``-1`` to keep cluster up indefinitely. (Default: ``60``).</span>\n<span class=\"sd\">        use_spot (bool, optional): Whether or not to use spot instance. (Default: ``False``)</span>\n<span class=\"sd\">        region (str, optional): The region to use for the cluster. (Default: ``None``)</span>\n<span class=\"sd\">        memory (int or str, optional): Amount of memory to use for the cluster, e.g. `16` or &quot;16+&quot;.</span>\n<span class=\"sd\">            (Default: ``None``)</span>\n<span class=\"sd\">        disk_size (int, optional): Amount of disk space to use for the cluster in GiB, e.g. `100`.</span>\n<span class=\"sd\">            (Default: ``None``)</span>\n<span class=\"sd\">        num_cpus (int or str, optional): Number of CPUs to use for the cluster, e.g. `4` or &quot;4+&quot;. (Default: ``None``)</span>\n<span class=\"sd\">        gpus (int or str, optional): Type and number of GPU to use for the cluster e.g. &quot;A101&quot; or &quot;L4:8&quot;.</span>\n<span class=\"sd\">            (Default: ``None``)</span>\n<span class=\"sd\">        open_ports (int or str or List[int], optional): Ports to open in the cluster&#39;s security group. Note</span>\n<span class=\"sd\">            that you are responsible for ensuring that the applications listening on these ports are secure.</span>\n<span class=\"sd\">            (Default: ``None``)</span>\n<span class=\"sd\">        vpc_name (str, optional): Specific VPC used for launching the cluster. If not specified,</span>\n<span class=\"sd\">            cluster will be launched in the default VPC.</span>\n<span class=\"sd\">        sky_kwargs (dict, optional): Additional keyword arguments to pass to the SkyPilot `Resource` or `launch`</span>\n<span class=\"sd\">            APIs. Should be a dict of the form `{&quot;resources&quot;: {&lt;resources_kwargs&gt;}, &quot;launch&quot;: {&lt;launch_kwargs&gt;}}`,</span>\n<span class=\"sd\">            where resources_kwargs and launch_kwargs will be passed to the SkyPilot Resources API (See</span>\n<span class=\"sd\">            `SkyPilot docs &lt;https://skypilot.readthedocs.io/en/latest/reference/api.html#resources&gt;`__) and `launch`</span>\n<span class=\"sd\">            API (See `SkyPilot docs &lt;https://skypilot.readthedocs.io/en/latest/reference/api.html#sky-launch&gt;`__),</span>\n<span class=\"sd\">            respectively. Duplicating arguments passed to the `ondemand_cluster` factory method will raise an error.</span>\n<span class=\"sd\">            (Default: ``None``)</span>\n<span class=\"sd\">        kube_namespace (str, optional): Namespace for kubernetes cluster, if applicable. (Default: ``None``)</span>\n<span class=\"sd\">        kube_config_path (str, optional): Path to the kube_config, for a kubernetes cluster. (Default: ``None``)</span>\n<span class=\"sd\">        kube_context (str, optional): Context for kubernetes cluster, if applicable. (Default: ``None``)</span>\n<span class=\"sd\">        server_port (bool, optional): Port to use for the server. If not provided will use 80 for a</span>\n<span class=\"sd\">            ``server_connection_type`` of ``none``, 443 for ``tls`` and ``32300`` for all other SSH connection types.</span>\n<span class=\"sd\">            (Default: ``None``)</span>\n<span class=\"sd\">        server_host (bool, optional): Host from which the server listens for traffic (i.e. the --host argument</span>\n<span class=\"sd\">            `runhouse server start` run on the cluster). Defaults to &quot;0.0.0.0&quot; unless connecting to the server with an SSH</span>\n<span class=\"sd\">            connection, in which case ``localhost`` is used. (Default: ``None``)</span>\n<span class=\"sd\">        server_connection_type (ServerConnectionType or str, optional): Type of connection to use for the Runhouse</span>\n<span class=\"sd\">            API server. ``ssh`` will use start with server via an SSH tunnel. ``tls`` will start the server</span>\n<span class=\"sd\">            with HTTPS on port 443 using TLS certs without an SSH tunnel. ``none`` will start the server with HTTP</span>\n<span class=\"sd\">            without an SSH tunnel. (Default: ``None``)</span>\n<span class=\"sd\">        launcher (LauncherType or str, optional): Method for launching the cluster. If set to `local`, will launch</span>\n<span class=\"sd\">            locally via Sky. If set to `den`, launching will be handled by Runhouse. If not provided, will be set</span>\n<span class=\"sd\">            to your configured default launcher, which defaults to ``local``. (Default: ``None``)</span>\n<span class=\"sd\">        ssl_keyfile(str, optional): Path to SSL key file to use for launching the API server with HTTPS. (Default:</span>\n<span class=\"sd\">            ``None``)</span>\n<span class=\"sd\">        ssl_certfile (str, optional): Path to SSL certificate file to use for launching the API server with HTTPS.</span>\n<span class=\"sd\">            (Default: ``None``)</span>\n<span class=\"sd\">        domain (str, optional): Domain name for the cluster. Relevant if enabling HTTPs on the cluster.</span>\n<span class=\"sd\">            (Default: ``None``)</span>\n<span class=\"sd\">        image (Image, optional): Default image containing setup steps to run during cluster setup. See :class:`Image`.</span>\n<span class=\"sd\">            (Default: ``None``)</span>\n<span class=\"sd\">        den_auth (bool, optional): Whether to use Den authorization on the server. If ``True``, will validate incoming</span>\n<span class=\"sd\">            requests with a Runhouse token provided in the auth headers of the request with the format:</span>\n<span class=\"sd\">            ``{&quot;Authorization&quot;: &quot;Bearer &lt;token&gt;&quot;}``. (Default: ``None``).</span>\n<span class=\"sd\">        load_from_den (bool): Whether to try loading the Cluster resource from Den. (Default: ``True``)</span>\n<span class=\"sd\">        dryrun (bool): Whether to create the Cluster if it doesn&#39;t exist, or load a Cluster object as a dryrun.</span>\n<span class=\"sd\">            (Default: ``False``)</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        OnDemandCluster: The resulting cluster.</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # On-Demand SkyPilot Cluster (OnDemandCluster)</span>\n<span class=\"sd\">        &gt;&gt;&gt; gpu = rh.ondemand_cluster(name=&#39;rh-4-a100s&#39;,</span>\n<span class=\"sd\">        &gt;&gt;&gt;                  instance_type=&#39;A100:4&#39;,</span>\n<span class=\"sd\">        &gt;&gt;&gt;                  provider=&#39;gcp&#39;,</span>\n<span class=\"sd\">        &gt;&gt;&gt;                  autostop_mins=-1,</span>\n<span class=\"sd\">        &gt;&gt;&gt;                  use_spot=True,</span>\n<span class=\"sd\">        &gt;&gt;&gt;                  region=&#39;us-east-1&#39;,</span>\n<span class=\"sd\">        &gt;&gt;&gt;                  ).save()</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; # Load cluster from above</span>\n<span class=\"sd\">        &gt;&gt;&gt; reloaded_cluster = rh.ondemand_cluster(name=&quot;rh-4-a100s&quot;)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">cluster_args</span> <span class=\"o\">=</span> <span class=\"nb\">locals</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n    <span class=\"n\">cluster_args</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"n\">v</span> <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">cluster_args</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">v</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">pool</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">cluster_args</span><span class=\"p\">[</span><span class=\"s2\">&quot;launcher&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;den&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">autostop_mins</span> <span class=\"ow\">and</span> <span class=\"n\">autostop_mins</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">&quot;Cannot set autostop for a node in a compute pool.&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">cluster_args</span><span class=\"p\">[</span><span class=\"s2\">&quot;autostop_mins&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n\n        <span class=\"n\">ignored_fields</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;provider&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;region&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;vpc_name&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;domain&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;den_auth&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;use_spot&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;ssl_keyfile&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;ssl_certfile&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;server_host&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;server_connection_type&quot;</span><span class=\"p\">}</span>\n        <span class=\"k\">for</span> <span class=\"n\">field</span> <span class=\"ow\">in</span> <span class=\"n\">ignored_fields</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">cluster_args</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"p\">):</span>\n                <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Ignoring &#39;</span><span class=\"si\">{</span><span class=\"n\">field</span><span class=\"si\">}</span><span class=\"s2\">&#39; argument when pool is provided&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">cluster_args</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">new_cluster</span> <span class=\"o\">=</span> <span class=\"n\">Cluster</span><span class=\"o\">.</span><span class=\"n\">from_name</span><span class=\"p\">(</span>\n            <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">load_from_den</span><span class=\"o\">=</span><span class=\"n\">load_from_den</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">cluster_type</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;ondemand&quot;</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ValueError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"n\">new_cluster</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">cluster_type</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;unsaved&quot;</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">cluster_args</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;use_spot&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;load_from_den&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;dryrun&quot;</span><span class=\"p\">}:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">e</span>\n\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">cluster_args</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;launcher&quot;</span><span class=\"p\">):</span>\n        <span class=\"n\">cluster_args</span><span class=\"p\">[</span><span class=\"s2\">&quot;launcher&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">new_cluster</span><span class=\"o\">.</span><span class=\"n\">launcher</span> <span class=\"ow\">or</span> <span class=\"n\">configs</span><span class=\"o\">.</span><span class=\"n\">launcher</span>\n    <span class=\"n\">cluster_args</span><span class=\"p\">[</span><span class=\"s2\">&quot;launcher&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">cluster_args</span><span class=\"p\">[</span><span class=\"s2\">&quot;launcher&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"n\">cluster_args</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;launcher&quot;</span><span class=\"p\">)</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">LauncherType</span><span class=\"o\">.</span><span class=\"n\">strings</span><span class=\"p\">():</span>\n        <span class=\"n\">launcher</span> <span class=\"o\">=</span> <span class=\"n\">cluster_args</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;launcher&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n            <span class=\"sa\">f</span><span class=\"s2\">&quot;Invalid launcher type &#39;</span><span class=\"si\">{</span><span class=\"n\">launcher</span><span class=\"si\">}</span><span class=\"s2\">&#39;. Must be one of </span><span class=\"si\">{</span><span class=\"n\">LauncherType</span><span class=\"o\">.</span><span class=\"n\">strings</span><span class=\"p\">()</span><span class=\"si\">}</span><span class=\"s2\">.&quot;</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">vpc_name</span> <span class=\"ow\">and</span> <span class=\"n\">cluster_args</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;launcher&quot;</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;local&quot;</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;Custom VPCs are not supported with local launching. To use a custom VPC, please use the &quot;</span>\n            <span class=\"s2\">&quot;Den launcher. For more information see &quot;</span>\n            <span class=\"s2\">&quot;https://www.run.house/docs/installation-setup#den-launcher&quot;</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">cluster_args</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span> <span class=\"o\">&amp;</span> <span class=\"n\">KUBERNETES_CLUSTER_ARGS</span><span class=\"p\">:</span>\n        <span class=\"n\">setup_kubernetes</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">cluster_args</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">cluster_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;unsaved&quot;</span><span class=\"p\">:</span>\n        <span class=\"n\">new_cluster</span> <span class=\"o\">=</span> <span class=\"n\">OnDemandCluster</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">cluster_args</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">cluster_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;ondemand&quot;</span><span class=\"p\">:</span>\n        <span class=\"n\">mismatches</span> <span class=\"o\">=</span> <span class=\"n\">_config_and_args_mismatches</span><span class=\"p\">(</span><span class=\"n\">new_cluster</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">(),</span> <span class=\"n\">cluster_args</span><span class=\"p\">)</span>\n        <span class=\"n\">compute_mismatches</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"n\">v</span>\n            <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">mismatches</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"p\">{</span><span class=\"o\">*</span><span class=\"n\">ONDEMAND_COMPUTE_ARGS</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">KUBERNETES_CLUSTER_ARGS</span><span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">server_mismatches</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"n\">v</span> <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">mismatches</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"n\">RH_SERVER_ARGS</span><span class=\"p\">}</span>\n        <span class=\"n\">new_autostop_mins</span> <span class=\"o\">=</span> <span class=\"n\">compute_mismatches</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;autostop_mins&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">mismatches</span> <span class=\"ow\">and</span> <span class=\"n\">new_cluster</span><span class=\"o\">.</span><span class=\"n\">is_up</span><span class=\"p\">():</span>\n            <span class=\"c1\"># cluster is up - throw error if launch compute mismatches, but allow server / autostop min updates</span>\n            <span class=\"k\">if</span> <span class=\"n\">compute_mismatches</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;Cluster </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\"> is up, but received argument mismatches for compute: </span><span class=\"si\">{</span><span class=\"n\">compute_mismatches</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span><span class=\"si\">}</span><span class=\"s2\">. &quot;</span>\n                    <span class=\"s2\">&quot;Please construct a new cluster object or ensure that the arguments match.&quot;</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">new_autostop_mins</span><span class=\"p\">:</span>\n                <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Updating autostop mins for cluster </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">new_cluster</span><span class=\"o\">.</span><span class=\"n\">autostop_mins</span> <span class=\"o\">=</span> <span class=\"n\">new_autostop_mins</span>\n            <span class=\"k\">if</span> <span class=\"n\">server_mismatches</span><span class=\"p\">:</span>\n                <span class=\"n\">new_cluster</span><span class=\"o\">.</span><span class=\"n\">_update_values</span><span class=\"p\">(</span><span class=\"n\">server_mismatches</span><span class=\"p\">)</span>\n                <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;Runhouse server setting has been updated. Please run `cluster.restart_server()` &quot;</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;to apply new server settings for </span><span class=\"si\">{</span><span class=\"n\">server_mismatches</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n                <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># cluster is down</span>\n            <span class=\"c1\"># - construct new cluster if launch compute mismatches</span>\n            <span class=\"c1\"># - if compute matches/empty but server or autostop mismatches, override just those values</span>\n            <span class=\"k\">if</span> <span class=\"n\">compute_mismatches</span><span class=\"p\">:</span>\n                <span class=\"n\">new_cluster</span> <span class=\"o\">=</span> <span class=\"n\">OnDemandCluster</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">cluster_args</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"n\">server_mismatches</span><span class=\"p\">:</span>\n                <span class=\"n\">new_cluster</span><span class=\"o\">.</span><span class=\"n\">_update_values</span><span class=\"p\">(</span><span class=\"n\">server_mismatches</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">new_autostop_mins</span><span class=\"p\">:</span>\n                <span class=\"n\">new_cluster</span><span class=\"o\">.</span><span class=\"n\">_autostop_mins</span> <span class=\"o\">=</span> <span class=\"n\">new_autostop_mins</span>\n\n    <span class=\"n\">new_cluster</span><span class=\"o\">.</span><span class=\"n\">_set_connection_defaults</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"n\">den_auth</span><span class=\"p\">:</span>\n        <span class=\"n\">new_cluster</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">new_cluster</span></div>\n</pre></div>", "current_page_name": "_modules/runhouse/resources/hardware/cluster_factory", "sidebars": ["about.html", "navigation.html", "relations.html", "searchbox.html", "donate.html"], "customsidebar": null, "alabaster_version": "0.7.16", "alabaster_version_info": [0, 7, 16]}