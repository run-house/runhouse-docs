{"parents": [{"link": "../../../", "title": "Module code"}], "title": "runhouse.resources.module", "body": "<h1>Source code for runhouse.resources.module</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">copy</span>\n<span class=\"kn\">import</span> <span class=\"nn\">importlib</span>\n<span class=\"kn\">import</span> <span class=\"nn\">inspect</span>\n<span class=\"kn\">import</span> <span class=\"nn\">site</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">from</span> <span class=\"nn\">concurrent.futures</span> <span class=\"kn\">import</span> <span class=\"n\">ThreadPoolExecutor</span>\n<span class=\"kn\">from</span> <span class=\"nn\">importlib</span> <span class=\"kn\">import</span> <span class=\"n\">reload</span> <span class=\"k\">as</span> <span class=\"n\">importlib_reload</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">,</span> <span class=\"n\">Type</span><span class=\"p\">,</span> <span class=\"n\">Union</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">apispec</span> <span class=\"kn\">import</span> <span class=\"n\">APISpec</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pydantic</span> <span class=\"kn\">import</span> <span class=\"n\">create_model</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.globals</span> <span class=\"kn\">import</span> <span class=\"n\">obj_store</span><span class=\"p\">,</span> <span class=\"n\">rns_client</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.logger</span> <span class=\"kn\">import</span> <span class=\"n\">get_logger</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.envs</span> <span class=\"kn\">import</span> <span class=\"n\">_get_env_from</span><span class=\"p\">,</span> <span class=\"n\">Env</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.hardware</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">_current_cluster</span><span class=\"p\">,</span>\n    <span class=\"n\">_default_env_if_on_cluster</span><span class=\"p\">,</span>\n    <span class=\"n\">_get_cluster_from</span><span class=\"p\">,</span>\n    <span class=\"n\">Cluster</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.packages</span> <span class=\"kn\">import</span> <span class=\"n\">Package</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.resource</span> <span class=\"kn\">import</span> <span class=\"n\">Resource</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.rns.utils.api</span> <span class=\"kn\">import</span> <span class=\"n\">ResourceAccess</span><span class=\"p\">,</span> <span class=\"n\">ResourceVisibility</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.servers.http</span> <span class=\"kn\">import</span> <span class=\"n\">HTTPClient</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.servers.http.http_utils</span> <span class=\"kn\">import</span> <span class=\"n\">CallParams</span>\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.utils</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">client_call_wrapper</span><span class=\"p\">,</span>\n    <span class=\"n\">generate_default_name</span><span class=\"p\">,</span>\n    <span class=\"n\">get_module_import_info</span><span class=\"p\">,</span>\n    <span class=\"n\">locate_working_dir</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n\n<span class=\"c1\"># These are attributes that the Module&#39;s __getattribute__ logic should not intercept to run remotely</span>\n<span class=\"c1\"># and values that shouldn&#39;t be passed as state in put_resource</span>\n<span class=\"n\">MODULE_ATTRS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s2\">&quot;_pointers&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;_endpoint&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;_client&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;_visibility&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;_env&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;_name&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;_rns_folder&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;_system&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;dryrun&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;_resolve&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;_signature&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;_dumb_signature_cache&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">get_logger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"Module\"><a class=\"viewcode-back\" href=\"../../../../api/python/module/#runhouse.Module\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Module</span><span class=\"p\">(</span><span class=\"n\">Resource</span><span class=\"p\">):</span>\n    <span class=\"n\">RESOURCE_TYPE</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;module&quot;</span>\n\n<div class=\"viewcode-block\" id=\"Module.__init__\"><a class=\"viewcode-back\" href=\"../../../../api/python/module/#runhouse.Module.__init__\">[docs]</a>    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">pointers</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">signature</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">endpoint</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">system</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Cluster</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Env</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">dryrun</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Runhouse Module object.</span>\n\n<span class=\"sd\">        .. note::</span>\n<span class=\"sd\">                To create a Module, please use the factory method :func:`module`.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_system</span> <span class=\"o\">=</span> <span class=\"n\">_get_cluster_from</span><span class=\"p\">(</span>\n            <span class=\"n\">system</span> <span class=\"ow\">or</span> <span class=\"n\">_current_cluster</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s2\">&quot;config&quot;</span><span class=\"p\">),</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_env</span> <span class=\"o\">=</span> <span class=\"n\">env</span>\n        <span class=\"n\">is_builtin</span> <span class=\"o\">=</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"p\">[</span><span class=\"s2\">&quot;runhouse&quot;</span><span class=\"p\">],</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__qualname__</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># If there are no pointers and this isn&#39;t a builtin module, we assume this is a user-created subclass</span>\n        <span class=\"c1\"># of rh.Module, and we need to do the factory constructor logic here.</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">pointers</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">is_builtin</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_env</span><span class=\"p\">:</span>\n\n                <span class=\"n\">env_for_current_process</span> <span class=\"o\">=</span> <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">get_process_env</span><span class=\"p\">()</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_env</span> <span class=\"o\">=</span> <span class=\"n\">env_for_current_process</span> <span class=\"ow\">or</span> <span class=\"p\">(</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_system</span><span class=\"o\">.</span><span class=\"n\">default_env</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_system</span> <span class=\"k\">else</span> <span class=\"n\">Env</span><span class=\"p\">()</span>\n                <span class=\"p\">)</span>\n\n            <span class=\"c1\"># When creating a module as a subclass of rh.Module, we need to collect pointers here</span>\n            <span class=\"c1\"># If we&#39;re creating pointers, we&#39;re also local to the class definition and package, so it should be</span>\n            <span class=\"c1\"># set as the workdir (we can do this in a fancier way later)</span>\n            <span class=\"n\">pointers</span> <span class=\"o\">=</span> <span class=\"n\">Module</span><span class=\"o\">.</span><span class=\"n\">_extract_pointers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_env</span><span class=\"p\">,</span> <span class=\"n\">Env</span><span class=\"p\">):</span>\n                <span class=\"c1\"># Sometimes env may still be a string, in which case it won&#39;t be modified</span>\n                <span class=\"p\">(</span>\n                    <span class=\"n\">local_path_containing_module</span><span class=\"p\">,</span>\n                    <span class=\"n\">should_add</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">Module</span><span class=\"o\">.</span><span class=\"n\">_get_local_path_containing_module</span><span class=\"p\">(</span>\n                    <span class=\"n\">pointers</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_env</span><span class=\"o\">.</span><span class=\"n\">reqs</span>\n                <span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">should_add</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_env</span><span class=\"o\">.</span><span class=\"n\">reqs</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                        <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">local_path_containing_module</span><span class=\"p\">)</span>\n                    <span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_env</span><span class=\"o\">.</span><span class=\"n\">reqs</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pointers</span> <span class=\"o\">=</span> <span class=\"n\">pointers</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_endpoint</span> <span class=\"o\">=</span> <span class=\"n\">endpoint</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_signature</span> <span class=\"o\">=</span> <span class=\"n\">signature</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dumb_signature_cache</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_resolve</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_openapi_spec</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">config</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">condensed</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Cannot save an in-memory local module to RNS. Please send the module to a local &quot;</span>\n                <span class=\"s2\">&quot;path or system first.&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">(</span><span class=\"n\">condensed</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">:</span>\n            <span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_resource_string_for_subconfig</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">condensed</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;system&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">system</span>\n        <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;env&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_resource_string_for_subconfig</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"n\">condensed</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">env</span>\n            <span class=\"k\">else</span> <span class=\"kc\">None</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pointers</span><span class=\"p\">:</span>\n            <span class=\"c1\"># For some reason sometimes this is coming back as a string, so we force it into a tuple</span>\n            <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;pointers&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pointers</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># If not signature is set, we assume this is where the Module was created and we&#39;re local to its code.</span>\n        <span class=\"c1\"># We&#39;ll collect the signatures of all the methods here before saving or sending them somewhere.</span>\n        <span class=\"c1\"># Note that we even do this for built-in modules, because 1) we want their methods preserved in Den for when</span>\n        <span class=\"c1\"># they&#39;re called via HTTP and 2) we want to preserve the exact set of methods in case the methods on built-in</span>\n        <span class=\"c1\"># modules change across Runhouse versions.</span>\n        <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;signature&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">signature</span><span class=\"p\">(</span><span class=\"n\">rich</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Only save the endpoint if it&#39;s present in _endpoint or externally accessible</span>\n        <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;endpoint&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">endpoint</span><span class=\"p\">(</span><span class=\"n\">external</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_openapi_spec</span><span class=\"p\">:</span>\n            <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;openapi_spec&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_openapi_spec</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">config</span>\n\n<div class=\"viewcode-block\" id=\"Module.from_config\"><a class=\"viewcode-back\" href=\"../../../../api/python/module/#runhouse.Module.from_config\">[docs]</a>    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_config</span><span class=\"p\">(</span>\n        <span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">_resolve_children</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;pointers&quot;</span><span class=\"p\">):</span>\n            <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;resource_subtype&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Constructing module from pointers </span><span class=\"si\">{</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s1\">&#39;pointers&#39;</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n            <span class=\"p\">(</span><span class=\"n\">module_path</span><span class=\"p\">,</span> <span class=\"n\">module_name</span><span class=\"p\">,</span> <span class=\"n\">class_name</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;pointers&quot;</span><span class=\"p\">]</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">module_cls</span> <span class=\"o\">=</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">_get_obj_from_pointers</span><span class=\"p\">(</span>\n                    <span class=\"n\">module_path</span><span class=\"p\">,</span> <span class=\"n\">module_name</span><span class=\"p\">,</span> <span class=\"n\">class_name</span>\n                <span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">issubclass</span><span class=\"p\">(</span><span class=\"n\">module_cls</span><span class=\"p\">,</span> <span class=\"n\">Module</span><span class=\"p\">):</span>\n                    <span class=\"c1\"># Case when module was created through rh.module(new_class) factory, and needs to be</span>\n                    <span class=\"c1\"># made into a subclass of rh.Module. We&#39;ll follow the same flow as the subclass-created module</span>\n                    <span class=\"c1\"># below, where we don&#39;t call __init__ explicitly, because __init__ will call the subclass&#39;s init</span>\n                    <span class=\"c1\"># and this may a &quot;type&quot; module rather than an &quot;instance&quot;. The user might instantiate it later, or</span>\n                    <span class=\"c1\"># it may be populated with attributes by the servlet&#39;s put_resource.</span>\n                    <span class=\"n\">module_cls</span> <span class=\"o\">=</span> <span class=\"n\">_module_subclass_factory</span><span class=\"p\">(</span>\n                        <span class=\"n\">module_cls</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;pointers&quot;</span><span class=\"p\">)</span>\n                    <span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">ModuleNotFoundError</span><span class=\"p\">,</span> <span class=\"ne\">ImportError</span><span class=\"p\">,</span> <span class=\"ne\">AttributeError</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"ne\">ModuleNotFoundError</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">module_name</span> <span class=\"ow\">in</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">))</span> <span class=\"ow\">or</span> <span class=\"p\">(</span>\n                    <span class=\"p\">(</span><span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"ne\">ImportError</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">class_name</span> <span class=\"ow\">in</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">))</span>\n                    <span class=\"ow\">or</span> <span class=\"p\">(</span><span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"ne\">AttributeError</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">class_name</span> <span class=\"ow\">in</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">))</span>\n                <span class=\"p\">):</span>\n                    <span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;system&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n                    <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;env&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n                    <span class=\"n\">env_name</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                        <span class=\"n\">env</span>\n                        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)</span>\n                        <span class=\"k\">else</span> <span class=\"n\">env</span><span class=\"p\">[</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">]</span>\n                        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">)</span>\n                        <span class=\"k\">else</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">name</span>\n                        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"n\">Env</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">name</span>\n                        <span class=\"k\">else</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">default_env</span><span class=\"o\">.</span><span class=\"n\">name</span>\n                        <span class=\"k\">if</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">default_env</span>\n                        <span class=\"k\">else</span> <span class=\"kc\">None</span>\n                    <span class=\"p\">)</span>\n\n                    <span class=\"c1\"># If we are on the same cluster, and in the env where the module lives, we should be able to</span>\n                    <span class=\"c1\"># load the module from the pointers. So, we should just raise the exception if this is the case.</span>\n                    <span class=\"k\">if</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">()</span> <span class=\"ow\">and</span> <span class=\"p\">(</span>\n                        <span class=\"n\">env_name</span> <span class=\"o\">==</span> <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">servlet_name</span>\n                        <span class=\"ow\">and</span> <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">has_local_storage</span>\n                    <span class=\"p\">):</span>\n                        <span class=\"c1\"># Could not load Module locally from within the system where it lives</span>\n                        <span class=\"k\">raise</span> <span class=\"n\">e</span>\n\n                    <span class=\"c1\"># If we fail to construct the module class from the pointers, but system is elsewhere,</span>\n                    <span class=\"c1\"># we can still use this module from its signature alone.</span>\n                    <span class=\"n\">module_cls</span> <span class=\"o\">=</span> <span class=\"n\">Module</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># Other type of module or import error, such as dependency not installed</span>\n                    <span class=\"k\">raise</span> <span class=\"n\">e</span>\n\n            <span class=\"c1\"># Module created as subclass of rh.Module may not have rh.Module&#39;s</span>\n            <span class=\"c1\"># constructor signature (e.g. system, env, etc.), so assign them manually</span>\n            <span class=\"c1\"># We don&#39;t call __init__ here because we don&#39;t know the signature of the subclass&#39;s __init__</span>\n            <span class=\"c1\"># If this resource was put on a cluster with put_resource, the servlet will be populating the rest</span>\n            <span class=\"c1\"># of the class-specific attributes.</span>\n            <span class=\"n\">new_module</span> <span class=\"o\">=</span> <span class=\"n\">module_cls</span><span class=\"o\">.</span><span class=\"fm\">__new__</span><span class=\"p\">(</span><span class=\"n\">module_cls</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">_resolve_children</span><span class=\"p\">:</span>\n                <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">module_cls</span><span class=\"o\">.</span><span class=\"n\">_check_for_child_configs</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n            <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;system&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n            <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;env&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n            <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n            <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">access_level</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;access_level&quot;</span><span class=\"p\">,</span> <span class=\"n\">ResourceAccess</span><span class=\"o\">.</span><span class=\"n\">WRITE</span><span class=\"p\">)</span>\n            <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">visibility</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;visibility&quot;</span><span class=\"p\">,</span> <span class=\"n\">ResourceVisibility</span><span class=\"o\">.</span><span class=\"n\">PRIVATE</span><span class=\"p\">)</span>\n            <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">_endpoint</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;endpoint&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n            <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">_pointers</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;pointers&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n            <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">_signature</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;signature&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n            <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">dryrun</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;dryrun&quot;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n            <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">_openapi_spec</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;openapi_spec&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">new_module</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;resource_subtype&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;module&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">Module</span><span class=\"o\">.</span><span class=\"n\">_check_for_child_configs</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">Module</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># If there are no class pointers, we assume the module is a built-in rh.Module subclass</span>\n        <span class=\"n\">resource_class</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span>\n            <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"p\">[</span><span class=\"s2\">&quot;runhouse&quot;</span><span class=\"p\">],</span>\n            <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;resource_subtype&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">capitalize</span><span class=\"p\">(),</span>\n            <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">resource_class</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;Could not find module associated with </span><span class=\"si\">{</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s1\">&#39;resource_subtype&#39;</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">resource_class</span><span class=\"o\">.</span><span class=\"n\">_check_for_child_configs</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">resource_class</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span></div>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_check_for_child_configs</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Overload by child resources to load any resources they hold internally.&quot;&quot;&quot;</span>\n        <span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;system&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n            <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;system&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">_get_cluster_from</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">)</span>\n        <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;env&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n            <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;env&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">_get_env_from</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">config</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">system</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_system</span>\n\n    <span class=\"nd\">@system</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">system</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">new_system</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">]):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_system</span> <span class=\"o\">=</span> <span class=\"n\">_get_cluster_from</span><span class=\"p\">(</span><span class=\"n\">new_system</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">env</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_env</span>\n\n    <span class=\"nd\">@env</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">env</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">new_env</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Env</span><span class=\"p\">]]):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_env</span> <span class=\"o\">=</span> <span class=\"n\">_get_env_from</span><span class=\"p\">(</span><span class=\"n\">new_env</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_compute_signature</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">rich</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">method_signature</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">rich</span> <span class=\"k\">else</span> <span class=\"kc\">None</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">getmembers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">name</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;_&quot;</span>\n            <span class=\"ow\">and</span> <span class=\"n\">name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">MODULE_ATTRS</span>\n            <span class=\"ow\">and</span> <span class=\"n\">name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">MODULE_METHODS</span>\n            <span class=\"ow\">and</span> <span class=\"nb\">callable</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"p\">)</span>\n            <span class=\"c1\"># Checks if there&#39;s an arg called &quot;local&quot; in the method signature, and if so, if it&#39;s default is True.</span>\n            <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span>\n                <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">signature</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">parameters</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;local&quot;</span><span class=\"p\">),</span> <span class=\"s2\">&quot;default&quot;</span><span class=\"p\">,</span> <span class=\"kc\">False</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">signature</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">rich</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_signature</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_signature</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">rich</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dumb_signature_cache</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dumb_signature_cache</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_compute_signature</span><span class=\"p\">(</span><span class=\"n\">rich</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dumb_signature_cache</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_signature</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_compute_signature</span><span class=\"p\">(</span><span class=\"n\">rich</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_signature</span>\n\n<div class=\"viewcode-block\" id=\"Module.method_signature\"><a class=\"viewcode-back\" href=\"../../../../api/python/module/#runhouse.Module.method_signature\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">method_signature</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Method signature, consisting of method properties to preserve when sending the method over the wire.&quot;&quot;&quot;</span>\n        <span class=\"n\">signature</span> <span class=\"o\">=</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">signature</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"p\">)</span>\n        <span class=\"n\">signature_metadata</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;signature&quot;</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">signature</span><span class=\"p\">),</span>\n            <span class=\"s2\">&quot;async&quot;</span><span class=\"p\">:</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">iscoroutinefunction</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"p\">)</span>\n            <span class=\"ow\">or</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">isasyncgenfunction</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"p\">),</span>\n            <span class=\"s2\">&quot;gen&quot;</span><span class=\"p\">:</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">isgeneratorfunction</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"p\">)</span>\n            <span class=\"ow\">or</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">isasyncgenfunction</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"p\">),</span>\n            <span class=\"s2\">&quot;doc&quot;</span><span class=\"p\">:</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">getdoc</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">method</span><span class=\"o\">.</span><span class=\"vm\">__doc__</span> <span class=\"k\">else</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;annotations&quot;</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">getfullargspec</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">annotations</span><span class=\"p\">),</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">signature_metadata</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_signature_extensions</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;A way to manually extend the methods behind names in the signature. We can&#39;t use __getattr__</span>\n<span class=\"sd\">        because it gets too crazy and circular with the overloaded __getattribute__ below.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n<div class=\"viewcode-block\" id=\"Module.endpoint\"><a class=\"viewcode-back\" href=\"../../../../api/python/module/#runhouse.Module.endpoint\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">endpoint</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">external</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;The endpoint of the module on the cluster. Returns an endpoint if one was manually set (e.g. if loaded</span>\n<span class=\"sd\">        down from a config). If not, request the endpoint from the Module&#39;s system.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            external (bool, optional): If True and getting the endpoint from the system, only return an endpoint if</span>\n<span class=\"sd\">                it&#39;s externally accessible (i.e. not on localhost, not connected through as ssh tunnel). If False,</span>\n<span class=\"sd\">                return the endpoint even if it&#39;s not externally accessible. (Default: ``False``)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_endpoint</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_endpoint</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_system</span>\n            <span class=\"ow\">and</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_system</span><span class=\"p\">,</span> <span class=\"s2\">&quot;endpoint&quot;</span><span class=\"p\">)</span>\n            <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_system</span><span class=\"o\">.</span><span class=\"n\">endpoint</span><span class=\"p\">(</span><span class=\"n\">external</span><span class=\"o\">=</span><span class=\"n\">external</span><span class=\"p\">)</span>\n        <span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_system</span><span class=\"o\">.</span><span class=\"n\">endpoint</span><span class=\"p\">(</span><span class=\"n\">external</span><span class=\"o\">=</span><span class=\"n\">external</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n\n        <span class=\"k\">return</span> <span class=\"kc\">None</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">set_endpoint</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">new_endpoint</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_endpoint</span> <span class=\"o\">=</span> <span class=\"n\">new_endpoint</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_client</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Return the client through which to interact with the source-of-truth Module. If this module is local,</span>\n<span class=\"sd\">        i.e. this module is its own source of truth, return None.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_system&quot;</span><span class=\"p\">)</span>\n            <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_system</span>\n            <span class=\"ow\">and</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_system</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_client&quot;</span><span class=\"p\">)</span>\n        <span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_system</span><span class=\"o\">.</span><span class=\"n\">_client</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_endpoint&quot;</span><span class=\"p\">)</span>\n            <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_endpoint</span>\n            <span class=\"ow\">and</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_endpoint</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)</span>\n        <span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">HTTPClient</span><span class=\"o\">.</span><span class=\"n\">from_endpoint</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_endpoint</span><span class=\"p\">,</span> <span class=\"n\">resource_address</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rns_address</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_remote_init</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__bases__</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"n\">module_cls</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__bases__</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pointers</span><span class=\"p\">:</span>\n            <span class=\"p\">(</span><span class=\"n\">module_path</span><span class=\"p\">,</span> <span class=\"n\">module_name</span><span class=\"p\">,</span> <span class=\"n\">class_name</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pointers</span>\n            <span class=\"c1\"># Reload needs to be false here, because if we reload the class, the reloaded class actually doesn&#39;t</span>\n            <span class=\"c1\"># match the class object of which self was a subclass, so we can&#39;t call super().__init__ on it within</span>\n            <span class=\"c1\"># module_cls&#39;s __init__.</span>\n            <span class=\"c1\"># We&#39;d get &quot;TypeError: super(type, obj): obj must be an instance or subtype of type&quot;</span>\n            <span class=\"n\">module_cls</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_obj_from_pointers</span><span class=\"p\">(</span>\n                <span class=\"n\">module_path</span><span class=\"p\">,</span> <span class=\"n\">module_name</span><span class=\"p\">,</span> <span class=\"n\">class_name</span><span class=\"p\">,</span> <span class=\"n\">reload</span><span class=\"o\">=</span><span class=\"kc\">False</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">module_cls</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span>\n\n        <span class=\"c1\"># Change around the MRO so that the module_cls is the first parent class, and Module is the second,</span>\n        <span class=\"c1\"># so methods like .to default to the module_cls and not Module&#39;s when on the cluster.</span>\n        <span class=\"c1\"># This is a small price to pay for matching PyTorch&#39;s .to API. If it creates too much craziness we can</span>\n        <span class=\"c1\"># revisit.</span>\n        <span class=\"c1\"># class NewSubclass(module_cls, Module):</span>\n        <span class=\"c1\">#     pass</span>\n        <span class=\"c1\">#</span>\n        <span class=\"c1\"># self.__class__ = NewSubclass</span>\n\n        <span class=\"n\">module_cls</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_get_obj_from_pointers</span><span class=\"p\">(</span><span class=\"n\">module_path</span><span class=\"p\">,</span> <span class=\"n\">module_name</span><span class=\"p\">,</span> <span class=\"n\">obj_name</span><span class=\"p\">,</span> <span class=\"n\">reload</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Helper method to load a class or function from a module path, module name, and class name.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">module_path</span><span class=\"p\">:</span>\n            <span class=\"n\">abs_path</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">((</span><span class=\"n\">Path</span><span class=\"o\">.</span><span class=\"n\">home</span><span class=\"p\">()</span> <span class=\"o\">/</span> <span class=\"n\">module_path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">expanduser</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">resolve</span><span class=\"p\">())</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">abs_path</span><span class=\"p\">:</span>\n                <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Could not find module path </span><span class=\"si\">{</span><span class=\"n\">module_path</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"n\">abs_path</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">:</span>\n                <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">abs_path</span><span class=\"p\">)</span>\n                <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Appending </span><span class=\"si\">{</span><span class=\"n\">module_path</span><span class=\"si\">}</span><span class=\"s2\"> to sys.path&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># This updates the sys.path with any new paths that have been added since the last time we imported</span>\n        <span class=\"c1\"># e.g. if the user ran cluster.run([&quot;pip install my_package&quot;]) since this env was created.</span>\n        <span class=\"n\">importlib_reload</span><span class=\"p\">(</span><span class=\"n\">site</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">module_name</span> <span class=\"ow\">in</span> <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">imported_modules</span> <span class=\"ow\">and</span> <span class=\"n\">reload</span><span class=\"p\">:</span>\n            <span class=\"n\">importlib</span><span class=\"o\">.</span><span class=\"n\">invalidate_caches</span><span class=\"p\">()</span>\n            <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">imported_modules</span><span class=\"p\">[</span><span class=\"n\">module_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">importlib</span><span class=\"o\">.</span><span class=\"n\">reload</span><span class=\"p\">(</span>\n                <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">imported_modules</span><span class=\"p\">[</span><span class=\"n\">module_name</span><span class=\"p\">]</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Reloaded module </span><span class=\"si\">{</span><span class=\"n\">module_name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Importing module </span><span class=\"si\">{</span><span class=\"n\">module_name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">imported_modules</span><span class=\"p\">[</span><span class=\"n\">module_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">importlib</span><span class=\"o\">.</span><span class=\"n\">import_module</span><span class=\"p\">(</span>\n                <span class=\"n\">module_name</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">imported_modules</span><span class=\"p\">[</span><span class=\"n\">module_name</span><span class=\"p\">],</span> <span class=\"n\">obj_name</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_extract_state</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Exclude anything already being sent in the config and private module attributes</span>\n        <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"c1\"># We only send over state for instances, not classes</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">):</span>\n            <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                <span class=\"n\">attr</span><span class=\"p\">:</span> <span class=\"n\">val</span>\n                <span class=\"k\">for</span> <span class=\"n\">attr</span><span class=\"p\">,</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span>\n                <span class=\"k\">if</span> <span class=\"n\">attr</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">MODULE_ATTRS</span> <span class=\"ow\">and</span> <span class=\"n\">attr</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">MODULE_METHODS</span>\n            <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">state</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">default_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pointers</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pointers</span> <span class=\"k\">else</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">generate_default_name</span><span class=\"p\">(</span>\n            <span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__qualname__</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>\n        <span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"Module.to\"><a class=\"viewcode-back\" href=\"../../../../api/python/module/#runhouse.Module.to\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">to</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">system</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">],</span>\n        <span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">Env</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">force_install</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Put a copy of the module on the destination system and env, and return the new module.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            system (str or Cluster): The system to setup the module and env on.</span>\n<span class=\"sd\">            env (str, List[str], or Env, optional): The environment where the module lives on in the cluster,</span>\n<span class=\"sd\">                or the set of requirements necessary to run the module. (Default: ``None``)</span>\n<span class=\"sd\">            name (Optional[str], optional): Name to give to the module resource, if you wish to rename it.</span>\n<span class=\"sd\">                (Default: ``None``)</span>\n<span class=\"sd\">            force_install (bool, optional): Whether to re-install and perform the environment setup steps, even</span>\n<span class=\"sd\">                if it may already exist on the cluster. (Defualt: ``False``)</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; local_module = rh.module(my_class)</span>\n<span class=\"sd\">            &gt;&gt;&gt; cluster_module = local_module.to(&quot;my_cluster&quot;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">system</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span> <span class=\"ow\">and</span> <span class=\"n\">env</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">env</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n                <span class=\"c1\"># TODO return duplicate object under new name, don&#39;t rename</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rename</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">system</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;here&quot;</span><span class=\"p\">:</span>\n            <span class=\"kn\">from</span> <span class=\"nn\">runhouse</span> <span class=\"kn\">import</span> <span class=\"n\">here</span>\n\n            <span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"n\">here</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">system</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;file&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Need an initialized local server in order to put a module onto `rh.here`. Please run `runhouse server restart` first on your local machine.&quot;</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"n\">_get_cluster_from</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dryrun</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">system</span> <span class=\"k\">else</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">env</span> <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">env</span> <span class=\"k\">else</span> <span class=\"n\">env</span>\n        <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">_get_env_from</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"n\">load</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># We need to change the pointers to the remote import path if we&#39;re sending this module to a remote cluster,</span>\n        <span class=\"c1\"># and we need to add the local path to the module to the requirements if it&#39;s not already there.</span>\n        <span class=\"n\">remote_import_path</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"n\">env</span>\n            <span class=\"ow\">and</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"n\">Env</span><span class=\"p\">)</span>\n            <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pointers</span> <span class=\"ow\">or</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s2\">&quot;fn_pointers&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">))</span>\n        <span class=\"p\">):</span>\n            <span class=\"n\">pointers</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pointers</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pointers</span> <span class=\"k\">else</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fn_pointers</span>\n\n            <span class=\"c1\"># Update the envs reqs with the local path to the module if it&#39;s not already there</span>\n            <span class=\"p\">(</span>\n                <span class=\"n\">local_path_containing_module</span><span class=\"p\">,</span>\n                <span class=\"n\">should_add</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">Module</span><span class=\"o\">.</span><span class=\"n\">_get_local_path_containing_module</span><span class=\"p\">(</span><span class=\"n\">pointers</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">reqs</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">should_add</span><span class=\"p\">:</span>\n                <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">reqs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">local_path_containing_module</span><span class=\"p\">)]</span> <span class=\"o\">+</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">reqs</span>\n\n            <span class=\"c1\"># Figure out what the import path would be on the remote system</span>\n            <span class=\"n\">remote_import_path</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span>\n                <span class=\"n\">local_path_containing_module</span><span class=\"o\">.</span><span class=\"n\">name</span>\n                <span class=\"o\">/</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">pointers</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">relative_to</span><span class=\"p\">(</span><span class=\"n\">local_path_containing_module</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">system</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"n\">Env</span><span class=\"p\">):</span>\n                <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">force_install</span><span class=\"o\">=</span><span class=\"n\">force_install</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"n\">Env</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">:</span>\n                <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">default_env</span>\n\n        <span class=\"c1\"># We need to backup the system here so the __getstate__ method of the cluster</span>\n        <span class=\"c1\"># doesn&#39;t wipe the client of this function&#39;s cluster when deepcopy copies it.</span>\n        <span class=\"n\">hw_backup</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">new_module</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"n\">hw_backup</span>\n\n        <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"n\">system</span>\n        <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">default_env</span>\n            <span class=\"k\">if</span> <span class=\"n\">system</span> <span class=\"ow\">and</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"n\">Env</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">name</span>\n            <span class=\"k\">else</span> <span class=\"n\">env</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">dryrun</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n        <span class=\"c1\"># Set remote import path</span>\n        <span class=\"k\">if</span> <span class=\"n\">remote_import_path</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">_pointers</span><span class=\"p\">:</span>\n                <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">_pointers</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                    <span class=\"n\">remote_import_path</span><span class=\"p\">,</span>\n                    <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">_pointers</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n                    <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">_pointers</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">fn_pointers</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                    <span class=\"n\">remote_import_path</span><span class=\"p\">,</span>\n                    <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">fn_pointers</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n                    <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">fn_pointers</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span>\n                <span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">):</span>\n            <span class=\"n\">new_name</span> <span class=\"o\">=</span> <span class=\"n\">name</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">default_name</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rns_address</span><span class=\"p\">:</span>\n                <span class=\"n\">new_name</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_rns_folder</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">{</span><span class=\"n\">new_name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n            <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">new_name</span>\n            <span class=\"c1\"># TODO dedup with _extract_state</span>\n            <span class=\"c1\"># Exclude anything already being sent in the config and private module attributes</span>\n            <span class=\"n\">excluded_state_keys</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span> <span class=\"o\">+</span> <span class=\"n\">MODULE_ATTRS</span>\n            <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n            <span class=\"c1\"># We only send over state for instances, not classes</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">):</span>\n                <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                    <span class=\"n\">attr</span><span class=\"p\">:</span> <span class=\"n\">val</span>\n                    <span class=\"k\">for</span> <span class=\"n\">attr</span><span class=\"p\">,</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span>\n                    <span class=\"k\">if</span> <span class=\"n\">attr</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">excluded_state_keys</span>\n                <span class=\"p\">}</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;Sending module </span><span class=\"si\">{</span><span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\"> of type </span><span class=\"si\">{</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">new_module</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\"> to </span><span class=\"si\">{</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"ow\">or</span><span class=\"w\"> </span><span class=\"s1\">&#39;local Runhouse daemon&#39;</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">put_resource</span><span class=\"p\">(</span><span class=\"n\">new_module</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">autosave_resources</span><span class=\"p\">():</span>\n            <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">new_module</span></div>\n\n<div class=\"viewcode-block\" id=\"Module.get_or_to\"><a class=\"viewcode-back\" href=\"../../../../api/python/module/#runhouse.Module.get_or_to\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_or_to</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">system</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">],</span>\n        <span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">Env</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Check if the module already exists on the cluster, and if so return the module object.</span>\n<span class=\"sd\">        If not, put the module on the cluster and return the remote module.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            system (str or Cluster): The system to setup the module and env on.</span>\n<span class=\"sd\">            env (str, List[str], or Env, optional): The environment where the module lives on in the cluster,</span>\n<span class=\"sd\">                or the set of requirements necessary to run the module. (Default: ``None``)</span>\n<span class=\"sd\">            name (Optional[str], optional): Name to give to the module resource, if you wish to rename it.</span>\n<span class=\"sd\">                (Default: ``None``)</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; remote_df = Model().get_or_to(my_cluster, name=&quot;remote_model&quot;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"ow\">or</span> <span class=\"n\">name</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;You must specify a name for the module if you want to get_or_to it.&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"n\">_get_cluster_from</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">)</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">remote</span> <span class=\"o\">=</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">remote</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n            <span class=\"n\">remote</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"n\">remote</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">remote</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"p\">)</span></div>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Override to allow for remote execution if system is a remote cluster. If not, the subclass&#39;s own</span>\n<span class=\"sd\">        __getattr__ will be called.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">MODULE_METHODS</span>\n            <span class=\"ow\">or</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">MODULE_ATTRS</span>\n            <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_client&quot;</span><span class=\"p\">)</span>\n        <span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"s2\">&quot;_name&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">item</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">signature</span><span class=\"p\">(</span><span class=\"n\">rich</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Do this after the signature and name check because it&#39;s potentially expensive</span>\n        <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"s2\">&quot;_client&quot;</span><span class=\"p\">)()</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n\n        <span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"s2\">&quot;_system&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">is_coroutine_function</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">signature</span><span class=\"p\">(</span><span class=\"n\">rich</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)[</span><span class=\"n\">item</span><span class=\"p\">][</span><span class=\"s2\">&quot;async&quot;</span><span class=\"p\">]</span>\n            <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">signature</span><span class=\"p\">(</span><span class=\"n\">rich</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)[</span><span class=\"n\">item</span><span class=\"p\">][</span><span class=\"s2\">&quot;gen&quot;</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"k\">class</span> <span class=\"nc\">RemoteMethodWrapper</span><span class=\"p\">:</span>\n<span class=\"w\">            </span><span class=\"sd\">&quot;&quot;&quot;Helper class to allow methods to be called with __call__, remote, or run.&quot;&quot;&quot;</span>\n\n            <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n                <span class=\"c1\"># stream_logs and run_name are both supported args here, but we can&#39;t include them explicitly because</span>\n                <span class=\"c1\"># the local code path here will throw an error if they are included and not supported in the</span>\n                <span class=\"c1\"># method signature.</span>\n\n                <span class=\"c1\"># Always take the user overrided behavior if they want it</span>\n                <span class=\"k\">if</span> <span class=\"s2\">&quot;run_async&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">kwargs</span><span class=\"p\">:</span>\n                    <span class=\"n\">run_async</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;run_async&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">run_async</span> <span class=\"o\">=</span> <span class=\"n\">is_coroutine_function</span>\n\n                <span class=\"k\">if</span> <span class=\"n\">run_async</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"n\">client_call_wrapper</span><span class=\"p\">(</span>\n                        <span class=\"n\">client</span><span class=\"p\">,</span>\n                        <span class=\"n\">system</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;acall&quot;</span><span class=\"p\">,</span>\n                        <span class=\"n\">name</span><span class=\"p\">,</span>\n                        <span class=\"n\">item</span><span class=\"p\">,</span>\n                        <span class=\"n\">run_name</span><span class=\"o\">=</span><span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;run_name&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">),</span>\n                        <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;stream_logs&quot;</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">),</span>\n                        <span class=\"n\">remote</span><span class=\"o\">=</span><span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;remote&quot;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">),</span>\n                        <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;args&quot;</span><span class=\"p\">:</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"s2\">&quot;kwargs&quot;</span><span class=\"p\">:</span> <span class=\"n\">kwargs</span><span class=\"p\">},</span>\n                    <span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"n\">client_call_wrapper</span><span class=\"p\">(</span>\n                        <span class=\"n\">client</span><span class=\"p\">,</span>\n                        <span class=\"n\">system</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;call&quot;</span><span class=\"p\">,</span>\n                        <span class=\"n\">name</span><span class=\"p\">,</span>\n                        <span class=\"n\">item</span><span class=\"p\">,</span>\n                        <span class=\"n\">run_name</span><span class=\"o\">=</span><span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;run_name&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">),</span>\n                        <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;stream_logs&quot;</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">),</span>\n                        <span class=\"n\">remote</span><span class=\"o\">=</span><span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;remote&quot;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">),</span>\n                        <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;args&quot;</span><span class=\"p\">:</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"s2\">&quot;kwargs&quot;</span><span class=\"p\">:</span> <span class=\"n\">kwargs</span><span class=\"p\">},</span>\n                    <span class=\"p\">)</span>\n\n            <span class=\"k\">def</span> <span class=\"nf\">remote</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">run_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"fm\">__call__</span><span class=\"p\">(</span>\n                    <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span>\n                    <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"n\">stream_logs</span><span class=\"p\">,</span>\n                    <span class=\"n\">run_name</span><span class=\"o\">=</span><span class=\"n\">run_name</span><span class=\"p\">,</span>\n                    <span class=\"n\">remote</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n\n            <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">run_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"fm\">__call__</span><span class=\"p\">(</span>\n                    <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span>\n                    <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"n\">stream_logs</span><span class=\"p\">,</span>\n                    <span class=\"n\">run_name</span><span class=\"o\">=</span><span class=\"n\">run_name</span><span class=\"p\">,</span>\n                    <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">RemoteMethodWrapper</span><span class=\"p\">()</span>\n\n<div class=\"viewcode-block\" id=\"Module.refresh\"><a class=\"viewcode-back\" href=\"../../../../api/python/module/#runhouse.Module.refresh\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">refresh</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Update the resource in the object store.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_system</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_system</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_system</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">,</span> <span class=\"n\">remote</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span></div>\n\n<div class=\"viewcode-block\" id=\"Module.replicate\"><a class=\"viewcode-back\" href=\"../../../../api/python/module/#runhouse.Module.replicate\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">replicate</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">num_replicas</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"n\">replicas_per_node</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">names</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">envs</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"s2\">&quot;Env&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">parallel</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Replicate the module on the cluster in a new env and return the new modules.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            num_relicas (int, optional): Number of replicas of the module to create. (Default: 1)</span>\n<span class=\"sd\">            names (List[str], optional): List for the names for the replicas, if specified. (Default: ``None``)</span>\n<span class=\"sd\">            envs (List[Env], optional): List of the envs for the replicas, if specified. (Default: ``None``)</span>\n<span class=\"sd\">            parallel (bool, optional): Whether to create the replicas in parallel. (Default: ``False``)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Cannot replicate a module that is not on a cluster. Please send the module to a cluster first.&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Cannot replicate a module that is not on a cluster. Please send the module to a cluster first.&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">envs</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">envs</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">num_replicas</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;If envs is a list, it must be the same length as num_replicas.&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">names</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">names</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">num_replicas</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;If names is a list, it must be the same length as num_replicas.&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">envs</span> <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">env</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Cannot replicate the default environment. Please send the module or function to a named env first.&quot;</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">create_replica</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">):</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">names</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">names</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">_replica_</span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">envs</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n                <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">_get_env_from</span><span class=\"p\">(</span><span class=\"n\">envs</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"c1\"># We do a shallow copy here because we want to reuse the Package objects in the env</span>\n                <span class=\"c1\"># If we reconstruct from scratch, the cluster may not have been saved (but has a name), and won&#39;t</span>\n                <span class=\"c1\"># be populated properly inside the package&#39;s folder&#39;s system.</span>\n                <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">env</span><span class=\"p\">)</span>\n                <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">_replica_</span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n\n                <span class=\"c1\"># TODO remove</span>\n                <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">reqs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n                <span class=\"k\">if</span> <span class=\"n\">replicas_per_node</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">compute</span><span class=\"p\">:</span>\n                        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                            <span class=\"s2\">&quot;Cannot specify replicas_per_node if other compute requirements for env &quot;</span>\n                            <span class=\"s2\">&quot;placement are specified.&quot;</span>\n                        <span class=\"p\">)</span>\n                    <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">compute</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;node_idx&quot;</span><span class=\"p\">:</span> <span class=\"n\">i</span> <span class=\"o\">//</span> <span class=\"n\">replicas_per_node</span><span class=\"p\">}</span>\n\n            <span class=\"n\">new_module</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n            <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">local</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n            <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">local</span><span class=\"o\">.</span><span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">local</span><span class=\"o\">.</span><span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n            <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">)</span>\n            <span class=\"n\">new_module</span> <span class=\"o\">=</span> <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">new_module</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">parallel</span><span class=\"p\">:</span>\n            <span class=\"kn\">from</span> <span class=\"nn\">multiprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">pool</span>\n\n            <span class=\"k\">with</span> <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">ThreadPool</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">p</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">imap</span><span class=\"p\">(</span><span class=\"n\">create_replica</span><span class=\"p\">,</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">num_replicas</span><span class=\"p\">)))</span>\n\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">create_replica</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">num_replicas</span><span class=\"p\">)]</span></div>\n\n<div class=\"viewcode-block\" id=\"Module.distribute\"><a class=\"viewcode-back\" href=\"../../../../api/python/module/#runhouse.Module.distribute\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">distribute</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">distribution</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">num_replicas</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"n\">replicas_per_node</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">replication_kwargs</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{},</span>\n        <span class=\"o\">**</span><span class=\"n\">distribution_kwargs</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Distribute the module on the cluster and return the distributed module.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            distribution (str): The distribution method to use, e.g. &quot;pool&quot;, &quot;ray&quot;, &quot;pytorch&quot;, or &quot;tensorflow&quot;.</span>\n<span class=\"sd\">            name (str, optional): The name to give to the distributed module, if applicable. Overwrites current module name by default. (Default: ``None``)</span>\n<span class=\"sd\">            num_replicas (int, optional): The number of replicas to create. (Default: 1)</span>\n<span class=\"sd\">            replicas_per_node (int, optional): The number of replicas to create per node. (Default: ``None``)</span>\n<span class=\"sd\">            replication_kwargs: The keyword arguments to pass to the replicate method.</span>\n<span class=\"sd\">            distribution_kwargs: The keyword arguments to pass to the distribution method.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Cannot distribute a module that is not on a cluster. Please send the module to a cluster first.&quot;</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">():</span>\n            <span class=\"c1\"># Distribute the module on the cluster and return the distributed module as a</span>\n            <span class=\"c1\"># stub.</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;distribute&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">distribution</span><span class=\"p\">,</span>\n                <span class=\"n\">name</span><span class=\"p\">,</span>\n                <span class=\"n\">num_replicas</span><span class=\"p\">,</span>\n                <span class=\"n\">replicas_per_node</span><span class=\"p\">,</span>\n                <span class=\"n\">replication_kwargs</span><span class=\"p\">,</span>\n                <span class=\"n\">remote</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"o\">**</span><span class=\"n\">distribution_kwargs</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">distribution</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;pool&quot;</span><span class=\"p\">:</span>\n            <span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.distributed.distributed_pool</span> <span class=\"kn\">import</span> <span class=\"n\">DistributedPool</span>\n\n            <span class=\"n\">replicas</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">replicate</span><span class=\"p\">(</span>\n                <span class=\"n\">num_replicas</span><span class=\"o\">=</span><span class=\"n\">num_replicas</span><span class=\"p\">,</span>\n                <span class=\"n\">replicas_per_node</span><span class=\"o\">=</span><span class=\"n\">replicas_per_node</span><span class=\"p\">,</span>\n                <span class=\"o\">**</span><span class=\"n\">replication_kwargs</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span> <span class=\"ow\">or</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;distributed_</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n            <span class=\"n\">pooled_module</span> <span class=\"o\">=</span> <span class=\"n\">DistributedPool</span><span class=\"p\">(</span>\n                <span class=\"o\">**</span><span class=\"n\">distribution_kwargs</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">replicas</span><span class=\"o\">=</span><span class=\"n\">replicas</span>\n            <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">pooled_module</span>\n        <span class=\"k\">elif</span> <span class=\"n\">distribution</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;ray&quot;</span><span class=\"p\">:</span>\n            <span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.distributed.ray_distributed</span> <span class=\"kn\">import</span> <span class=\"n\">RayDistributed</span>\n\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span> <span class=\"ow\">or</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;ray_</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n            <span class=\"n\">ray_module</span> <span class=\"o\">=</span> <span class=\"n\">RayDistributed</span><span class=\"p\">(</span>\n                <span class=\"o\">**</span><span class=\"n\">distribution_kwargs</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">module</span><span class=\"o\">=</span><span class=\"bp\">self</span>\n            <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">ray_module</span></div>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">remote</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Helper property to allow for access to remote properties, both public and private. Returning functions</span>\n<span class=\"sd\">        is not advised.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; my_module.remote.my_property</span>\n<span class=\"sd\">            &gt;&gt;&gt; my_module.remote._my_private_property</span>\n<span class=\"sd\">            &gt;&gt;&gt; my_module.remote.size = 14</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"s2\">&quot;_client&quot;</span><span class=\"p\">)()</span>\n        <span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"s2\">&quot;_system&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"s2\">&quot;_name&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">outer_super_gettattr</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span>\n        <span class=\"n\">outer_super_setattr</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__setattr__</span>\n\n        <span class=\"k\">class</span> <span class=\"nc\">RemotePropertyWrapper</span><span class=\"p\">:</span>\n            <span class=\"nd\">@classmethod</span>\n            <span class=\"k\">def</span> <span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n                <span class=\"c1\"># TODO[DG] revise</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">client</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"n\">outer_super_gettattr</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n\n                <span class=\"k\">return</span> <span class=\"n\">client_call_wrapper</span><span class=\"p\">(</span>\n                    <span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"s2\">&quot;call&quot;</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"kc\">False</span>\n                <span class=\"p\">)</span>\n\n            <span class=\"nd\">@classmethod</span>\n            <span class=\"k\">def</span> <span class=\"fm\">__setattr__</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">client</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"n\">outer_super_setattr</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n\n                <span class=\"k\">return</span> <span class=\"n\">client_call_wrapper</span><span class=\"p\">(</span>\n                    <span class=\"n\">client</span><span class=\"p\">,</span>\n                    <span class=\"n\">system</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;call&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span>\n                    <span class=\"n\">method_name</span><span class=\"o\">=</span><span class=\"n\">key</span><span class=\"p\">,</span>\n                    <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;args&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">value</span><span class=\"p\">],</span> <span class=\"s2\">&quot;kwargs&quot;</span><span class=\"p\">:</span> <span class=\"p\">{}},</span>\n                <span class=\"p\">)</span>\n\n            <span class=\"nd\">@classmethod</span>\n            <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">RemotePropertyWrapper</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">local</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Helper property to allow for access to local properties, both public and private.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; my_module.local.my_property</span>\n<span class=\"sd\">            &gt;&gt;&gt; my_module.local._my_private_property</span>\n\n<span class=\"sd\">            &gt;&gt;&gt; my_module.local.size = 14</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">outer_super_gettattr</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span>\n        <span class=\"n\">outer_super_setattr</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__setattr__</span>\n\n        <span class=\"k\">class</span> <span class=\"nc\">LocalPropertyWrapper</span><span class=\"p\">:</span>\n            <span class=\"nd\">@classmethod</span>\n            <span class=\"k\">def</span> <span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span> <span class=\"n\">outer_super_gettattr</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n\n            <span class=\"nd\">@classmethod</span>\n            <span class=\"k\">def</span> <span class=\"fm\">__setattr__</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span> <span class=\"n\">outer_super_setattr</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">LocalPropertyWrapper</span><span class=\"p\">()</span>\n\n<div class=\"viewcode-block\" id=\"Module.fetch\"><a class=\"viewcode-back\" href=\"../../../../api/python/module/#runhouse.Module.fetch\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">fetch</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Helper method to allow for access to remote state, both public and private. Fetching functions</span>\n<span class=\"sd\">        is not advised. `system.get(module.name).resolved_state()` is roughly equivalent to `module.fetch()`.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; my_module.fetch(&quot;my_property&quot;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; my_module.fetch(&quot;my_private_property&quot;)</span>\n\n<span class=\"sd\">            &gt;&gt;&gt; MyRemoteClass = rh.module(my_class).to(system)</span>\n<span class=\"sd\">            &gt;&gt;&gt; MyRemoteClass(*args).fetch() # Returns a my_class instance, populated with the remote state</span>\n\n<span class=\"sd\">            &gt;&gt;&gt; my_module.fetch() # Returns the data of the blob, due to overloaded ``resolved_state`` method</span>\n\n<span class=\"sd\">            &gt;&gt;&gt; class MyModule(rh.Module):</span>\n<span class=\"sd\">            &gt;&gt;&gt;     # ...</span>\n<span class=\"sd\">            &gt;&gt;&gt;</span>\n<span class=\"sd\">            &gt;&gt;&gt; MyModule(*args).to(system).fetch() # Returns the full remote module, including private and public state</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"s2\">&quot;_name&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"s2\">&quot;_client&quot;</span><span class=\"p\">)()</span>\n        <span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"s2\">&quot;_system&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">item</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">client</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">client_call_wrapper</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"s2\">&quot;call&quot;</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">client</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">resolved_state</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">client_call_wrapper</span><span class=\"p\">(</span>\n                <span class=\"n\">client</span><span class=\"p\">,</span>\n                <span class=\"n\">system</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;call&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">name</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;resolved_state&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;args&quot;</span><span class=\"p\">:</span> <span class=\"p\">[],</span> <span class=\"s2\">&quot;kwargs&quot;</span><span class=\"p\">:</span> <span class=\"n\">kwargs</span><span class=\"p\">},</span>\n            <span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Module.fetch_async\"><a class=\"viewcode-back\" href=\"../../../../api/python/module/#runhouse.Module.fetch_async\">[docs]</a>    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">fetch_async</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">remote</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">stream_logs</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Async version of fetch. Can&#39;t be a property like `fetch` because __getattr__ can&#39;t be awaited.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; await my_module.fetch_async(&quot;my_property&quot;)</span>\n<span class=\"sd\">            &gt;&gt;&gt; await my_module.fetch_async(&quot;_my_private_property&quot;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"s2\">&quot;_client&quot;</span><span class=\"p\">)()</span>\n        <span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"s2\">&quot;_system&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"s2\">&quot;_name&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">call_wrapper</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">key</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">client_call_wrapper</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"s2\">&quot;get&quot;</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">remote</span><span class=\"o\">=</span><span class=\"n\">remote</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">name</span> <span class=\"ow\">and</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">():</span>\n                <span class=\"n\">obj_store_obj</span> <span class=\"o\">=</span> <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">obj_store_obj</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"n\">obj_store_obj</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">client_call_wrapper</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"s2\">&quot;call&quot;</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">remote</span><span class=\"o\">=</span><span class=\"n\">remote</span><span class=\"p\">)</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">is_gen</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">key</span> <span class=\"ow\">and</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">))</span> <span class=\"ow\">and</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">isasyncgenfunction</span><span class=\"p\">(</span>\n                <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>\n            <span class=\"n\">is_gen</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">signature</span><span class=\"p\">(</span><span class=\"n\">rich</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"p\">{})</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;gen&quot;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">is_gen</span><span class=\"p\">:</span>\n\n            <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">async_gen</span><span class=\"p\">():</span>\n                <span class=\"k\">for</span> <span class=\"n\">res</span> <span class=\"ow\">in</span> <span class=\"n\">call_wrapper</span><span class=\"p\">():</span>\n                    <span class=\"k\">yield</span> <span class=\"n\">res</span>\n\n            <span class=\"k\">return</span> <span class=\"n\">async_gen</span><span class=\"p\">()</span>\n\n        <span class=\"n\">_executor</span> <span class=\"o\">=</span> <span class=\"n\">ThreadPoolExecutor</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n        <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">async_call</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"k\">await</span> <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_in_executor</span><span class=\"p\">(</span><span class=\"n\">_executor</span><span class=\"p\">,</span> <span class=\"n\">call_wrapper</span><span class=\"p\">)</span>\n\n        <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">create_task</span><span class=\"p\">(</span><span class=\"n\">async_call</span><span class=\"p\">())</span></div>\n\n<div class=\"viewcode-block\" id=\"Module.set_async\"><a class=\"viewcode-back\" href=\"../../../../api/python/module/#runhouse.Module.set_async\">[docs]</a>    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">set_async</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Async version of property setter.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; await my_module.set_async(&quot;my_property&quot;, my_value)</span>\n<span class=\"sd\">            &gt;&gt;&gt; await my_module.set_async(&quot;_my_private_property&quot;, my_value)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__getattribute__</span><span class=\"p\">(</span><span class=\"s2\">&quot;_client&quot;</span><span class=\"p\">)()</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">client</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__setattr__</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">call_wrapper</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_client</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span>\n                <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">,</span>\n                <span class=\"n\">method_name</span><span class=\"o\">=</span><span class=\"n\">key</span><span class=\"p\">,</span>\n                <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;args&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">value</span><span class=\"p\">],</span> <span class=\"s2\">&quot;kwargs&quot;</span><span class=\"p\">:</span> <span class=\"p\">{}},</span>\n                <span class=\"n\">stream_logs</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"n\">_executor</span> <span class=\"o\">=</span> <span class=\"n\">ThreadPoolExecutor</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n        <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">async_call</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"k\">await</span> <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_in_executor</span><span class=\"p\">(</span><span class=\"n\">_executor</span><span class=\"p\">,</span> <span class=\"n\">call_wrapper</span><span class=\"p\">)</span>\n\n        <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">create_task</span><span class=\"p\">(</span><span class=\"n\">async_call</span><span class=\"p\">())</span></div>\n\n<div class=\"viewcode-block\" id=\"Module.resolve\"><a class=\"viewcode-back\" href=\"../../../../api/python/module/#runhouse.Module.resolve\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">resolve</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Specify that the module should resolve to a particular state when passed into a remote method. This is</span>\n<span class=\"sd\">        useful if you want to revert the module&#39;s state to some &quot;Runhouse-free&quot; state once it is passed into a</span>\n<span class=\"sd\">        Runhouse-unaware function. For example, if you call a Runhouse-unaware function with ``.remote()``,</span>\n<span class=\"sd\">        you will be returned a module which wraps your data. If you want to pass that module into another function</span>\n<span class=\"sd\">        that operates on the original data (e.g. a function that takes a numpy array), you can call</span>\n<span class=\"sd\">        ``my_second_fn(my_func.resolve())``, and ``my_func`` will be replaced with the contents of its ``.data`` on the</span>\n<span class=\"sd\">        cluster before being passed into ``my_second_fn``.</span>\n\n<span class=\"sd\">        Resolved state is defined by the ``resolved_state`` method. By default, modules created with the</span>\n<span class=\"sd\">        ``rh.module`` factory constructor will be resolved to their original non-module-wrapped class (or best attempt).</span>\n<span class=\"sd\">        Modules which are defined as a subclass of ``Module`` will be returned as-is, as they have no other</span>\n<span class=\"sd\">        &quot;original class.&quot;</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; my_module = rh.module(my_class)</span>\n<span class=\"sd\">            &gt;&gt;&gt; my_remote_fn(my_module.resolve()) # my_module will be replaced with the original class `my_class`</span>\n\n<span class=\"sd\">            &gt;&gt;&gt; my_result_module = my_remote_fn.call.remote(args)</span>\n<span class=\"sd\">            &gt;&gt;&gt; my_other_remote_fn(my_result_module.resolve()) # my_result_module will be replaced with its data</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_resolve</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span></div>\n\n<div class=\"viewcode-block\" id=\"Module.resolved_state\"><a class=\"viewcode-back\" href=\"../../../../api/python/module/#runhouse.Module.resolved_state\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">resolved_state</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Return the resolved state of the module. By default, this is the original class of the module if it was</span>\n<span class=\"sd\">        created with the ``module`` factory constructor.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pointers</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_resolve</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n        <span class=\"p\">(</span><span class=\"n\">module_path</span><span class=\"p\">,</span> <span class=\"n\">module_name</span><span class=\"p\">,</span> <span class=\"n\">class_name</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_pointers</span>\n        <span class=\"n\">original_class</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_obj_from_pointers</span><span class=\"p\">(</span>\n            <span class=\"n\">module_path</span><span class=\"p\">,</span> <span class=\"n\">module_name</span><span class=\"p\">,</span> <span class=\"n\">class_name</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">issubclass</span><span class=\"p\">(</span><span class=\"n\">original_class</span><span class=\"p\">,</span> <span class=\"n\">Module</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_resolve</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"p\">:</span>\n            <span class=\"c1\"># This is a non-instantiated Module, i.e. represents a class rather than an instance</span>\n            <span class=\"k\">return</span> <span class=\"n\">original_class</span>\n\n        <span class=\"n\">new_module</span> <span class=\"o\">=</span> <span class=\"n\">original_class</span><span class=\"o\">.</span><span class=\"fm\">__new__</span><span class=\"p\">(</span><span class=\"n\">original_class</span><span class=\"p\">)</span>\n        <span class=\"c1\"># TODO pop out any attributes that are not in the original class?</span>\n        <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span>\n        <span class=\"k\">return</span> <span class=\"n\">new_module</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_save_sub_resources</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">Resource</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">folder</span><span class=\"o\">=</span><span class=\"n\">folder</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"n\">Resource</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">folder</span><span class=\"o\">=</span><span class=\"n\">folder</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"Module.rename\"><a class=\"viewcode-back\" href=\"../../../../api/python/module/#runhouse.Module.rename\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">rename</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Rename the module.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            name (str): Name to rename the module to.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"n\">name</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rns_address</span> <span class=\"o\">==</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n        <span class=\"n\">old_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>  <span class=\"c1\"># Goes through Resource setter to parse name properly (e.g. if rns path)</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span>\n            <span class=\"ow\">and</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">)</span>\n            <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">()</span>\n        <span class=\"p\">):</span>\n            <span class=\"c1\"># We rename the object with the full rns_address here because if it&#39;s a resource, we want the</span>\n            <span class=\"c1\"># object stored in the obj store to have the updated rns_address, not just the updated key.</span>\n            <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">rename</span><span class=\"p\">(</span><span class=\"n\">old_key</span><span class=\"o\">=</span><span class=\"n\">old_name</span><span class=\"p\">,</span> <span class=\"n\">new_key</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rns_address</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_client</span><span class=\"p\">():</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_client</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">rename</span><span class=\"p\">(</span>\n                <span class=\"n\">old_key</span><span class=\"o\">=</span><span class=\"n\">old_name</span><span class=\"p\">,</span> <span class=\"n\">new_key</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rns_address</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n            <span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Module.save\"><a class=\"viewcode-back\" href=\"../../../../api/python/module/#runhouse.Module.save\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">overwrite</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Need to override Resource&#39;s save to handle key changes in the obj store</span>\n        <span class=\"c1\"># Also check that this is a Module and not a File</span>\n\n        <span class=\"c1\"># Make sure to generate the openapi spec before saving</span>\n        <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">openapi_spec</span><span class=\"p\">()</span>\n\n        <span class=\"n\">old_rns_address</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rns_address</span>\n        <span class=\"k\">if</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">base_name</span> <span class=\"o\">=</span> <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">split_rns_name_and_path</span><span class=\"p\">(</span>\n                <span class=\"n\">rns_client</span><span class=\"o\">.</span><span class=\"n\">resolve_rns_path</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">!=</span> <span class=\"n\">base_name</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">overwrite</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rename</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n                    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"n\">Cluster</span><span class=\"p\">):</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">put_resource</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n        <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">overwrite</span><span class=\"o\">=</span><span class=\"n\">overwrite</span><span class=\"p\">,</span> <span class=\"n\">folder</span><span class=\"o\">=</span><span class=\"n\">folder</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">old_rns_address</span> <span class=\"o\">!=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rns_address</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">remote</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rns_address</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">res</span></div>\n\n<div class=\"viewcode-block\" id=\"Module.share\"><a class=\"viewcode-back\" href=\"../../../../api/python/module/#runhouse.Module.share\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">share</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">visibility</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">visibility</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">visibility</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">visibility</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">visibility</span> <span class=\"o\">=</span> <span class=\"n\">visibility</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">remote</span><span class=\"o\">.</span><span class=\"n\">visibility</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                <span class=\"n\">visibility</span>  <span class=\"c1\"># Sets the visibility on the remote resource</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">share</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span> <span class=\"n\">visibility</span><span class=\"o\">=</span><span class=\"n\">visibility</span><span class=\"p\">)</span></div>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_is_running_in_notebook</span><span class=\"p\">(</span><span class=\"n\">module_path</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Returns True if running in a notebook, False otherwise&quot;&quot;&quot;</span>\n\n        <span class=\"c1\"># Check if running in an IPython notebook</span>\n        <span class=\"c1\"># TODO better way of detecting if in a notebook or interactive Python env</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">module_path</span> <span class=\"ow\">or</span> <span class=\"n\">module_path</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;ipynb&quot;</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n        <span class=\"c1\"># Check if running in a marimo notebook</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"kn\">import</span> <span class=\"nn\">marimo</span> <span class=\"k\">as</span> <span class=\"nn\">mo</span>\n\n            <span class=\"k\">return</span> <span class=\"n\">mo</span><span class=\"o\">.</span><span class=\"n\">running_in_notebook</span><span class=\"p\">()</span>\n        <span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">ImportError</span><span class=\"p\">,</span> <span class=\"ne\">ModuleNotFoundError</span><span class=\"p\">):</span>\n            <span class=\"c1\"># marimo not installed</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_extract_pointers</span><span class=\"p\">(</span><span class=\"n\">raw_cls_or_fn</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Type</span><span class=\"p\">,</span> <span class=\"n\">Callable</span><span class=\"p\">]):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Get the path to the module, module name, and function name to be able to import it on the server&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">raw_cls_or_fn</span><span class=\"p\">,</span> <span class=\"n\">Type</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">raw_cls_or_fn</span><span class=\"p\">,</span> <span class=\"n\">Callable</span><span class=\"p\">)):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;Expected Type or Callable but received </span><span class=\"si\">{</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">raw_cls_or_fn</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"n\">root_path</span><span class=\"p\">,</span> <span class=\"n\">module_name</span><span class=\"p\">,</span> <span class=\"n\">cls_or_fn_name</span> <span class=\"o\">=</span> <span class=\"n\">get_module_import_info</span><span class=\"p\">(</span><span class=\"n\">raw_cls_or_fn</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"p\">(</span>\n            <span class=\"n\">root_path</span><span class=\"p\">,</span>\n            <span class=\"n\">module_name</span><span class=\"p\">,</span>\n            <span class=\"n\">cls_or_fn_name</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_get_local_path_containing_module</span><span class=\"p\">(</span>\n        <span class=\"n\">root_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">reqs</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Path</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Find the directory containing the module root path in the reqs list.</span>\n\n<span class=\"sd\">        If it is not found, find the working directory that contains the module root path and return that,</span>\n<span class=\"sd\">        along with a flag indicating whether the module should be added to the reqs list.</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"c1\"># First, check if the module is already included in one of the directories in reqs</span>\n        <span class=\"n\">local_path_containing_module</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">for</span> <span class=\"n\">req</span> <span class=\"ow\">in</span> <span class=\"n\">reqs</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n                <span class=\"n\">req</span> <span class=\"o\">=</span> <span class=\"n\">Package</span><span class=\"o\">.</span><span class=\"n\">from_string</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"p\">(</span>\n                <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"p\">,</span> <span class=\"n\">Package</span><span class=\"p\">)</span>\n                <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">install_target</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)</span>\n                <span class=\"c1\"># and req.install_target.is_local()</span>\n            <span class=\"p\">):</span>\n                <span class=\"n\">local_path_containing_module</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">install_target</span><span class=\"o\">.</span><span class=\"n\">local_path</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">local_path_containing_module</span><span class=\"p\">:</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># Module path relative to package</span>\n                    <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">root_path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">relative_to</span><span class=\"p\">(</span><span class=\"n\">local_path_containing_module</span><span class=\"p\">)</span>\n                    <span class=\"k\">break</span>\n                <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>  <span class=\"c1\"># Not a subdirectory</span>\n                    <span class=\"n\">local_path_containing_module</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n                    <span class=\"k\">pass</span>\n\n        <span class=\"c1\"># Only add this to the env&#39;s reqs if the module is not in one of the directories in reqs</span>\n        <span class=\"n\">add</span> <span class=\"o\">=</span> <span class=\"n\">local_path_containing_module</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">local_path_containing_module</span><span class=\"p\">:</span>\n            <span class=\"c1\"># If the module is not in one of the directories in reqs, we just use the full path,</span>\n            <span class=\"c1\"># then we&#39;ll create a new &quot;req&quot; containing the Module</span>\n            <span class=\"c1\"># TODO: should this &quot;req&quot; be a Package? I&#39;ll just start with a string for now</span>\n            <span class=\"n\">local_path_containing_module</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">locate_working_dir</span><span class=\"p\">(</span><span class=\"n\">root_path</span><span class=\"p\">))</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">local_path_containing_module</span><span class=\"p\">,</span> <span class=\"n\">add</span>\n\n<div class=\"viewcode-block\" id=\"Module.openapi_spec\"><a class=\"viewcode-back\" href=\"../../../../api/python/module/#runhouse.Module.openapi_spec\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">openapi_spec</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">spec_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Generate an OpenAPI spec for the module.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            spec_name (str, optional): Spec name for the OpenAPI spec.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot; TODO: This breaks if the module has type annotations that are classes, and not standard library or</span>\n<span class=\"sd\">        typing types.</span>\n\n<span class=\"sd\">        Maybe we can do something using: https://github.com/kuimono/openapi-schema-pydantic to allow</span>\n<span class=\"sd\">        nested Pydantic models easily as schemas?</span>\n\n<span class=\"sd\">        TODO: What happens if there is an empty function, will this work with an empty body even though it is</span>\n<span class=\"sd\">        marked as required?</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_openapi_spec</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_openapi_spec</span>\n\n        <span class=\"n\">spec_name</span> <span class=\"o\">=</span> <span class=\"n\">spec_name</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">spec_name</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Module must have a name to generate an OpenAPI spec. Try saving the module first.&quot;</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"n\">spec</span> <span class=\"o\">=</span> <span class=\"n\">APISpec</span><span class=\"p\">(</span>\n            <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"n\">spec_name</span><span class=\"p\">,</span>\n            <span class=\"n\">version</span><span class=\"o\">=</span><span class=\"s2\">&quot;1.0.0&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">openapi_version</span><span class=\"o\">=</span><span class=\"s2\">&quot;3.0.0&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">plugins</span><span class=\"o\">=</span><span class=\"p\">[],</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">base_module_class_methods</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"n\">m</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">m</span> <span class=\"ow\">in</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">getmembers</span><span class=\"p\">(</span><span class=\"n\">Module</span><span class=\"p\">,</span> <span class=\"n\">predicate</span><span class=\"o\">=</span><span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">isfunction</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">for</span> <span class=\"n\">method_name</span><span class=\"p\">,</span> <span class=\"n\">method</span> <span class=\"ow\">in</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">getmembers</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"p\">,</span> <span class=\"n\">predicate</span><span class=\"o\">=</span><span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">isfunction</span>\n        <span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">method_name</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;_&quot;</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">method_name</span> <span class=\"ow\">in</span> <span class=\"n\">base_module_class_methods</span><span class=\"p\">:</span>\n                <span class=\"k\">continue</span>\n\n            <span class=\"n\">spec</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">(</span>\n                <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s2\">&quot;/</span><span class=\"si\">{</span><span class=\"n\">spec_name</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">{</span><span class=\"n\">method_name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">operations</span><span class=\"o\">=</span><span class=\"p\">{</span>\n                    <span class=\"s2\">&quot;post&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                        <span class=\"s2\">&quot;summary&quot;</span><span class=\"p\">:</span> <span class=\"n\">method</span><span class=\"o\">.</span><span class=\"vm\">__doc__</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                        <span class=\"k\">if</span> <span class=\"n\">method</span><span class=\"o\">.</span><span class=\"vm\">__doc__</span>\n                        <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;description&quot;</span><span class=\"p\">:</span> <span class=\"n\">method</span><span class=\"o\">.</span><span class=\"vm\">__doc__</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">method</span><span class=\"o\">.</span><span class=\"vm\">__doc__</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;requestBody&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                            <span class=\"s2\">&quot;content&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                                <span class=\"s2\">&quot;application/json&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                                    <span class=\"s2\">&quot;schema&quot;</span><span class=\"p\">:</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">method_name</span><span class=\"si\">}</span><span class=\"s2\">_body_schema&quot;</span><span class=\"p\">,</span>\n                                <span class=\"p\">},</span>\n                            <span class=\"p\">},</span>\n                            <span class=\"s2\">&quot;required&quot;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n                        <span class=\"p\">},</span>\n                        <span class=\"s2\">&quot;responses&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                            <span class=\"s2\">&quot;200&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                                <span class=\"s2\">&quot;description&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;A response containing an output_type, data, and serialization, and optionally an error and traceback.&quot;</span>\n                            <span class=\"p\">},</span>\n                        <span class=\"p\">},</span>\n                    <span class=\"p\">},</span>\n                <span class=\"p\">},</span>\n            <span class=\"p\">)</span>\n\n            <span class=\"c1\"># Generate schema for the Request Body</span>\n            <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n            <span class=\"k\">for</span> <span class=\"n\">param_name</span><span class=\"p\">,</span> <span class=\"n\">param</span> <span class=\"ow\">in</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">signature</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">parameters</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                <span class=\"k\">if</span> <span class=\"n\">param_name</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;self&quot;</span><span class=\"p\">:</span>\n                    <span class=\"k\">continue</span>\n\n                <span class=\"k\">if</span> <span class=\"n\">param</span><span class=\"o\">.</span><span class=\"n\">annotation</span> <span class=\"ow\">and</span> <span class=\"n\">param</span><span class=\"o\">.</span><span class=\"n\">annotation</span> <span class=\"o\">!=</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">Parameter</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"p\">:</span>\n                    <span class=\"n\">param_type</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                        <span class=\"n\">param</span><span class=\"o\">.</span><span class=\"n\">annotation</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n                        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"o\">.</span><span class=\"n\">annotation</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">)</span>\n                        <span class=\"k\">else</span> <span class=\"n\">param</span><span class=\"o\">.</span><span class=\"n\">annotation</span>\n                    <span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">param_type</span> <span class=\"o\">=</span> <span class=\"nb\">str</span>\n\n                <span class=\"n\">params</span><span class=\"p\">[</span><span class=\"n\">param_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                    <span class=\"n\">param_type</span><span class=\"p\">,</span>\n                    <span class=\"n\">param</span><span class=\"o\">.</span><span class=\"n\">default</span> <span class=\"k\">if</span> <span class=\"n\">param</span><span class=\"o\">.</span><span class=\"n\">default</span> <span class=\"o\">!=</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">Parameter</span><span class=\"o\">.</span><span class=\"n\">empty</span> <span class=\"k\">else</span> <span class=\"o\">...</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n\n            <span class=\"n\">module_method_params</span> <span class=\"o\">=</span> <span class=\"n\">create_model</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">method_name</span><span class=\"si\">}</span><span class=\"s2\">_schema&quot;</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">params</span>\n            <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">model_json_schema</span><span class=\"p\">()</span>\n            <span class=\"n\">module_method_params</span><span class=\"p\">[</span><span class=\"s2\">&quot;title&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;kwargs&quot;</span>\n\n            <span class=\"n\">request_body_schema</span> <span class=\"o\">=</span> <span class=\"n\">CallParams</span><span class=\"o\">.</span><span class=\"n\">model_json_schema</span><span class=\"p\">()</span>\n            <span class=\"n\">request_body_schema</span><span class=\"p\">[</span><span class=\"s2\">&quot;properties&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;data&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                <span class=\"s2\">&quot;title&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;data&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;type&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;object&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;properties&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                    <span class=\"s2\">&quot;kwargs&quot;</span><span class=\"p\">:</span> <span class=\"n\">module_method_params</span><span class=\"p\">,</span>\n                <span class=\"p\">},</span>\n                <span class=\"s2\">&quot;required&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;kwargs&quot;</span><span class=\"p\">],</span>\n            <span class=\"p\">}</span>\n            <span class=\"n\">request_body_schema</span><span class=\"p\">[</span><span class=\"s2\">&quot;title&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">method_name</span><span class=\"si\">}</span><span class=\"s2\"> Params&quot;</span>\n            <span class=\"n\">spec</span><span class=\"o\">.</span><span class=\"n\">components</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">method_name</span><span class=\"si\">}</span><span class=\"s2\">_body_schema&quot;</span><span class=\"p\">,</span> <span class=\"n\">request_body_schema</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_openapi_spec</span> <span class=\"o\">=</span> <span class=\"n\">spec</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_openapi_spec</span></div></div>\n\n    <span class=\"c1\"># Found in python decorator logic, maybe use</span>\n    <span class=\"c1\"># func_name = getattr(f, &#39;__qualname__&#39;, f.__name__)</span>\n    <span class=\"c1\"># module_name = getattr(f, &#39;__module__&#39;, &#39;&#39;)</span>\n    <span class=\"c1\"># if module_name:</span>\n    <span class=\"c1\">#     full_name = f&#39;{module_name}.{func_name}&#39;</span>\n    <span class=\"c1\"># else:</span>\n    <span class=\"c1\">#     full_name = func_name</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_module_subclass_factory</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">cls_pointers</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span>\n        <span class=\"n\">system</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">pointers</span><span class=\"o\">=</span><span class=\"n\">cls_pointers</span><span class=\"p\">,</span>\n        <span class=\"n\">signature</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"c1\"># args and kwargs are passed to the cls&#39;s __init__ method if this is being called on a cluster. They</span>\n        <span class=\"c1\"># shouldn&#39;t be passed otherwise.</span>\n        <span class=\"n\">Module</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"p\">,</span>\n            <span class=\"n\">pointers</span><span class=\"o\">=</span><span class=\"n\">pointers</span><span class=\"p\">,</span>\n            <span class=\"n\">signature</span><span class=\"o\">=</span><span class=\"n\">signature</span><span class=\"p\">,</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span>\n            <span class=\"n\">system</span><span class=\"o\">=</span><span class=\"n\">system</span><span class=\"p\">,</span>\n            <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"n\">env</span><span class=\"p\">,</span>\n            <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"c1\"># This allows a class which is already on the cluster to construct an instance of itself with a factory</span>\n        <span class=\"c1\"># method, e.g. my_module = MyModuleCls.factory_constructor(*args, **kwargs)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">on_this_cluster</span><span class=\"p\">():</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_remote_init</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_module_init_only</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">new_module</span> <span class=\"o\">=</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"fm\">__new__</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">)</span>\n        <span class=\"n\">Module</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">new_module</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">new_module</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span>\n        <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"n\">new_module</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Create a copy of the item on the cluster under the new name</span>\n        <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">dryrun</span> <span class=\"o\">=</span> <span class=\"n\">dryrun</span>\n        <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">_get_env_from</span><span class=\"p\">(</span><span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;env&quot;</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">env</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">dryrun</span> <span class=\"ow\">and</span> <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">:</span>\n            <span class=\"c1\"># We use system.put_resource here because the signatures for HTTPClient.put_resource and</span>\n            <span class=\"c1\"># obj_store.put_resource are different, but we should fix that.</span>\n\n            <span class=\"c1\"># If the system is still a string, we know that the user has _no_ access to the Cluster</span>\n            <span class=\"c1\"># If they were able to discover the cluster, their system string would be replaced by a Cluster object</span>\n            <span class=\"c1\"># when _check_for_child_configs --&gt; _get_cluster_from was called</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;You must have access to the underlying cluster for this unconstructed Module in order to put a resource on it.&quot;</span>\n                <span class=\"p\">)</span>\n            <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">put_resource</span><span class=\"p\">(</span><span class=\"n\">new_module</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"n\">env</span><span class=\"p\">)</span>\n            <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_remote_init&quot;</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">new_module</span><span class=\"o\">.</span><span class=\"n\">_remote_init</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">new_module</span>\n\n    <span class=\"n\">methods</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;__init__&quot;</span><span class=\"p\">:</span> <span class=\"fm\">__init__</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;__call__&quot;</span><span class=\"p\">:</span> <span class=\"fm\">__call__</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;_module_init_only&quot;</span><span class=\"p\">:</span> <span class=\"n\">_module_init_only</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">new_type</span> <span class=\"o\">=</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">cls_pointers</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"n\">Module</span><span class=\"p\">,</span> <span class=\"bp\">cls</span><span class=\"p\">),</span> <span class=\"n\">methods</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">new_type</span>\n\n\n<div class=\"viewcode-block\" id=\"module\"><a class=\"viewcode-back\" href=\"../../../../api/python/module/#runhouse.module\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">module</span><span class=\"p\">(</span>\n    <span class=\"bp\">cls</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">Type</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Env</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">load_from_den</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">dryrun</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n<span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Returns a Module object, which can be used to instantiate and interact with the class remotely.</span>\n\n<span class=\"sd\">    The behavior of Modules (and subclasses thereof) is as follows:</span>\n<span class=\"sd\">        - Any callable public method of the module is intercepted and executed remotely over rpc, with exception of</span>\n<span class=\"sd\">          certain functions Python doesn&#39;t make interceptable (e.g. __call__, __init__), and methods of the Module</span>\n<span class=\"sd\">          class (e.g. ``to``, ``fetch``, etc.). Properties and private methods are not intercepted, and will be</span>\n<span class=\"sd\">          executed locally.</span>\n<span class=\"sd\">        - Any method which executes remotely may be called normally, e.g. ``model.forward(x)``, or asynchronously,</span>\n<span class=\"sd\">          e.g. ``key = model.forward.run(x)`` (which returns a key to retrieve the result with</span>\n<span class=\"sd\">          ``cluster.get(key)``), or with ``run_obj = model.train.remote(x)``, which runs synchronously but returns</span>\n<span class=\"sd\">          a remote object to avoid passing heavy results back over the network.</span>\n<span class=\"sd\">        - Setting attributes, both public and private, will be executed remotely, with the new values only being</span>\n<span class=\"sd\">          set in the remote module and not the local one. This excludes any methods or attribtes of the Module class</span>\n<span class=\"sd\">          proper (e.g. ``system`` or ``name``), which will be set locally.</span>\n<span class=\"sd\">        - Attributes, private properties can be fetched with the ``remote`` property, and the full resource can be</span>\n<span class=\"sd\">          fetched using ``.fetch()``, e.g. ``model.remote.weights``, ``model.remote.__dict__``, ``model.fetch()``.</span>\n<span class=\"sd\">        - When a module is sent to a cluster, it&#39;s public attribtes are serialized, sent over, and repopulated in the</span>\n<span class=\"sd\">          remote instance. This means that any changes to the module&#39;s attributes will not be reflected in the remote</span>\n\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        cls: The class to instantiate.</span>\n<span class=\"sd\">        name (Optional[str], optional): Name to give the module object, to be reused later on. (Default: ``None``)</span>\n<span class=\"sd\">        env (Optional[str or Env], optional): Environment in which the module should live on the cluster, if system</span>\n<span class=\"sd\">            is cluster. (Default: ``None``)</span>\n<span class=\"sd\">        load_from_den (bool, optional): Whether to try loading the module from Den. (Default: ``True``)</span>\n<span class=\"sd\">        dryrun (bool, optional): Whether to create the Module if it doesn&#39;t exist, or load a Module object as a dryrun.</span>\n<span class=\"sd\">            (Default: ``False``)</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        Module: The resulting module.</span>\n\n<span class=\"sd\">    Example - creating a module by defining an rh.Module subclass:</span>\n<span class=\"sd\">        &gt;&gt;&gt; import runhouse as rh</span>\n<span class=\"sd\">        &gt;&gt;&gt; import transformers</span>\n<span class=\"sd\">        &gt;&gt;&gt;</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Sample rh.Module class</span>\n<span class=\"sd\">        &gt;&gt;&gt; class Model(rh.Module):</span>\n<span class=\"sd\">        &gt;&gt;&gt;    def __init__(self, model_id, device=&quot;cpu&quot;, env=None):</span>\n<span class=\"sd\">        &gt;&gt;&gt;        # Note that the code here will be run in your local environment prior to being sent to</span>\n<span class=\"sd\">        &gt;&gt;&gt;        # to a cluster. For loading large models/datasets that are only meant to be used remotely,</span>\n<span class=\"sd\">        &gt;&gt;&gt;        # we recommend using lazy initialization (see tokenizer and model attributes below).</span>\n<span class=\"sd\">        &gt;&gt;&gt;        super().__init__(env=env)</span>\n<span class=\"sd\">        &gt;&gt;&gt;        self.model_id = model_id</span>\n<span class=\"sd\">        &gt;&gt;&gt;        self.device = device</span>\n<span class=\"sd\">        &gt;&gt;&gt;</span>\n<span class=\"sd\">        &gt;&gt;&gt;    @property</span>\n<span class=\"sd\">        &gt;&gt;&gt;    def tokenizer(self):</span>\n<span class=\"sd\">        &gt;&gt;&gt;        # Lazily initialize the tokenizer remotely only when it is needed</span>\n<span class=\"sd\">        &gt;&gt;&gt;        if not hasattr(self, &#39;_tokenizer&#39;):</span>\n<span class=\"sd\">        &gt;&gt;&gt;            self._tokenizer = transformers.AutoTokenizer.from_pretrained(self.model_id)</span>\n<span class=\"sd\">        &gt;&gt;&gt;        return self._tokenizer</span>\n<span class=\"sd\">        &gt;&gt;&gt;</span>\n<span class=\"sd\">        &gt;&gt;&gt;    @property</span>\n<span class=\"sd\">        &gt;&gt;&gt;    def model(self):</span>\n<span class=\"sd\">        &gt;&gt;&gt;        if not hasattr(self, &#39;_model&#39;):</span>\n<span class=\"sd\">        &gt;&gt;&gt;            self._model = transformers.AutoModel.from_pretrained(self.model_id).to(self.device)</span>\n<span class=\"sd\">        &gt;&gt;&gt;        return self._model</span>\n<span class=\"sd\">        &gt;&gt;&gt;</span>\n<span class=\"sd\">        &gt;&gt;&gt;    def predict(self, x):</span>\n<span class=\"sd\">        &gt;&gt;&gt;        x = self.tokenizer(x, return_tensors=&quot;pt&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt;        return self.model(x)</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; # Creating rh.Module instance</span>\n<span class=\"sd\">        &gt;&gt;&gt; model = Model(model_id=&quot;bert-base-uncased&quot;, device=&quot;cuda&quot;, env=&quot;my_env&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; model = model.to(system=&quot;my_gpu&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; model.predict(&quot;Hello world!&quot;)   # Runs on system in env</span>\n<span class=\"sd\">        &gt;&gt;&gt; tok = model.remote.tokenizer    # Returns remote tokenizer</span>\n<span class=\"sd\">        &gt;&gt;&gt; id = model.local.model_id       # Returns local model_id, if any</span>\n<span class=\"sd\">        &gt;&gt;&gt; model_id = model.model_id       # Returns local model_id (not remote)</span>\n<span class=\"sd\">        &gt;&gt;&gt; model.fetch()                   # Returns full remote module, including model and tokenizer</span>\n<span class=\"sd\">        &gt;&gt;&gt;</span>\n\n<span class=\"sd\">    Example - creating a Module from an existing class, via the rh.module() factory method:</span>\n<span class=\"sd\">        &gt;&gt;&gt; other_model = Model(model_id=&quot;bert-base-uncased&quot;, device=&quot;cuda&quot;).to(&quot;my_gpu&quot;, &quot;my_env&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt;</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Another method: Create a module instance from an existing non-Module class using rh.module()</span>\n<span class=\"sd\">        &gt;&gt;&gt; RemoteModel = rh.module(cls=BERTModel, env=&quot;my_env&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; remote_model = RemoteModel(model_id=&quot;bert-base-uncased&quot;, device=&quot;cuda&quot;).to(system=&quot;my_gpu&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; remote_model.predict(&quot;Hello world!&quot;)  # Runs on system in env</span>\n<span class=\"sd\">        &gt;&gt;&gt;</span>\n<span class=\"sd\">        &gt;&gt;&gt; # You can also call remote class methods</span>\n<span class=\"sd\">        &gt;&gt;&gt; other_model = RemoteModel.get_model_size(&quot;bert-base-uncased&quot;)</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; # Loading a module</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_local_module = rh.module(name=&quot;~/my_module&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; my_s3_module = rh.module(name=&quot;@/my_module&quot;)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"nb\">any</span><span class=\"p\">([</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"p\">]):</span>\n        <span class=\"c1\"># Try reloading existing module</span>\n        <span class=\"k\">return</span> <span class=\"n\">Module</span><span class=\"o\">.</span><span class=\"n\">from_name</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">load_from_den</span><span class=\"o\">=</span><span class=\"n\">load_from_den</span><span class=\"p\">,</span> <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">env</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;The `env` argument is deprecated and will be removed in a future version. Please first &quot;</span>\n            <span class=\"s2\">&quot;construct your module and then do `module.to(system=system, env=env)` to set the environment. &quot;</span>\n            <span class=\"s2\">&quot;You can do `module.to(system=rh.here, env=env)` to set the environment on the local system.&quot;</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"n\">Env</span><span class=\"p\">):</span>\n        <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">_get_env_from</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">)</span>\n\n    <span class=\"n\">env_for_current_process</span> <span class=\"o\">=</span> <span class=\"n\">obj_store</span><span class=\"o\">.</span><span class=\"n\">get_process_env</span><span class=\"p\">()</span>\n    <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"n\">env</span>\n        <span class=\"ow\">or</span> <span class=\"n\">env_for_current_process</span>\n        <span class=\"ow\">or</span> <span class=\"n\">_get_env_from</span><span class=\"p\">(</span><span class=\"n\">_default_env_if_on_cluster</span><span class=\"p\">())</span>\n        <span class=\"ow\">or</span> <span class=\"n\">Env</span><span class=\"p\">()</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">cls_pointers</span> <span class=\"o\">=</span> <span class=\"n\">Module</span><span class=\"o\">.</span><span class=\"n\">_extract_pointers</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"n\">Env</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Sometimes env may still be a string, in which case it won&#39;t be modified</span>\n        <span class=\"p\">(</span>\n            <span class=\"n\">local_path_containing_module</span><span class=\"p\">,</span>\n            <span class=\"n\">should_add</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">Module</span><span class=\"o\">.</span><span class=\"n\">_get_local_path_containing_module</span><span class=\"p\">(</span><span class=\"n\">cls_pointers</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">reqs</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">should_add</span><span class=\"p\">:</span>\n            <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">reqs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">local_path_containing_module</span><span class=\"p\">)]</span> <span class=\"o\">+</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">reqs</span>\n\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span> <span class=\"ow\">or</span> <span class=\"p\">(</span>\n        <span class=\"n\">cls_pointers</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"n\">cls_pointers</span> <span class=\"k\">else</span> <span class=\"n\">generate_default_name</span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s2\">&quot;module&quot;</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">module_subclass</span> <span class=\"o\">=</span> <span class=\"n\">_module_subclass_factory</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">cls_pointers</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">module_subclass</span><span class=\"o\">.</span><span class=\"n\">_module_init_only</span><span class=\"p\">(</span>\n        <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"n\">env</span><span class=\"p\">,</span>\n        <span class=\"n\">dryrun</span><span class=\"o\">=</span><span class=\"n\">dryrun</span><span class=\"p\">,</span>\n        <span class=\"n\">pointers</span><span class=\"o\">=</span><span class=\"n\">cls_pointers</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span></div>\n\n\n<span class=\"n\">MODULE_METHODS</span> <span class=\"o\">=</span> <span class=\"nb\">dir</span><span class=\"p\">(</span><span class=\"n\">Module</span><span class=\"p\">)</span>\n</pre></div>", "current_page_name": "_modules/runhouse/resources/module", "sidebars": ["about.html", "navigation.html", "relations.html", "searchbox.html", "donate.html"], "customsidebar": null, "alabaster_version": "0.7.16", "alabaster_version_info": [0, 7, 16]}