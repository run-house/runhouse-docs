{"parents": [{"link": "../../../../", "title": "Module code"}], "title": "runhouse.resources.functionals.mapper", "body": "<h1>Source code for runhouse.resources.functionals.mapper</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">from</span> <span class=\"nn\">multiprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">pool</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">,</span> <span class=\"n\">Union</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.functions</span> <span class=\"kn\">import</span> <span class=\"n\">function</span><span class=\"p\">,</span> <span class=\"n\">Function</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">runhouse.resources.module</span> <span class=\"kn\">import</span> <span class=\"n\">Module</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"Mapper\"><a class=\"viewcode-back\" href=\"../../../../../api/python/mapper/#runhouse.Mapper\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Mapper</span><span class=\"p\">(</span><span class=\"n\">Module</span><span class=\"p\">):</span>\n<div class=\"viewcode-block\" id=\"Mapper.__init__\"><a class=\"viewcode-back\" href=\"../../../../../api/python/mapper/#runhouse.Mapper.__init__\">[docs]</a>    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">module</span><span class=\"p\">:</span> <span class=\"n\">Module</span><span class=\"p\">,</span>\n        <span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n        <span class=\"n\">num_replicas</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"n\">replicas</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Module</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"o\">**</span><span class=\"n\">kwargs</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Runhouse Mapper object. It is used for mapping a function or module method over a list of inputs,</span>\n<span class=\"sd\">        across a series of replicas.</span>\n\n<span class=\"sd\">        .. note::</span>\n<span class=\"sd\">                To create a Mapper, please use the factory method :func:`mapper`.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">module</span> <span class=\"o\">=</span> <span class=\"n\">module</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">method</span> <span class=\"o\">=</span> <span class=\"n\">method</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">num_replicas</span> <span class=\"o\">=</span> <span class=\"n\">num_replicas</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_auto_replicas</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_user_replicas</span> <span class=\"o\">=</span> <span class=\"n\">replicas</span> <span class=\"ow\">or</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_last_called</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">num_replicas</span> <span class=\"o\">&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">replicas</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">num_replicas</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_add_auto_replicas</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">num_replicas</span> <span class=\"o\">-</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">replicas</span><span class=\"p\">))</span></div>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">replicas</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_auto_replicas</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_user_replicas</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">add_replicas</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">replicas</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Module</span><span class=\"p\">]]):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">replicas</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">num_replicas</span> <span class=\"o\">+=</span> <span class=\"n\">replicas</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_add_auto_replicas</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">num_replicas</span> <span class=\"o\">-</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">replicas</span><span class=\"p\">))</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_user_replicas</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">replicas</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">drop_replicas</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">num_replicas</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">reap</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">reap</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">replica</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_auto_replicas</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">num_replicas</span><span class=\"p\">:]:</span>\n                <span class=\"n\">replica</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">kill</span><span class=\"p\">(</span><span class=\"n\">replica</span><span class=\"o\">.</span><span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_auto_replicas</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_auto_replicas</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"n\">num_replicas</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_add_auto_replicas</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">num_replicas</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_auto_replicas</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">replicate</span><span class=\"p\">(</span><span class=\"n\">num_replicas</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">increment_counter</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_last_called</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_last_called</span> <span class=\"o\">&gt;=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">replicas</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_last_called</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_last_called</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_call_method_on_replica</span><span class=\"p\">(</span><span class=\"n\">replica</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">replica</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"p\">)(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"Mapper.map\"><a class=\"viewcode-back\" href=\"../../../../../api/python/mapper/#runhouse.Mapper.map\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">map</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Map the function or method over a list of arguments.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; def local_sum(arg1, arg2, arg3):</span>\n<span class=\"sd\">            &gt;&gt;&gt;     return arg1 + arg2 + arg3</span>\n<span class=\"sd\">            &gt;&gt;&gt;</span>\n<span class=\"sd\">            &gt;&gt;&gt; remote_fn = rh.function(local_sum).to(my_cluster)</span>\n<span class=\"sd\">            &gt;&gt;&gt; mapper = rh.mapper(remote_fn, num_replicas=2)</span>\n<span class=\"sd\">            &gt;&gt;&gt; mapper.map([1, 2], [1, 4], [2, 3])</span>\n<span class=\"sd\">            &gt;&gt;&gt; # output: [4, 9]</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;stream_logs&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;stream_logs&quot;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">call_method_on_replica</span><span class=\"p\">(</span><span class=\"n\">job</span><span class=\"p\">):</span>\n            <span class=\"n\">replica</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"p\">,</span> <span class=\"n\">argies</span><span class=\"p\">,</span> <span class=\"n\">kwargies</span> <span class=\"o\">=</span> <span class=\"n\">job</span>\n            <span class=\"k\">return</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">replica</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"p\">)(</span><span class=\"o\">*</span><span class=\"n\">argies</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargies</span><span class=\"p\">)</span>\n\n        <span class=\"n\">jobs</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">replicas</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">increment_counter</span><span class=\"p\">()],</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">method</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">args</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span>\n        <span class=\"p\">]</span>\n\n        <span class=\"k\">with</span> <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">ThreadPool</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">num_replicas</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">p</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Run the function in parallel on the arguments, keeping the order.</span>\n            <span class=\"k\">return</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">imap</span><span class=\"p\">(</span><span class=\"n\">call_method_on_replica</span><span class=\"p\">,</span> <span class=\"n\">jobs</span><span class=\"p\">))</span></div>\n\n        <span class=\"c1\"># TODO should we add an async version of this?</span>\n        <span class=\"c1\"># async def call_method_on_args(argies):</span>\n        <span class=\"c1\">#     return getattr(self.replicas[self.increment_counter()], self.method)(*argies, **kwargs)</span>\n        <span class=\"c1\">#</span>\n        <span class=\"c1\"># async def gather():</span>\n        <span class=\"c1\">#     return await asyncio.gather(</span>\n        <span class=\"c1\">#         *[</span>\n        <span class=\"c1\">#             call_method_on_args(args)</span>\n        <span class=\"c1\">#             for args in zip(*args)</span>\n        <span class=\"c1\">#         ]</span>\n        <span class=\"c1\">#     )</span>\n        <span class=\"c1\"># return asyncio.run(gather())</span>\n\n<div class=\"viewcode-block\" id=\"Mapper.starmap\"><a class=\"viewcode-back\" href=\"../../../../../api/python/mapper/#runhouse.Mapper.starmap\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">starmap</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">args_lists</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Like :func:`map` except that the elements of the iterable are expected to be iterables</span>\n<span class=\"sd\">        that are unpacked as arguments. An iterable of ``[(1,2), (3, 4)]`` results in</span>\n<span class=\"sd\">        ``func(1,2), func(3,4)]``.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; def local_sum(arg1, arg2, arg3):</span>\n<span class=\"sd\">            &gt;&gt;&gt;     return arg1 + arg2 + arg3</span>\n<span class=\"sd\">            &gt;&gt;&gt;</span>\n<span class=\"sd\">            &gt;&gt;&gt; remote_fn = rh.function(local_sum).to(my_cluster)</span>\n<span class=\"sd\">            &gt;&gt;&gt; mapper = rh.mapper(remote_fn, num_replicas=2)</span>\n<span class=\"sd\">            &gt;&gt;&gt; arg_list = [(1,2), (3, 4)]</span>\n<span class=\"sd\">            &gt;&gt;&gt; # runs the function twice, once with args (1, 2) and once with args (3, 4)</span>\n<span class=\"sd\">            &gt;&gt;&gt; mapper.starmap(arg_list)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;stream_logs&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;stream_logs&quot;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">call_method_on_replica</span><span class=\"p\">(</span><span class=\"n\">job</span><span class=\"p\">):</span>\n            <span class=\"n\">replica</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"p\">,</span> <span class=\"n\">argies</span><span class=\"p\">,</span> <span class=\"n\">kwargies</span> <span class=\"o\">=</span> <span class=\"n\">job</span>\n            <span class=\"k\">return</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">replica</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"p\">)(</span><span class=\"o\">*</span><span class=\"n\">argies</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargies</span><span class=\"p\">)</span>\n\n        <span class=\"n\">jobs</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">replicas</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">increment_counter</span><span class=\"p\">()],</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">method</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">args</span> <span class=\"ow\">in</span> <span class=\"n\">args_lists</span>\n        <span class=\"p\">]</span>\n\n        <span class=\"k\">with</span> <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">ThreadPool</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">num_replicas</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">p</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Run the function in parallel on the arguments, keeping the order.</span>\n            <span class=\"k\">return</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">imap</span><span class=\"p\">(</span><span class=\"n\">call_method_on_replica</span><span class=\"p\">,</span> <span class=\"n\">jobs</span><span class=\"p\">))</span></div>\n\n<div class=\"viewcode-block\" id=\"Mapper.call\"><a class=\"viewcode-back\" href=\"../../../../../api/python/mapper/#runhouse.Mapper.call\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">call</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Call the function or method on a single replica.</span>\n\n<span class=\"sd\">        Example:</span>\n<span class=\"sd\">            &gt;&gt;&gt; def local_sum(arg1, arg2, arg3):</span>\n<span class=\"sd\">            &gt;&gt;&gt;     return arg1 + arg2 + arg3</span>\n<span class=\"sd\">            &gt;&gt;&gt;</span>\n<span class=\"sd\">            &gt;&gt;&gt; remote_fn = rh.function(local_sum).to(my_cluster)</span>\n<span class=\"sd\">            &gt;&gt;&gt; mapper = rh.mapper(remote_fn, num_replicas=2)</span>\n<span class=\"sd\">            &gt;&gt;&gt; for i in range(10):</span>\n<span class=\"sd\">            &gt;&gt;&gt;     mapper.call(i, 1, 2)</span>\n<span class=\"sd\">            &gt;&gt;&gt;     # output: 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, run in round-robin replica order</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">replicas</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">increment_counter</span><span class=\"p\">()],</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">method</span><span class=\"p\">)(</span>\n            <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span>\n        <span class=\"p\">)</span></div></div>\n\n\n<div class=\"viewcode-block\" id=\"mapper\"><a class=\"viewcode-back\" href=\"../../../../../api/python/mapper/#runhouse.mapper\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">mapper</span><span class=\"p\">(</span>\n    <span class=\"n\">module</span><span class=\"p\">:</span> <span class=\"n\">Module</span><span class=\"p\">,</span>\n    <span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">num_replicas</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"n\">replicas</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Module</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"o\">**</span><span class=\"n\">kwargs</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Mapper</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    A factory method for creating Mapper modules. A mapper is a module that can map a function or module method over</span>\n<span class=\"sd\">    a list of inputs in various ways.</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        module (Module): The module or function to be mapped.</span>\n<span class=\"sd\">        method (Optional[str], optional): The method of the module to be called. If the module is already a callable,</span>\n<span class=\"sd\">            this value defaults to ``&quot;call&quot;``.</span>\n<span class=\"sd\">        num_replicas (int, optional): The number of replicas to run the map function across. (Default: ``-1``)</span>\n\n<span class=\"sd\">            * If ``num_replicas`` is -1, it will be set to the number of available CPUs (according to Ray).</span>\n<span class=\"sd\">            * If ``num_replicas`` is greater than the number of user-specified replicas (``replicas``),</span>\n<span class=\"sd\">              the remaining replicas will be auto-generated by duplicating the module.</span>\n<span class=\"sd\">            * If ``num_replicas`` is 0, it will be left as the number of user-replicas passed into the module.</span>\n<span class=\"sd\">            * If ``num_replicas`` is less than the number of user-specified replicas, only ``num_replicas`` will</span>\n<span class=\"sd\">              be used.</span>\n<span class=\"sd\">        replicas (Optional[List[Module]], optional): List of user-specified replicas.</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        Mapper: The resulting Mapper object.</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        &gt;&gt;&gt; remote_fn = rh.function(local_fn).to(cluster)</span>\n<span class=\"sd\">        &gt;&gt;&gt; mapper = rh.mapper(remote_fn, num_replicas=2)</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; remote_module = rh.module(cls=MyClass, system=cluster, env=&quot;my_env&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; mapper = rh.mapper(remote_module, method=my_class_method, replicas=-1)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">callable</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">,</span> <span class=\"n\">Module</span><span class=\"p\">):</span>\n        <span class=\"n\">module</span> <span class=\"o\">=</span> <span class=\"n\">function</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">,</span> <span class=\"n\">Function</span><span class=\"p\">):</span>\n        <span class=\"n\">method</span> <span class=\"o\">=</span> <span class=\"n\">method</span> <span class=\"ow\">or</span> <span class=\"s2\">&quot;call&quot;</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">Mapper</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"p\">,</span> <span class=\"n\">num_replicas</span><span class=\"p\">,</span> <span class=\"n\">replicas</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span></div>\n</pre></div>", "current_page_name": "_modules/runhouse/resources/functionals/mapper", "sidebars": ["about.html", "navigation.html", "relations.html", "searchbox.html", "donate.html"], "customsidebar": null, "alabaster_version": "0.7.16", "alabaster_version_info": [0, 7, 16]}