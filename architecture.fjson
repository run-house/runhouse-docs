{"parents": [], "prev": {"link": "../tutorials/examples/distributed/", "title": "Distributed: HuggingFace Accelerate"}, "next": {"link": "compute/", "title": "Compute"}, "title": "Runhouse Architecture", "meta": null, "body": "<section id=\"runhouse-architecture\">\n<h1>Runhouse Architecture<a class=\"headerlink\" href=\"#runhouse-architecture\" title=\"Permalink to this heading\">\u00b6</a></h1>\n<p>Runhouse has four top-level objectives:</p>\n<ol class=\"arabic simple\">\n<li><p>Allowing users to natively program across compute resources</p></li>\n<li><p>Allowing users to command data between storage and compute</p></li>\n<li><p>Making resources accessible across environments and users</p></li>\n<li><p>Allowing resources to be shared among teams as living assets</p></li>\n</ol>\n<p>It achieves the above by providing four pillar features:</p>\n<div class=\"toctree-wrapper compound\">\n<ul>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"compute/\">Compute</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"data/\">Data</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"accessibility/\">Accessibility</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"management/\">Management</a></li>\n</ul>\n</div>\n<ol class=\"arabic\">\n<li><p><a class=\"reference internal\" href=\"compute/#compute\"><span class=\"std std-ref\">Compute</span></a> - The Function, Cluster, and Package APIs allow\na seamless flow of code and execution across local and remote compute. They blur the line\nbetween program execution and deployment, providing both a path of least resistence\nfor running a sub-routine on specific hardware, while unceremoniously turning that\nsub-routine into a reusable service. They also provide convenient dependency\nisolation and management, provider-agnostic provisioning and termination, and rich\ndebugging and accessibility interfaces built-in.</p></li>\n<li><p><a class=\"reference internal\" href=\"data/#data\"><span class=\"std std-ref\">Data</span></a> - The Folder, Table, and Blob APIs provide a simple interface for storing,\nrecalling, and moving data between the user\u2019s laptop, remote compute, cloud storage,\nand specialized storage (e.g. data warehouses). They provide least-common-denominator\nAPIs across providers, allowing users to easily specify the actions they want to take on the\ndata without needed to dig into provider-specific APIs. We\u2019d like to extend this to other\ndata concepts in the future, like kv-stores, time-series, vector and graph databases, etc.</p></li>\n<li><p><a class=\"reference internal\" href=\"accessibility/#accessibility\"><span class=\"std std-ref\">Accessibility</span></a> - Runhouse strives to provide a Google-Docs-like experience for\nportability and sharing of resources across users and environments. This is achieved by:</p>\n<ul class=\"simple\">\n<li><p>The Resource Naming System (RNS) allows resources to be named, persisted, and recalled\nacross environments. It consists of a lightweight metadata standard for each resource type\nwhich captures the information needed to load it in a new environment (e.g. Folder -&gt; provider,\nbucket, path, etc.), and a mechanism for saving and loading from either the working git repo or\na remote Runhouse key-value metadata store. The metadata store allows resources to be shared across\nusers and environments, while the git approach allows for local persistence and versioning or\nsharing across OSS projects.</p></li>\n<li><p>The Secrets API provides a simple interface for storing and retrieving secrets\nto a allow a more seamless experience when accessing resources across environments.\nIt provides a simple interface for storing and retrieving secrets from a variety of\nproviders (e.g. AWS, Azure, GCP, Hugging Face, Github, etc.) as well as SSH Keys and\ncustom secrets, and stores them in Hashicorp Vault.</p></li>\n</ul>\n</li>\n<li><p><a class=\"reference internal\" href=\"management/#management\"><span class=\"std std-ref\">Management</span></a> - Runhouse provides tools for visibility and management of resources\nas long-living assets shared by teams or projects. Both resources and users can be\norganized into arbitrarily-nested groups to apply access permissions, default behaviors (e.g.\ndefault storage locations, compute providers, instance autotermination, etc.), project delineation,\nor staging (e.g. dev vs. prod).</p>\n<p>The <a class=\"reference external\" href=\"https://api.run.house/\">Management UI</a> provides an individual or\nadmin view of all resources, secrets, groups, and sharing (this is only an MVP, and will be\noverhauled soon). Resource metadata is automatically versioned in RNS, allowing teams to maintain\nsingle-sources of truth for assets with zero downtime to update or roll back, and trace exact\nlineage for any resource (assuming the underlying the resources are not being deleted). We provide\nbasic logging out of the box today, and are working on providing comprehensive logging, monitoring,\nalerting.</p>\n</li>\n</ol>\n</section>\n\n    <script type=\"text/x-thebe-config\">\n    {\n        requestKernel: true,\n        binderOptions: {\n            repo: \"binder-examples/jupyter-stacks-datascience\",\n            ref: \"master\",\n        },\n        codeMirrorConfig: {\n            theme: \"abcdef\",\n            mode: \"python\"\n        },\n        kernelOptions: {\n            kernelName: \"python3\",\n            path: \"./.\"\n        },\n        predefinedOutput: true\n    }\n    </script>\n    <script>kernelName = 'python3'</script>", "metatags": "<meta name=\"generator\" content=\"Docutils 0.18.1: http://docutils.sourceforge.net/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["architecture/compute", "Compute", "N", "next"], ["tutorials/examples/distributed", "Distributed: HuggingFace Accelerate", "P", "previous"]], "sourcename": "architecture.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Runhouse Architecture</a></li>\n</ul>\n", "display_toc": false, "page_source_suffix": ".rst", "current_page_name": "architecture", "sidebars": ["sidebar-logo.html", "search-field.html", "sbt-sidebar-nav.html", "sbt-sidebar-footer.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "pagetitle": "Runhouse Architecture", "page_description": "Runhouse Architecture  Runhouse has four top-level objectives:  Allowing users to natively program across compute resources  Allowing users to command data betw", "author": "the Runhouse team \ud83c\udfc3\u200d\u2640\ufe0f\ud83c\udfe0", "github_user": "run-house", "github_repo": "runhouse", "github_version": "stable", "doc_path": "docs/", "theme_search_bar_text": "Search the docs ...", "theme_show_toc_level": 1}